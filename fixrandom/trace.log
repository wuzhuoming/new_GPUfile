Source path:... inception_fixrandom.py
New var:....... __name__ = '__main__'
New var:....... __doc__ = None
New var:....... __package__ = None
New var:....... __loader__ = <_frozen_importlib_external.SourceFileLoader object at 0x7f68b89e6b70>
New var:....... __spec__ = None
New var:....... __annotations__ = {}
New var:....... __builtins__ = <module 'builtins' (built-in)>
New var:....... __file__ = 'inception_fixrandom.py'
New var:....... __cached__ = None
New var:....... seed_value = 0
New var:....... os = <module 'os' from '/home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/os.py'>
New var:....... np = <module 'numpy' from '/home/zhuoming.wu/anaconda...2/lib/python3.6/site-packages/numpy/__init__.py'>
New var:....... random = <module 'random' from '/home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/random.py'>
New var:....... tf = <module 'tensorflow' from '/home/zhuoming.wu/ana.../python3.6/site-packages/tensorflow/__init__.py'>
New var:....... pd = <module 'pandas' from '/home/zhuoming.wu/anacond.../lib/python3.6/site-packages/pandas/__init__.py'>
New var:....... ImageDataGenerator = <class 'keras.preprocessing.image.ImageDataGenerator'>
New var:....... img_to_array = <function img_to_array at 0x7f683afb6950>
New var:....... load_img = <function load_img at 0x7f683d6ac268>
New var:....... cv2 = <module 'cv2.cv2' from '/home/zhuoming.wu/anacon...ackages/cv2/cv2.cpython-36m-x86_64-linux-gnu.so'>
New var:....... inception_v3 = <module 'keras.applications.inception_v3' from '...ite-packages/keras/applications/inception_v3.py'>
New var:....... InceptionV3 = <function keras_modules_injection.<locals>.wrapper at 0x7f683afa9ea0>
New var:....... inception_v3_preprocessor = <function keras_modules_injection.<locals>.wrapper at 0x7f683afab158>
New var:....... Dense = <class 'keras.layers.core.Dense'>
New var:....... GlobalAveragePooling2D = <class 'keras.layers.pooling.GlobalAveragePooling2D'>
New var:....... Model = <class 'keras.engine.training.Model'>
New var:....... Adam = <class 'keras.optimizers.Adam'>
New var:....... categorical_crossentropy = <function categorical_crossentropy at 0x7f683b0d41e0>
New var:....... train_test_split = <function train_test_split at 0x7f68314d8f28>
New var:....... tqdm = <class 'tqdm.std.tqdm'>
New var:....... makedirs = <function makedirs at 0x7f68b89efc80>
New var:....... expanduser = <function expanduser at 0x7f68b8995d90>
New var:....... exists = <function exists at 0x7f68b89950d0>
New var:....... join = <function join at 0x7f68b89958c8>
New var:....... load_config = <function load_config at 0x7f682adfe840>
New var:....... multiobjective_maximise_functions = <function multiobjective_maximise_functions at 0x7f684b4a9bf8>
New var:....... multiobjective_minimise_functions = <function multiobjective_minimise_functions at 0x7f684b4a9c80>
New var:....... maximise_function = <function maximise_function at 0x7f684b4a9950>
New var:....... minimise_function = <function minimise_function at 0x7f684b4a99d8>
New var:....... get_option_specs = <function get_option_specs at 0x7f682ae14b70>
New var:....... load_options = <function load_options at 0x7f682ae14d08>
New var:....... shutil = <module 'shutil' from '/home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/shutil.py'>
New var:....... pysnooper = <module 'pysnooper' from '/home/zhuoming.wu/anac...b/python3.6/site-packages/pysnooper/__init__.py'>
New var:....... time = <module 'time' (built-in)>
New var:....... runtime_eval = <function runtime_eval at 0x7f68b8a17e18>
New var:....... acc_eval = <function acc_eval at 0x7f684b4be268>
New var:....... train_folder = './data/train/'
New var:....... train_dogs =                                      id         ...bff356e9482a80a6e29aac.jpg[2184 rows x 3 columns]
New var:....... top_breeds = ['afghan_hound', 'airedale', 'australian_terrier...ottish_deerhound', 'shih-tzu', 'tibetan_terrier']
New var:....... target_labels = 8                   basenji9        scottish_dee..._pinscherName: breed, Length: 2184, dtype: object
New var:....... one_hot =        afghan_hound  airedale  australian_terrie...       0                0[2184 rows x 20 columns]
New var:....... one_hot_labels = array([[0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ... 0],       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
New var:....... train_data = array([[[[137., 146.,  79.],         [127., 136.....],         [120., 112., 127.]]]], dtype=float32)
New var:....... x_train = array([[[[141., 157.,  94.],         [110., 126.....],         [ 27.,  30.,  37.]]]], dtype=float32)
New var:....... x_validation = array([[[[139.,  85.,  61.],         [136.,  82.....],         [112., 106., 108.]]]], dtype=float32)
New var:....... y_train = array([[0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ... 0],       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)
New var:....... y_validation = array([[0, 0, 0, ..., 0, 0, 0],       [0, 0, 0, ... 0],       [0, 0, 0, ..., 1, 0, 0]], dtype=uint8)
New var:....... val_datagen = <keras.preprocessing.image.ImageDataGenerator object at 0x7f684b304e48>
New var:....... final_acc = 0.0
New var:....... batch_list = [14, 16, 18, 20, 2, 4, 6, 8, 10, 12, 22, 24, 26, 28, 30, 32]
New var:....... Dense_list = [16, 32, 64, 128, 256, 512]
New var:....... LR_list = [1e-06, 2e-06, 3e-06, 4e-06, 5e-06, 6e-06, 7e-06..., 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.01]
New var:....... epoch_list = [2]
New var:....... inter_list = [1, 2, 3, 4]
New var:....... intra_list = [2, 4, 6, 8, 10, 12]
New var:....... build_cost_model_list = [0, 2, 4, 6, 8]
New var:....... infer_shapes_list = [True, False]
New var:....... place_pruned_graph_list = [True, False]
New var:....... enable_bfloat16_sendrecv_list = [True, False]
New var:....... do_common_subexpression_elimination_list = [True, False]
New var:....... max_folded_constant_list = [2, 4, 6, 8, 10]
New var:....... do_function_inlining_list = [True, False]
New var:....... global_jit_level_list = [0, 1, 2]
New var:....... domain_vars = [{'type': 'discrete_numeric', 'items': [14, 16, ...{'type': 'discrete_numeric', 'items': [0, 1, 2]}]
New var:....... dragonfly_args = [{'name': 'report_results_every', 'required': Fa...son or pb config file. ', 'type': <class 'int'>}]
New var:....... options = Namespace(init_capital=None, init_capital_frac=0.4, num_init_evals=2, report_results_every=2)
New var:....... config_params = {'domain': [{'type': 'discrete_numeric', 'items'...'type': 'discrete_numeric', 'items': [0, 1, 2]}]}
New var:....... config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
New var:....... max_num_evals = 5
New var:....... moo_objectives = [<function runtime_eval at 0x7f68b8a17e18>, <function acc_eval at 0x7f684b4be268>]
21:50:14.765973 line       211 	pareto_opt_vals, pareto_opt_pts, history = multiobjective_maximise_functions(moo_objectives, config.domain,max_num_evals,config=config,options=options)
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
Starting var:.. funcs = [<function runtime_eval at 0x7f68b8a17e18>, <function acc_eval at 0x7f684b4be268>]
Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
Starting var:.. max_capital = 5
Starting var:.. opt_method = 'bo'
Starting var:.. worker_manager = 'default'
Starting var:.. num_workers = 1
Starting var:.. capital_type = 'num_evals'
Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
Starting var:.. options = Namespace(init_capital=None, init_capital_frac=0.4, num_init_evals=2, report_results_every=2)
Starting var:.. reporter = 'default'
21:50:14.901433 call        26 def multiobjective_maximise_functions(funcs, domain, max_capital, opt_method='bo',
21:50:14.902132 line        66   if isinstance(funcs, tuple) and len(funcs) == 2:
21:50:14.902338 line        71   elif isinstance(funcs, list):
21:50:14.902528 line        72     raw_funcs = funcs
New var:....... raw_funcs = [<function runtime_eval at 0x7f68b8a17e18>, <function acc_eval at 0x7f684b4be268>]
21:50:14.902713 line        74         preprocess_arguments(domain, funcs, config)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
    Starting var:.. funcs = [<function runtime_eval at 0x7f68b8a17e18>, <function acc_eval at 0x7f684b4be268>]
    Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
    21:50:14.902951 call       220 def preprocess_arguments(domain, funcs, config):
    21:50:14.907246 line       223   converted_cp_to_euclidean = False
    New var:....... converted_cp_to_euclidean = False
    21:50:14.907415 line       224   if isinstance(config, str):
    21:50:14.907615 line       226   if domain is None:
    21:50:14.907772 line       229   if config is not None:
    21:50:14.907926 line       230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
    21:50:14.908086 line       232       for f in funcs]
        Starting var:.. .0 = <list_iterator object at 0x7f682a84d4a8>
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:50:14.908249 call       230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
        21:50:14.908473 line       230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
        21:50:14.908621 line       232       for f in funcs]
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
            Starting var:.. raw_func = <function runtime_eval at 0x7f68b8a17e18>
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:50:14.908771 call       518 def get_processed_func_from_raw_func_for_cp_domain(raw_func, cp_domain,
            21:50:14.909251 line       523   def _eval_func_x_after_unpacking(x, _raw_func, _cp_domain, _index_ordering,
            New var:....... _eval_func_x_after_unpacking = <function get_processed_func_from_raw_func_for_c...>._eval_func_x_after_unpacking at 0x7f671330ca60>
            21:50:14.909396 line       529   def _get_processed_func(_raw_func, _cp_domain, _index_ordering, _dim_ordering):
            New var:....... _get_processed_func = <function get_processed_func_from_raw_func_for_c...n.<locals>._get_processed_func at 0x7f671330cae8>
            21:50:14.909566 line       534   return _get_processed_func(raw_func, cp_domain, index_ordering, dim_ordering)
            21:50:14.909747 return     534   return _get_processed_func(raw_func, cp_domain, index_ordering, dim_ordering)
            Return value:.. <function get_processed_func_from_raw_func_for_c...ocessed_func.<locals>.<lambda> at 0x7f671330cb70>
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
        New var:....... f = <function runtime_eval at 0x7f68b8a17e18>
        21:50:14.909930 line       230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
        21:50:14.910187 line       232       for f in funcs]
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
            Starting var:.. raw_func = <function acc_eval at 0x7f684b4be268>
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:50:14.910348 call       518 def get_processed_func_from_raw_func_for_cp_domain(raw_func, cp_domain,
            21:50:14.910647 line       523   def _eval_func_x_after_unpacking(x, _raw_func, _cp_domain, _index_ordering,
            New var:....... _eval_func_x_after_unpacking = <function get_processed_func_from_raw_func_for_c...>._eval_func_x_after_unpacking at 0x7f671330cae8>
            21:50:14.910776 line       529   def _get_processed_func(_raw_func, _cp_domain, _index_ordering, _dim_ordering):
            New var:....... _get_processed_func = <function get_processed_func_from_raw_func_for_c...n.<locals>._get_processed_func at 0x7f671330cbf8>
            21:50:14.910942 line       534   return _get_processed_func(raw_func, cp_domain, index_ordering, dim_ordering)
            21:50:14.911134 return     534   return _get_processed_func(raw_func, cp_domain, index_ordering, dim_ordering)
            Return value:.. <function get_processed_func_from_raw_func_for_c...ocessed_func.<locals>.<lambda> at 0x7f671330cc80>
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
        Modified var:.. f = <function acc_eval at 0x7f684b4be268>
        21:50:14.911319 line       230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
        21:50:14.911556 return     230     proc_funcs = [get_processed_func_from_raw_func_for_cp_domain(f, config.domain,
        Return value:.. [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
    New var:....... proc_funcs = [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
    21:50:14.911764 line       235   ret_funcs = proc_funcs
    New var:....... ret_funcs = [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
    21:50:14.911966 line       237   if isinstance(domain, (list, tuple)):
    21:50:14.912193 line       239   elif domain.get_type() == 'euclidean':
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/domains.py
        Starting var:.. self = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
        21:50:14.912368 call       406   def get_type(self):
        21:50:14.922775 line       408     return 'cartesian_product'
        21:50:14.922892 return     408     return 'cartesian_product'
        Return value:.. 'cartesian_product'
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    21:50:14.923044 line       241   elif domain.get_type() == 'cartesian_product':
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/domains.py
        Starting var:.. self = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
        21:50:14.923319 call       406   def get_type(self):
        21:50:14.923506 line       408     return 'cartesian_product'
        21:50:14.923607 return     408     return 'cartesian_product'
        Return value:.. 'cartesian_product'
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    21:50:14.923752 line       242     if domain.num_domains == 1 and domain.list_of_domains[0].get_type() == 'euclidean' and \
    21:50:14.923973 line       259   return domain, ret_funcs, config, converted_cp_to_euclidean
    21:50:14.924164 return     259   return domain, ret_funcs, config, converted_cp_to_euclidean
    Return value:.. (<dragonfly.exd.domains.CartesianProductDomain o...omvar_12', 'domvar_13']), name='no_name'), False)
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
New var:....... converted_cp_to_euclidean = False
New var:....... mfc_funcs_arg = [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
21:50:14.924433 line        78   if domain.get_type() == 'euclidean':
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/domains.py
    Starting var:.. self = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
    21:50:14.924760 call       406   def get_type(self):
    21:50:14.924952 line       408     return 'cartesian_product'
    21:50:14.925053 return     408     return 'cartesian_product'
    Return value:.. 'cartesian_product'
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
21:50:14.925216 line        82     multi_func_caller = CPMultiFunctionCaller(mfc_funcs_arg, domain, raw_funcs=raw_funcs,
21:50:14.925471 line        83                           domain_orderings=config.domain_orderings, config=config)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/experiment_caller.py
    Starting var:.. self = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
    Starting var:.. funcs = [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
    Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
    Starting var:.. descr = ''
    Starting var:.. raw_funcs = [<function runtime_eval at 0x7f68b8a17e18>, <function acc_eval at 0x7f684b4be268>]
    Starting var:.. domain_orderings = Namespace(dim_ordering=[['', '', '', '', ''], ['...mvar_10', 'domvar_11', 'domvar_12', 'domvar_13'])
    Starting var:.. argmax = None
    Starting var:.. maxval = None
    Starting var:.. argmin = None
    Starting var:.. minval = None
    Starting var:.. noise_type = 'no_noise'
    Starting var:.. noise_scale = None
    Starting var:.. fidel_space = None
    Starting var:.. fidel_cost_func = None
    Starting var:.. fidel_to_opt = None
    Starting var:.. fidel_space_orderings = None
    Starting var:.. args = ()
    Starting var:.. kwargs = {'config': Namespace(domain=<dragonfly.exd.domai...11', 'domvar_12', 'domvar_13']), name='no_name')}
    Starting var:.. __class__ = <class 'dragonfly.exd.experiment_caller.CPMultiFunctionCaller'>
    21:50:14.925685 call       535   def __init__(self, funcs, domain, descr='', raw_funcs=None, domain_orderings=None,
    21:50:14.926798 line       541     self.raw_funcs = raw_funcs
    21:50:14.927056 line       542     self.domain_orderings = domain_orderings
    21:50:14.927325 line       543     self.fidel_space_orderings = fidel_space_orderings
    21:50:14.927566 line       544     super(CPMultiFunctionCaller, self).__init__(funcs, domain, descr,
    21:50:14.927802 line       548       *args, **kwargs)
        Starting var:.. self = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
        Starting var:.. funcs = [<function get_processed_func_from_raw_func_for_...cessed_func.<locals>.<lambda> at 0x7f671330cc80>]
        Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
        Starting var:.. descr = ''
        Starting var:.. argmax = None
        Starting var:.. maxval = None
        Starting var:.. argmin = None
        Starting var:.. minval = None
        Starting var:.. noise_type = 'no_noise'
        Starting var:.. noise_scale = None
        Starting var:.. fidel_space = None
        Starting var:.. fidel_cost_func = None
        Starting var:.. fidel_to_opt = None
        Starting var:.. args = ()
        Starting var:.. kwargs = {'config': Namespace(domain=<dragonfly.exd.domai...11', 'domvar_12', 'domvar_13']), name='no_name')}
        Starting var:.. __class__ = <class 'dragonfly.exd.experiment_caller.MultiFunctionCaller'>
        21:50:14.928046 call       312   def __init__(self, funcs, domain, descr='',
        21:50:14.928788 line       318     self.funcs = funcs
        21:50:14.928996 line       319     self.argmax = argmax
        21:50:14.929213 line       320     self.maxval = maxval
        21:50:14.929415 line       321     self.argmin = argmin
        21:50:14.929614 line       322     self.minval = minval
        21:50:14.929813 line       323     experiment_caller = self._get_experiment_caller()
            Starting var:.. self = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
            21:50:14.930018 call       329   def _get_experiment_caller(self):
            21:50:14.930200 line       334     if isinstance(self.funcs, list):
            21:50:14.930309 line       335       self._has_many_functions = True
            21:50:14.930411 line       336       self.num_funcs = len(self.funcs)
            21:50:14.930512 line       337       return lambda *_args, **_kwargs: [float(f(*_args, **_kwargs)) for f in self.funcs]
            21:50:14.930611 return     337       return lambda *_args, **_kwargs: [float(f(*_args, **_kwargs)) for f in self.funcs]
            Return value:.. <function MultiFunctionCaller._get_experiment_caller.<locals>.<lambda> at 0x7f6713327620>
        New var:....... experiment_caller = <function MultiFunctionCaller._get_experiment_caller.<locals>.<lambda> at 0x7f6713327620>
        21:50:14.930758 line       324     super(MultiFunctionCaller, self).__init__(experiment_caller, domain, descr,
        21:50:14.931009 line       327       *args, **kwargs)
            Starting var:.. self = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
            Starting var:.. experiment = <function MultiFunctionCaller._get_experiment_caller.<locals>.<lambda> at 0x7f6713327620>
            Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. descr = ''
            Starting var:.. noise_type = 'no_noise'
            Starting var:.. noise_scale = None
            Starting var:.. fidel_space = None
            Starting var:.. fidel_cost_func = None
            Starting var:.. fidel_to_opt = None
            Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
            21:50:14.931239 call        44   def __init__(self, experiment, domain, descr='',
            21:50:14.931767 line        49     self.experiment = experiment
            21:50:14.931949 line        50     self.domain = domain
            21:50:14.932140 line        51     self.descr = descr
            21:50:14.932316 line        52     self.config = config
            21:50:14.932488 line        53     self._set_up_noise(noise_type, noise_scale)
            21:50:14.932669 line        54     self._mf_set_up(fidel_space, fidel_cost_func, fidel_to_opt)
            21:50:14.932863 return      54     self._mf_set_up(fidel_space, fidel_cost_func, fidel_to_opt)
            Return value:.. None
        21:50:14.933106 return     327       *args, **kwargs)
        Return value:.. None
    21:50:14.933367 line       549     self._set_up_point_reconfiguration()
        Starting var:.. self = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
        21:50:14.933613 call       551   def _set_up_point_reconfiguration(self):
        21:50:14.933765 line       553     if self.domain_orderings is not None or self.fidel_space_orderings is not None:
        21:50:14.933868 line       554       from .cp_domain_utils import get_raw_point_from_processed_point, get_processed_point_from_raw_point
            Source path:... <frozen importlib._bootstrap>
            Starting var:.. self = ModuleSpec(name='dragonfly.exd.experiment_caller...ite-packages/dragonfly/exd/experiment_caller.py')
            21:50:14.933972 call       416 SOURCE IS UNAVAILABLE
            21:50:14.934245 line       419 SOURCE IS UNAVAILABLE
            21:50:14.934359 line       420 SOURCE IS UNAVAILABLE
            21:50:14.934469 return     420 SOURCE IS UNAVAILABLE
            Return value:.. 'dragonfly.exd'
            Starting var:.. module = <module 'dragonfly.exd.cp_domain_utils' from '/h.../site-packages/dragonfly/exd/cp_domain_utils.py'>
            Starting var:.. fromlist = ('get_raw_point_from_processed_point', 'get_processed_point_from_raw_point')
            Starting var:.. import_ = <built-in function __import__>
            Starting var:.. recursive = False
            21:50:14.934633 call       997 SOURCE IS UNAVAILABLE
            21:50:14.934904 line      1007 SOURCE IS UNAVAILABLE
            21:50:14.935030 line      1032 SOURCE IS UNAVAILABLE
            21:50:14.935166 return    1032 SOURCE IS UNAVAILABLE
            Return value:.. <module 'dragonfly.exd.cp_domain_utils' from '/h.../site-packages/dragonfly/exd/cp_domain_utils.py'>
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/experiment_caller.py
        New var:....... get_processed_point_from_raw_point = <function get_processed_point_from_raw_point at 0x7f682adfeae8>
        New var:....... get_raw_point_from_processed_point = <function get_raw_point_from_processed_point at 0x7f682adfeb70>
        21:50:14.935340 line       555     if self.domain_orderings is not None:
        21:50:14.935555 line       557         lambda pt: get_raw_point_from_processed_point(pt, self.domain,
        21:50:14.935661 line       561         lambda pt: get_processed_point_from_raw_point(pt, self.domain,
        21:50:14.935768 line       564     if self.fidel_space_orderings is not None:
        21:50:14.935871 return     564     if self.fidel_space_orderings is not None:
        Return value:.. None
    21:50:14.936017 return     549     self._set_up_point_reconfiguration()
    Return value:.. None
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
New var:....... multi_func_caller = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
21:50:14.936322 line        85   options = load_options_for_method(opt_method, 'moo', domain, capital_type, options)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    Starting var:.. method = 'bo'
    Starting var:.. prob = 'moo'
    Starting var:.. domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
    Starting var:.. capital_type = 'num_evals'
    Starting var:.. options = Namespace(init_capital=None, init_capital_frac=0.4, num_init_evals=2, report_results_every=2)
    21:50:14.936618 call        97 def load_options_for_method(method, prob, domain, capital_type, options=None):
    21:50:14.936956 line       101   method = 'ga' if method == 'ea' else method
    21:50:14.937098 line       103   case_sel = (method, prob, domain.get_type())
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/domains.py
        Starting var:.. self = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
        21:50:14.937235 call       406   def get_type(self):
        21:50:14.937414 line       408     return 'cartesian_product'
        21:50:14.937512 return     408     return 'cartesian_product'
        Return value:.. 'cartesian_product'
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    New var:....... case_sel = ('bo', 'moo', 'cartesian_product')
    21:50:14.937650 line       104   if case_sel == ('ga', 'opt', 'cartesian_product'):
    21:50:14.937860 line       106   elif case_sel == ('bo', 'opt', 'euclidean'):
    21:50:14.937991 line       108   elif case_sel == ('bo', 'opt', 'cartesian_product'):
    21:50:14.938134 line       110   elif (case_sel == ('direct', 'opt', 'euclidean') or \
    21:50:14.938266 line       111         case_sel == ('pdoo', 'opt', 'euclidean')) and \
    21:50:14.938395 line       114   elif case_sel == ('rand', 'opt', 'euclidean'):
    21:50:14.938522 line       116   elif case_sel == ('rand', 'opt', 'cartesian_product'):
    21:50:14.938650 line       118   elif case_sel == ('rand', 'mfopt', 'euclidean'):
    21:50:14.938776 line       120   elif case_sel == ('rand', 'mfopt', 'cartesian_product'):
    21:50:14.938903 line       122   elif case_sel == ('bo', 'mfopt', 'euclidean'):
    21:50:14.939029 line       124   elif case_sel == ('bo', 'mfopt', 'cartesian_product'):
    21:50:14.939176 line       126   elif case_sel == ('bo', 'moo', 'euclidean'):
    21:50:14.939313 line       128   elif case_sel == ('bo', 'moo', 'cartesian_product'):
    21:50:14.939443 line       129     opt_options = load_options(get_all_cp_moo_gp_bandit_args())
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
        Starting var:.. additional_args = None
        21:50:14.939574 call        62 def get_all_cp_moo_gp_bandit_args(additional_args=None):
        21:50:14.939972 line        64   if additional_args is None:
        21:50:14.940086 line        65     additional_args = []
        Modified var:.. additional_args = []
        21:50:14.940192 line        66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/gp_bandit.py
            Starting var:.. additional_args = [{'name': 'moo_strategy', 'required': False, 'de...mean functions for Multi-objective GP bandits.'}]
            21:50:14.940331 call       135 def get_all_cp_gp_bandit_args(additional_args=None):
            21:50:14.954690 line       137   if additional_args is None:
            21:50:14.954823 line       139   return get_all_gp_bandit_args(additional_args) + cartesian_product_gp_args
            21:50:14.954959 return     139   return get_all_gp_bandit_args(additional_args) + cartesian_product_gp_args
            Return value:.. [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
        21:50:14.955403 return      66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
        Return value:.. [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Starting var:.. list_of_options = [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        Starting var:.. descr = 'Algorithm'
        Starting var:.. reporter = None
        Starting var:.. cmd_line = False
        Starting var:.. partial_options = None
        21:50:14.955835 call        51 def load_options(list_of_options, descr='Algorithm', reporter=None, cmd_line=False,
        21:50:14.956768 line        56   parser = argparse.ArgumentParser(description=descr)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = REPR FAILED
            Starting var:.. prog = None
            Starting var:.. usage = None
            Starting var:.. description = 'Algorithm'
            Starting var:.. epilog = None
            Starting var:.. parents = []
            Starting var:.. formatter_class = <class 'argparse.HelpFormatter'>
            Starting var:.. prefix_chars = '-'
            Starting var:.. fromfile_prefix_chars = None
            Starting var:.. argument_default = None
            Starting var:.. conflict_handler = 'error'
            Starting var:.. add_help = True
            Starting var:.. allow_abbrev = True
            Starting var:.. __class__ = <class 'argparse.ArgumentParser'>
            21:50:14.957158 call      1604     def __init__(self,
            21:50:14.974837 line      1618         superinit = super(ArgumentParser, self).__init__
            New var:....... superinit = REPR FAILED
            21:50:14.975020 line      1619         superinit(description=description,
            21:50:14.975263 line      1620                   prefix_chars=prefix_chars,
            21:50:14.975434 line      1621                   argument_default=argument_default,
            21:50:14.975600 line      1622                   conflict_handler=conflict_handler)
            21:50:14.975892 line      1625         if prog is None:
            21:50:14.976085 line      1626             prog = _os.path.basename(_sys.argv[0])
            Modified var:.. prog = 'inception_fixrandom.py'
            21:50:14.976291 line      1628         self.prog = prog
            21:50:14.976504 line      1629         self.usage = usage
            21:50:14.976672 line      1630         self.epilog = epilog
            21:50:14.976838 line      1631         self.formatter_class = formatter_class
            21:50:14.977003 line      1632         self.fromfile_prefix_chars = fromfile_prefix_chars
            21:50:14.977188 line      1633         self.add_help = add_help
            Modified var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Modified var:.. superinit = <bound method _ActionsContainer.__init__ of Argu...tter'>, conflict_handler='error', add_help=True)>
            21:50:14.977419 line      1634         self.allow_abbrev = allow_abbrev
            21:50:14.977699 line      1636         add_group = self.add_argument_group
            New var:....... add_group = <bound method _ActionsContainer.add_argument_gro...tter'>, conflict_handler='error', add_help=True)>
            21:50:14.977889 line      1637         self._positionals = add_group(_('positional arguments'))
            21:50:14.978632 line      1638         self._optionals = add_group(_('optional arguments'))
            21:50:14.979304 line      1639         self._subparsers = None
            21:50:14.979546 line      1642         def identity(string):
            New var:....... identity = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:14.979760 line      1644         self.register('type', None, identity)
            21:50:14.980027 line      1648         default_prefix = '-' if '-' in prefix_chars else prefix_chars[0]
            New var:....... default_prefix = '-'
            21:50:14.980258 line      1649         if self.add_help:
            21:50:14.980514 line      1650             self.add_argument(
            21:50:14.980724 line      1651                 default_prefix+'h', default_prefix*2+'help',
            21:50:14.980932 line      1652                 action='help', default=SUPPRESS,
            21:50:14.981161 line      1653                 help=_('show this help message and exit'))
            21:50:14.981913 line      1656         for parent in parents:
            21:50:14.982176 return    1656         for parent in parents:
            Return value:.. None
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... parser = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
        21:50:14.982455 line        57   opt_names_default_parsed = {}
        New var:....... opt_names_default_parsed = {}
        21:50:14.982958 line        58   for elem in list_of_options:
        New var:....... elem = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        21:50:14.983418 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:14.983867 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:14.993692 line       138     if memo is None:
            21:50:14.993837 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:14.993969 line       141     d = id(x)
            New var:....... d = 140085916891320
            21:50:14.994171 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:14.994349 line       143     if y is not _nil:
            21:50:14.994541 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:14.994685 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:14.994867 line       149     if copier:
            21:50:14.995051 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916891320: {'name': 'moo_strategy', 'requ...rategy. So far, Dragonfly only supports moors.'}}
            Modified var:.. y = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            21:50:14.995320 line       183     if y is not x:
            21:50:14.995563 line       184         memo[d] = y
            21:50:14.995715 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916891320: {'name': 'moo_strategy', 'requ...ategy. So far, Dragonfly only supports moors.'}]}
            21:50:14.995882 line       186     return y
            21:50:14.996092 return     186     return y
            Return value:.. {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... opt_dict = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        21:50:14.996313 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'moors', 'help': ...trategy. So far, Dragonfly only supports moors.'}
        New var:....... opt_name = 'moo_strategy'
        21:50:14.996841 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None]}
        21:50:14.997367 line        62     if not opt_name.startswith('--'):
        21:50:14.997845 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moo_strategy'
        21:50:14.998329 line        64     if opt_name == '--options':
        21:50:14.998837 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moo_strategy',)
            Starting var:.. kwargs = {'required': False, 'default': 'moors', 'help': ...trategy. So far, Dragonfly only supports moors.'}
            21:50:14.999303 call      1307     def add_argument(self, *args, **kwargs):
            21:50:14.999636 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:14.999795 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:14.999995 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'moors', 'help': ..._strategy', 'option_strings': ['--moo_strategy']}
            21:50:15.000191 line      1327         if 'default' not in kwargs:
            21:50:15.000397 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.000570 line      1336         if not callable(action_class):
            21:50:15.000773 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moo_strategy'], ...r, Dragonfly only supports moors.', metavar=None)
            21:50:15.000964 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.001225 line      1342         if not callable(type_func):
            21:50:15.001464 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.001652 line      1347             try:
            21:50:15.001834 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.002132 line      1352         return self._add_action(action)
            21:50:15.002371 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moo_strategy'], ...r, Dragonfly only supports moors.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.002637 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        21:50:15.003127 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.003598 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.003899 line       138     if memo is None:
            21:50:15.004034 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.004189 line       141     d = id(x)
            New var:....... d = 140085916891896
            21:50:15.004379 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.004548 line       143     if y is not _nil:
            21:50:15.004718 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.004850 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.005026 line       149     if copier:
            21:50:15.005229 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916891896: {'name': 'moors_scalarisation'...for MOORS. Should be "tchebychev" or "linear".'}}
            Modified var:.. y = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:15.005479 line       183     if y is not x:
            21:50:15.005699 line       184         memo[d] = y
            21:50:15.005844 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916891896: {'name': 'moors_scalarisation'...or MOORS. Should be "tchebychev" or "linear".'}]}
            21:50:15.005996 line       186     return y
            21:50:15.006200 return     186     return y
            Return value:.. {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        21:50:15.006400 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tchebychev', 'he... for MOORS. Should be "tchebychev" or "linear".'}
        Modified var:.. opt_name = 'moors_scalarisation'
        21:50:15.006889 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalarisation': ['tchebychev', None]}
        21:50:15.007393 line        62     if not opt_name.startswith('--'):
        21:50:15.007834 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_scalarisation'
        21:50:15.008252 line        64     if opt_name == '--options':
        21:50:15.008700 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_scalarisation',)
            Starting var:.. kwargs = {'required': False, 'default': 'tchebychev', 'he... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:15.009112 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.009434 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.009581 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.009768 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tchebychev', 'he...on', 'option_strings': ['--moors_scalarisation']}
            21:50:15.009932 line      1327         if 'default' not in kwargs:
            21:50:15.010146 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.010311 line      1336         if not callable(action_class):
            21:50:15.010504 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_scalarisat...ould be "tchebychev" or "linear".', metavar=None)
            21:50:15.010680 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.010900 line      1342         if not callable(type_func):
            21:50:15.011133 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.011310 line      1347             try:
            21:50:15.011482 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.011751 line      1352         return self._add_action(action)
            21:50:15.011968 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_scalarisat...ould be "tchebychev" or "linear".', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.012238 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        21:50:15.012690 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.013154 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.013437 line       138     if memo is None:
            21:50:15.013562 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.013683 line       141     d = id(x)
            New var:....... d = 140085916892616
            21:50:15.013843 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.014003 line       143     if y is not _nil:
            21:50:15.014189 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.014320 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.014489 line       149     if copier:
            21:50:15.014658 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916892616: {'name': 'moors_weight_sampler...uniform', 'help': 'A weight sampler for moors.'}}
            Modified var:.. y = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            21:50:15.014898 line       183     if y is not x:
            21:50:15.015137 line       184         memo[d] = y
            21:50:15.015284 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916892616: {'name': 'moors_weight_sampler...niform', 'help': 'A weight sampler for moors.'}]}
            21:50:15.015434 line       186     return y
            21:50:15.015633 return     186     return y
            Return value:.. {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        21:50:15.015823 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'flat_uniform', 'help': 'A weight sampler for moors.'}
        Modified var:.. opt_name = 'moors_weight_sampler'
        21:50:15.016330 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'moors_weight_sampler': ['flat_uniform', None]}
        21:50:15.016808 line        62     if not opt_name.startswith('--'):
        21:50:15.017249 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_weight_sampler'
        21:50:15.017628 line        64     if opt_name == '--options':
        21:50:15.018041 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_weight_sampler',)
            Starting var:.. kwargs = {'required': False, 'default': 'flat_uniform', 'help': 'A weight sampler for moors.'}
            21:50:15.018435 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.018727 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.018863 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.019038 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'flat_uniform', '...r', 'option_strings': ['--moors_weight_sampler']}
            21:50:15.019215 line      1327         if 'default' not in kwargs:
            21:50:15.019398 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.019550 line      1336         if not callable(action_class):
            21:50:15.019731 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_weight_sam...help='A weight sampler for moors.', metavar=None)
            21:50:15.019896 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.020119 line      1342         if not callable(type_func):
            21:50:15.020327 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.020492 line      1347             try:
            21:50:15.020653 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.020916 line      1352         return self._add_action(action)
            21:50:15.021133 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_weight_sam...help='A weight sampler for moors.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.021381 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        21:50:15.021812 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.022254 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.022521 line       138     if memo is None:
            21:50:15.022640 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.022754 line       141     d = id(x)
            New var:....... d = 140085916893048
            21:50:15.022905 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.023059 line       143     if y is not _nil:
            21:50:15.023234 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.023357 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.023517 line       149     if copier:
            21:50:15.023680 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916893048: {'name': 'moors_reference_poin...lt': None, 'help': 'Reference point for MOORS.'}}
            Modified var:.. y = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            21:50:15.023901 line       183     if y is not x:
            21:50:15.024126 line       184         memo[d] = y
            21:50:15.024265 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916893048: {'name': 'moors_reference_poin...t': None, 'help': 'Reference point for MOORS.'}]}
            21:50:15.024408 line       186     return y
            21:50:15.024584 return     186     return y
            Return value:.. {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        21:50:15.024768 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Reference point for MOORS.'}
        Modified var:.. opt_name = 'moors_reference_point'
        21:50:15.025254 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...m', None], 'moors_reference_point': [None, None]}
        21:50:15.025709 line        62     if not opt_name.startswith('--'):
        21:50:15.026151 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_reference_point'
        21:50:15.026533 line        64     if opt_name == '--options':
        21:50:15.026949 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_reference_point',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Reference point for MOORS.'}
            21:50:15.027356 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.027650 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.027785 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.027956 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Re...', 'option_strings': ['--moors_reference_point']}
            21:50:15.028120 line      1327         if 'default' not in kwargs:
            21:50:15.028305 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.028455 line      1336         if not callable(action_class):
            21:50:15.028631 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_reference_... help='Reference point for MOORS.', metavar=None)
            21:50:15.028791 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.028994 line      1342         if not callable(type_func):
            21:50:15.029209 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.029371 line      1347             try:
            21:50:15.029528 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.029774 line      1352         return self._add_action(action)
            21:50:15.029973 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_reference_... help='Reference point for MOORS.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.030222 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        21:50:15.030639 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.031046 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.031328 line       138     if memo is None:
            21:50:15.031446 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.031559 line       141     d = id(x)
            New var:....... d = 140085916427752
            21:50:15.031708 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.031858 line       143     if y is not _nil:
            21:50:15.032010 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.032144 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.032304 line       149     if copier:
            21:50:15.032464 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916427752: {'name': 'moo_gpb_prior_means'...mean functions for Multi-objective GP bandits.'}}
            Modified var:.. y = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            21:50:15.032679 line       183     if y is not x:
            21:50:15.032891 line       184         memo[d] = y
            21:50:15.033024 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916427752: {'name': 'moo_gpb_prior_means'...ean functions for Multi-objective GP bandits.'}]}
            21:50:15.033180 line       186     return y
            21:50:15.033355 return     186     return y
            Return value:.. {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        21:50:15.033536 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Pr... mean functions for Multi-objective GP bandits.'}
        Modified var:.. opt_name = 'moo_gpb_prior_means'
        21:50:15.033989 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'moo_gpb_prior_means': [None, None]}
        21:50:15.034454 line        62     if not opt_name.startswith('--'):
        21:50:15.034867 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moo_gpb_prior_means'
        21:50:15.035252 line        64     if opt_name == '--options':
        21:50:15.035661 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moo_gpb_prior_means',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Pr... mean functions for Multi-objective GP bandits.'}
            21:50:15.036030 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.036333 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.036470 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.036641 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Pr...ns', 'option_strings': ['--moo_gpb_prior_means']}
            21:50:15.036795 line      1327         if 'default' not in kwargs:
            21:50:15.036970 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.037136 line      1336         if not callable(action_class):
            21:50:15.037318 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moo_gpb_prior_me...s for Multi-objective GP bandits.', metavar=None)
            21:50:15.037479 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.037683 line      1342         if not callable(type_func):
            21:50:15.037894 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.038051 line      1347             try:
            21:50:15.038223 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.038474 line      1352         return self._add_action(action)
            21:50:15.038662 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moo_gpb_prior_me...s for Multi-objective GP bandits.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.038890 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        21:50:15.039308 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.039703 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.039952 line       138     if memo is None:
            21:50:15.040076 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.040198 line       141     d = id(x)
            New var:....... d = 140085372804984
            21:50:15.040344 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.040491 line       143     if y is not _nil:
            21:50:15.040640 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.040754 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.040905 line       149     if copier:
            21:50:15.041060 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372804984: {'name': 'max_num_steps', 'req...ny evaluations, stop.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            21:50:15.041302 line       183     if y is not x:
            21:50:15.041502 line       184         memo[d] = y
            21:50:15.041630 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372804984: {'name': 'max_num_steps', 'req...y evaluations, stop.', 'type': <class 'float'>}]}
            21:50:15.041767 line       186     return y
            21:50:15.041934 return     186     return y
            Return value:.. {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        21:50:15.042129 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 10000000.0, 'help...any evaluations, stop.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'max_num_steps'
        21:50:15.042567 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'max_num_steps': [10000000.0, None]}
        21:50:15.042989 line        62     if not opt_name.startswith('--'):
        21:50:15.043403 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--max_num_steps'
        21:50:15.043760 line        64     if opt_name == '--options':
        21:50:15.044170 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--max_num_steps',)
            Starting var:.. kwargs = {'required': False, 'default': 10000000.0, 'help...any evaluations, stop.', 'type': <class 'float'>}
            21:50:15.044530 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.044810 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.044944 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.045128 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 10000000.0, 'help...um_steps', 'option_strings': ['--max_num_steps']}
            21:50:15.045283 line      1327         if 'default' not in kwargs:
            21:50:15.045453 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.045598 line      1336         if not callable(action_class):
            21:50:15.045768 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--max_num_steps'],...eeds this many evaluations, stop.', metavar=None)
            21:50:15.045925 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.046142 line      1342         if not callable(type_func):
            21:50:15.046336 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.046492 line      1347             try:
            21:50:15.046643 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.046881 line      1352         return self._add_action(action)
            21:50:15.047080 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--max_num_steps'],...eeds this many evaluations, stop.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.047312 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        21:50:15.047713 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.048125 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.048372 line       138     if memo is None:
            21:50:15.048482 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.048589 line       141     d = id(x)
            New var:....... d = 140085372334944
            21:50:15.048730 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.048874 line       143     if y is not _nil:
            21:50:15.049019 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.049152 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.049306 line       149     if copier:
            21:50:15.049458 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372334944: {'name': 'capital_type', 'requ...d be one of return_value, cputime, or realtime'}}
            Modified var:.. y = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            21:50:15.049671 line       183     if y is not x:
            21:50:15.049858 line       184         memo[d] = y
            21:50:15.049979 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372334944: {'name': 'capital_type', 'requ... be one of return_value, cputime, or realtime'}]}
            21:50:15.050126 line       186     return y
            21:50:15.050288 return     186     return y
            Return value:.. {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        21:50:15.050456 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'return_value', '...ld be one of return_value, cputime, or realtime'}
        Modified var:.. opt_name = 'capital_type'
        21:50:15.050879 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...0, None], 'capital_type': ['return_value', None]}
        21:50:15.051304 line        62     if not opt_name.startswith('--'):
        21:50:15.051689 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--capital_type'
        21:50:15.052034 line        64     if opt_name == '--options':
        21:50:15.052434 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--capital_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'return_value', '...ld be one of return_value, cputime, or realtime'}
            21:50:15.052781 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.053046 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.053188 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.053351 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'return_value', '...ital_type', 'option_strings': ['--capital_type']}
            21:50:15.053493 line      1327         if 'default' not in kwargs:
            21:50:15.053667 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.053802 line      1336         if not callable(action_class):
            21:50:15.053962 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--capital_type'], ...eturn_value, cputime, or realtime', metavar=None)
            21:50:15.054116 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.054308 line      1342         if not callable(type_func):
            21:50:15.054490 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.054635 line      1347             try:
            21:50:15.054776 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.055001 line      1352         return self._add_action(action)
            21:50:15.055201 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--capital_type'], ...eturn_value, cputime, or realtime', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.055415 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        21:50:15.055805 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.056203 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.056441 line       138     if memo is None:
            21:50:15.056548 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.056652 line       141     d = id(x)
            New var:....... d = 140085372335088
            21:50:15.056789 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.056928 line       143     if y is not _nil:
            21:50:15.057074 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.057190 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.057334 line       149     if copier:
            21:50:15.057478 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372335088: {'name': 'mode', 'required': F...ynchronous parallelisation, else asynchronous."}}
            Modified var:.. y = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            21:50:15.057674 line       183     if y is not x:
            21:50:15.057860 line       184         memo[d] = y
            21:50:15.057980 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372335088: {'name': 'mode', 'required': F...nchronous parallelisation, else asynchronous."}]}
            21:50:15.058122 line       186     return y
            21:50:15.058282 return     186     return y
            Return value:.. {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        21:50:15.058446 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'asy', 'help': "I...synchronous parallelisation, else asynchronous."}
        Modified var:.. opt_name = 'mode'
        21:50:15.058866 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': ['return_value', None], 'mode': ['asy', None]}
        21:50:15.059298 line        62     if not opt_name.startswith('--'):
        21:50:15.059689 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mode'
        21:50:15.060037 line        64     if opt_name == '--options':
        21:50:15.060441 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mode',)
            Starting var:.. kwargs = {'required': False, 'default': 'asy', 'help': "I...synchronous parallelisation, else asynchronous."}
            21:50:15.060788 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.061041 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.061179 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.061344 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'asy', 'help': "I....", 'dest': 'mode', 'option_strings': ['--mode']}
            21:50:15.061483 line      1327         if 'default' not in kwargs:
            21:50:15.061642 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.061776 line      1336         if not callable(action_class):
            21:50:15.061935 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mode'], dest='mo...rallelisation, else asynchronous.", metavar=None)
            21:50:15.062089 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.062284 line      1342         if not callable(type_func):
            21:50:15.062463 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.062607 line      1347             try:
            21:50:15.062748 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.062970 line      1352         return self._add_action(action)
            21:50:15.063161 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mode'], dest='mo...rallelisation, else asynchronous.", metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.063371 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.063747 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.064132 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.064364 line       138     if memo is None:
            21:50:15.064468 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.064570 line       141     d = id(x)
            New var:....... d = 140085372335232
            21:50:15.064702 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.064837 line       143     if y is not _nil:
            21:50:15.064973 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.065090 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.065238 line       149     if copier:
            21:50:15.065380 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372335232: {'name': 'build_new_model_ever...y this many iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.065589 line       183     if y is not x:
            21:50:15.065771 line       184         memo[d] = y
            21:50:15.065889 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372335232: {'name': 'build_new_model_ever... this many iterations.', 'type': <class 'int'>}]}
            21:50:15.066013 line       186     return y
            21:50:15.066183 return     186     return y
            Return value:.. {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.066361 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 17, 'help': 'Upda...ry this many iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'build_new_model_every'
        21:50:15.066767 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...asy', None], 'build_new_model_every': [17, None]}
        21:50:15.067182 line        62     if not opt_name.startswith('--'):
        21:50:15.067555 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--build_new_model_every'
        21:50:15.067888 line        64     if opt_name == '--options':
        21:50:15.068269 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--build_new_model_every',)
            Starting var:.. kwargs = {'required': False, 'default': 17, 'help': 'Upda...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.068604 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.068855 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.068976 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.069146 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 17, 'help': 'Upda...', 'option_strings': ['--build_new_model_every']}
            21:50:15.069285 line      1327         if 'default' not in kwargs:
            21:50:15.069441 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.069574 line      1336         if not callable(action_class):
            21:50:15.069731 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--build_new_model_...edure every this many iterations.', metavar=None)
            21:50:15.069875 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.070058 line      1342         if not callable(type_func):
            21:50:15.070248 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.070393 line      1347             try:
            21:50:15.070533 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.070753 line      1352         return self._add_action(action)
            21:50:15.070946 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--build_new_model_...edure every this many iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.071167 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        21:50:15.071548 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.071902 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.072149 line       138     if memo is None:
            21:50:15.072252 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.072351 line       141     d = id(x)
            New var:....... d = 140085372336456
            21:50:15.072543 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.072718 line       143     if y is not _nil:
            21:50:15.072855 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.072957 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.073104 line       149     if copier:
            21:50:15.073246 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336456: {'name': 'report_model_on_each... each time it is built.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            21:50:15.073446 line       183     if y is not x:
            21:50:15.073622 line       184         memo[d] = y
            21:50:15.073735 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336456: {'name': 'report_model_on_each...each time it is built.', 'type': <class 'int'>}]}
            21:50:15.073855 line       186     return y
            21:50:15.074003 return     186     return y
            Return value:.. {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        21:50:15.074174 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If Tr...l each time it is built.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'report_model_on_each_build'
        21:50:15.074570 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'report_model_on_each_build': [0, None]}
        21:50:15.074950 line        62     if not opt_name.startswith('--'):
        21:50:15.075321 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--report_model_on_each_build'
        21:50:15.075644 line        64     if opt_name == '--options':
        21:50:15.075990 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--report_model_on_each_build',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': 'If Tr...l each time it is built.', 'type': <class 'int'>}
            21:50:15.076326 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.076571 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.076688 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.076834 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': 'If Tr...ption_strings': ['--report_model_on_each_build']}
            21:50:15.076965 line      1327         if 'default' not in kwargs:
            21:50:15.077135 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.077266 line      1336         if not callable(action_class):
            21:50:15.077415 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--report_model_on_... the model each time it is built.', metavar=None)
            21:50:15.077553 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.077727 line      1342         if not callable(type_func):
            21:50:15.077895 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.078031 line      1347             try:
            21:50:15.078187 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.078400 line      1352         return self._add_action(action)
            21:50:15.078569 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--report_model_on_... the model each time it is built.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.078765 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.079139 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.079493 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.079714 line       138     if memo is None:
            21:50:15.079815 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.079911 line       141     d = id(x)
            New var:....... d = 140085372336528
            21:50:15.080039 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.080184 line       143     if y is not _nil:
            21:50:15.080318 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.080418 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.080551 line       149     if copier:
            21:50:15.080685 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336528: {'name': 'report_results_every...y this many iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.080885 line       183     if y is not x:
            21:50:15.081059 line       184         memo[d] = y
            21:50:15.081189 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336528: {'name': 'report_results_every... this many iterations.', 'type': <class 'int'>}]}
            21:50:15.081311 line       186     return y
            21:50:15.081459 return     186     return y
            Return value:.. {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.081615 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 13, 'help': 'Repo...ry this many iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'report_results_every'
        21:50:15.082013 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0, None], 'report_results_every': [13, None]}
        21:50:15.082420 line        62     if not opt_name.startswith('--'):
        21:50:15.082761 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--report_results_every'
        21:50:15.083074 line        64     if opt_name == '--options':
        21:50:15.083417 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--report_results_every',)
            Starting var:.. kwargs = {'required': False, 'default': 13, 'help': 'Repo...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.083732 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.083970 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.084095 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.084250 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 13, 'help': 'Repo...y', 'option_strings': ['--report_results_every']}
            21:50:15.084379 line      1327         if 'default' not in kwargs:
            21:50:15.084526 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.084652 line      1336         if not callable(action_class):
            21:50:15.084799 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--report_results_e...sults every this many iterations.', metavar=None)
            21:50:15.084934 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.085117 line      1342         if not callable(type_func):
            21:50:15.085284 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.085415 line      1347             try:
            21:50:15.085545 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.085751 line      1352         return self._add_action(action)
            21:50:15.085916 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--report_results_e...sults every this many iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.086122 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        21:50:15.086472 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.086817 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.087038 line       138     if memo is None:
            21:50:15.087154 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.087251 line       141     d = id(x)
            New var:....... d = 140085372336600
            21:50:15.087375 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.087501 line       143     if y is not _nil:
            21:50:15.087629 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.087727 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.087855 line       149     if copier:
            21:50:15.087987 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336600: {'name': 'init_capital', 'requ...': 'The capital to be used for initialisation.'}}
            Modified var:.. y = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            21:50:15.088178 line       183     if y is not x:
            21:50:15.088349 line       184         memo[d] = y
            21:50:15.088458 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336600: {'name': 'init_capital', 'requ...: 'The capital to be used for initialisation.'}]}
            21:50:15.088573 line       186     return y
            21:50:15.088714 return     186     return y
            Return value:.. {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        21:50:15.088864 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'The capital to be used for initialisation.'}
        Modified var:.. opt_name = 'init_capital'
        21:50:15.089256 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [13, None], 'init_capital': ['default', None]}
        21:50:15.089630 line        62     if not opt_name.startswith('--'):
        21:50:15.089976 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_capital'
        21:50:15.090303 line        64     if opt_name == '--options':
        21:50:15.090646 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_capital',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'The capital to be used for initialisation.'}
            21:50:15.090954 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.091206 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.091320 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.091463 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...t_capital', 'option_strings': ['--init_capital']}
            21:50:15.091590 line      1327         if 'default' not in kwargs:
            21:50:15.091735 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.091858 line      1336         if not callable(action_class):
            21:50:15.092010 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_capital'], ...al to be used for initialisation.', metavar=None)
            21:50:15.092158 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.092329 line      1342         if not callable(type_func):
            21:50:15.092493 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.092625 line      1347             try:
            21:50:15.092755 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.092976 line      1352         return self._add_action(action)
            21:50:15.093156 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_capital'], ...al to be used for initialisation.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.093348 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        21:50:15.093695 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.094025 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.094247 line       138     if memo is None:
            21:50:15.094342 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.094431 line       141     d = id(x)
            New var:....... d = 140085372336672
            21:50:15.094548 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.094670 line       143     if y is not _nil:
            21:50:15.094792 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.094885 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.095009 line       149     if copier:
            21:50:15.095149 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336672: {'name': 'init_capital_frac', ...e total capital to be used for initialisation.'}}
            Modified var:.. y = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            21:50:15.095323 line       183     if y is not x:
            21:50:15.095485 line       184         memo[d] = y
            21:50:15.095590 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336672: {'name': 'init_capital_frac', ... total capital to be used for initialisation.'}]}
            21:50:15.095701 line       186     return y
            21:50:15.095838 return     186     return y
            Return value:.. {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        21:50:15.095981 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...he total capital to be used for initialisation.'}
        Modified var:.. opt_name = 'init_capital_frac'
        21:50:15.096362 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...fault', None], 'init_capital_frac': [None, None]}
        21:50:15.096725 line        62     if not opt_name.startswith('--'):
        21:50:15.097057 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_capital_frac'
        21:50:15.097368 line        64     if opt_name == '--options':
        21:50:15.097700 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_capital_frac',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...he total capital to be used for initialisation.'}
            21:50:15.097999 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.098259 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.098381 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.098504 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...frac', 'option_strings': ['--init_capital_frac']}
            21:50:15.098612 line      1327         if 'default' not in kwargs:
            21:50:15.098737 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.098843 line      1336         if not callable(action_class):
            21:50:15.098969 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_capital_fra...al to be used for initialisation.', metavar=None)
            21:50:15.099094 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.099246 line      1342         if not callable(type_func):
            21:50:15.099388 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.099503 line      1347             try:
            21:50:15.099614 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.099789 line      1352         return self._add_action(action)
            21:50:15.099929 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_capital_fra...al to be used for initialisation.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.100105 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        21:50:15.100407 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.100701 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.100888 line       138     if memo is None:
            21:50:15.100972 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.101053 line       141     d = id(x)
            New var:....... d = 140085372336744
            21:50:15.101177 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.101289 line       143     if y is not _nil:
            21:50:15.101399 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.101485 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.101597 line       149     if copier:
            21:50:15.101711 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336744: {'name': 'num_init_evals', 're...f <0, will use default.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            21:50:15.101874 line       183     if y is not x:
            21:50:15.102020 line       184         memo[d] = y
            21:50:15.102130 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336744: {'name': 'num_init_evals', 're... <0, will use default.', 'type': <class 'int'>}]}
            21:50:15.102235 line       186     return y
            21:50:15.102359 return     186     return y
            Return value:.. {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        21:50:15.102491 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 20, 'help': 'The ...If <0, will use default.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'num_init_evals'
        21:50:15.102810 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...rac': [None, None], 'num_init_evals': [20, None]}
        21:50:15.103134 line        62     if not opt_name.startswith('--'):
        21:50:15.103426 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--num_init_evals'
        21:50:15.103690 line        64     if opt_name == '--options':
        21:50:15.103979 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--num_init_evals',)
            Starting var:.. kwargs = {'required': False, 'default': 20, 'help': 'The ...If <0, will use default.', 'type': <class 'int'>}
            21:50:15.104255 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.104459 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.104557 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.104681 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 20, 'help': 'The ...t_evals', 'option_strings': ['--num_init_evals']}
            21:50:15.104790 line      1327         if 'default' not in kwargs:
            21:50:15.104917 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.105024 line      1336         if not callable(action_class):
            21:50:15.105167 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--num_init_evals']...isation. If <0, will use default.', metavar=None)
            21:50:15.105284 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.105436 line      1342         if not callable(type_func):
            21:50:15.105578 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.105692 line      1347             try:
            21:50:15.105804 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.105980 line      1352         return self._add_action(action)
            21:50:15.106132 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--num_init_evals']...isation. If <0, will use default.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.106298 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        21:50:15.106599 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.106890 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.107083 line       138     if memo is None:
            21:50:15.107173 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.107254 line       141     d = id(x)
            New var:....... d = 140085372336816
            21:50:15.107360 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.107468 line       143     if y is not _nil:
            21:50:15.107577 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.107661 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.107772 line       149     if copier:
            21:50:15.107886 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336816: {'name': 'prev_evaluations', '...e, 'help': 'Data for any previous evaluations.'}}
            Modified var:.. y = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            21:50:15.108035 line       183     if y is not x:
            21:50:15.108196 line       184         memo[d] = y
            21:50:15.108291 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336816: {'name': 'prev_evaluations', '..., 'help': 'Data for any previous evaluations.'}]}
            21:50:15.108390 line       186     return y
            21:50:15.108511 return     186     return y
            Return value:.. {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        21:50:15.108639 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Data for any previous evaluations.'}
        Modified var:.. opt_name = 'prev_evaluations'
        21:50:15.108974 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...s': [20, None], 'prev_evaluations': [None, None]}
        21:50:15.109295 line        62     if not opt_name.startswith('--'):
        21:50:15.109590 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--prev_evaluations'
        21:50:15.109846 line        64     if opt_name == '--options':
        21:50:15.110142 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--prev_evaluations',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Data for any previous evaluations.'}
            21:50:15.110401 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.110600 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.110694 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.110814 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Da...tions', 'option_strings': ['--prev_evaluations']}
            21:50:15.110919 line      1327         if 'default' not in kwargs:
            21:50:15.111041 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.111160 line      1336         if not callable(action_class):
            21:50:15.111284 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--prev_evaluations...ata for any previous evaluations.', metavar=None)
            21:50:15.111396 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.111537 line      1342         if not callable(type_func):
            21:50:15.111673 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.111784 line      1347             try:
            21:50:15.111892 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.112061 line      1352         return self._add_action(action)
            21:50:15.112210 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--prev_evaluations...ata for any previous evaluations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.112373 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        21:50:15.112672 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.112960 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.113155 line       138     if memo is None:
            21:50:15.113238 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.113316 line       141     d = id(x)
            New var:....... d = 140085372336888
            21:50:15.113418 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.113523 line       143     if y is not _nil:
            21:50:15.113628 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.113709 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.113823 line       149     if copier:
            21:50:15.113934 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336888: {'name': 'get_initial_qinfos',... 'help': 'A function to obtain initial qinfos.'}}
            Modified var:.. y = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            21:50:15.114092 line       183     if y is not x:
            21:50:15.114239 line       184         memo[d] = y
            21:50:15.114330 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336888: {'name': 'get_initial_qinfos',...'help': 'A function to obtain initial qinfos.'}]}
            21:50:15.114427 line       186     return y
            21:50:15.114546 return     186     return y
            Return value:.. {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        21:50:15.114670 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'A function to obtain initial qinfos.'}
        Modified var:.. opt_name = 'get_initial_qinfos'
        21:50:15.114992 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'get_initial_qinfos': [None, None]}
        21:50:15.115318 line        62     if not opt_name.startswith('--'):
        21:50:15.115606 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--get_initial_qinfos'
        21:50:15.115867 line        64     if opt_name == '--options':
        21:50:15.116165 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--get_initial_qinfos',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'A function to obtain initial qinfos.'}
            21:50:15.116427 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.116626 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.116719 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.116839 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'A ...fos', 'option_strings': ['--get_initial_qinfos']}
            21:50:15.116943 line      1327         if 'default' not in kwargs:
            21:50:15.117073 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.117184 line      1336         if not callable(action_class):
            21:50:15.117308 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--get_initial_qinf...unction to obtain initial qinfos.', metavar=None)
            21:50:15.117419 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.117560 line      1342         if not callable(type_func):
            21:50:15.117700 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.117811 line      1347             try:
            21:50:15.117920 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.118100 line      1352         return self._add_action(action)
            21:50:15.118243 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--get_initial_qinf...unction to obtain initial qinfos.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.118405 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        21:50:15.118697 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.118998 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.119187 line       138     if memo is None:
            21:50:15.119268 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.119344 line       141     d = id(x)
            New var:....... d = 140085372336960
            21:50:15.119444 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.119547 line       143     if y is not _nil:
            21:50:15.119652 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.119732 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.119839 line       149     if copier:
            21:50:15.119948 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336960: {'name': 'init_method', 'requi...ueries. Is used if get_initial_qinfos is None.'}}
            Modified var:.. y = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            21:50:15.120104 line       183     if y is not x:
            21:50:15.120250 line       184         memo[d] = y
            21:50:15.120340 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336960: {'name': 'init_method', 'requi...eries. Is used if get_initial_qinfos is None.'}]}
            21:50:15.120435 line       186     return y
            21:50:15.120552 return     186     return y
            Return value:.. {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        21:50:15.120676 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'rand', 'help': '...queries. Is used if get_initial_qinfos is None.'}
        Modified var:.. opt_name = 'init_method'
        21:50:15.120987 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...os': [None, None], 'init_method': ['rand', None]}
        21:50:15.121305 line        62     if not opt_name.startswith('--'):
        21:50:15.121595 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_method'
        21:50:15.121850 line        64     if opt_name == '--options':
        21:50:15.122154 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'rand', 'help': '...queries. Is used if get_initial_qinfos is None.'}
            21:50:15.122414 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.122609 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.122703 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.122821 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'rand', 'help': '...nit_method', 'option_strings': ['--init_method']}
            21:50:15.122924 line      1327         if 'default' not in kwargs:
            21:50:15.123043 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.123161 line      1336         if not callable(action_class):
            21:50:15.123284 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_method'], d...ed if get_initial_qinfos is None.', metavar=None)
            21:50:15.123393 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.123532 line      1342         if not callable(type_func):
            21:50:15.123667 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.123777 line      1347             try:
            21:50:15.123883 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.124051 line      1352         return self._add_action(action)
            21:50:15.124199 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_method'], d...ed if get_initial_qinfos is None.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.124358 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        21:50:15.124650 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.124938 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.125130 line       138     if memo is None:
            21:50:15.125211 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.125289 line       141     d = id(x)
            New var:....... d = 140085372337032
            21:50:15.125391 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.125494 line       143     if y is not _nil:
            21:50:15.125598 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.125678 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.125785 line       149     if copier:
            21:50:15.125893 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337032: {'name': 'progress_load_from_a...ogress_save_to and progress_load_from options.'}}
            Modified var:.. y = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            21:50:15.126042 line       183     if y is not x:
            21:50:15.126202 line       184         memo[d] = y
            21:50:15.126294 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337032: {'name': 'progress_load_from_a...gress_save_to and progress_load_from options.'}]}
            21:50:15.126389 line       186     return y
            21:50:15.126510 return     186     return y
            Return value:.. {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        21:50:15.126635 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo...rogress_save_to and progress_load_from options.'}
        Modified var:.. opt_name = 'progress_load_from_and_save_to'
        21:50:15.126949 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'progress_load_from_and_save_to': [None, None]}
        21:50:15.127272 line        62     if not opt_name.startswith('--'):
        21:50:15.127558 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_load_from_and_save_to'
        21:50:15.127818 line        64     if opt_name == '--options':
        21:50:15.128111 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_load_from_and_save_to',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...rogress_save_to and progress_load_from options.'}
            21:50:15.128370 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.128566 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.128659 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.128777 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...n_strings': ['--progress_load_from_and_save_to']}
            21:50:15.128880 line      1327         if 'default' not in kwargs:
            21:50:15.128999 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.129130 line      1336         if not callable(action_class):
            21:50:15.129251 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_load_fr...o and progress_load_from options.', metavar=None)
            21:50:15.129359 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.129497 line      1342         if not callable(type_func):
            21:50:15.129631 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.129738 line      1347             try:
            21:50:15.129849 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.130018 line      1352         return self._add_action(action)
            21:50:15.130164 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_load_fr...o and progress_load_from options.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.130321 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        21:50:15.130607 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.130891 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.131072 line       138     if memo is None:
            21:50:15.131156 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.131233 line       141     d = id(x)
            New var:....... d = 140085372337104
            21:50:15.131331 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.131431 line       143     if y is not _nil:
            21:50:15.131534 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.131612 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.131717 line       149     if copier:
            21:50:15.131822 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337104: {'name': 'progress_load_from',...(from possibly a previous run) from this file.'}}
            Modified var:.. y = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            21:50:15.131966 line       183     if y is not x:
            21:50:15.132118 line       184         memo[d] = y
            21:50:15.132209 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337104: {'name': 'progress_load_from',...from possibly a previous run) from this file.'}]}
            21:50:15.132304 line       186     return y
            21:50:15.132419 return     186     return y
            Return value:.. {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        21:50:15.132541 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo... (from possibly a previous run) from this file.'}
        Modified var:.. opt_name = 'progress_load_from'
        21:50:15.132850 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'progress_load_from': [None, None]}
        21:50:15.133166 line        62     if not opt_name.startswith('--'):
        21:50:15.133448 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_load_from'
        21:50:15.133707 line        64     if opt_name == '--options':
        21:50:15.133985 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_load_from',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo... (from possibly a previous run) from this file.'}
            21:50:15.134251 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.134450 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.134542 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.134657 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...rom', 'option_strings': ['--progress_load_from']}
            21:50:15.134759 line      1327         if 'default' not in kwargs:
            21:50:15.134875 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.134973 line      1336         if not callable(action_class):
            21:50:15.135101 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_load_fr...y a previous run) from this file.', metavar=None)
            21:50:15.135212 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.135348 line      1342         if not callable(type_func):
            21:50:15.135480 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.135588 line      1347             try:
            21:50:15.135693 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.135859 line      1352         return self._add_action(action)
            21:50:15.135992 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_load_fr...y a previous run) from this file.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.136157 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        21:50:15.136445 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.136728 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.136904 line       138     if memo is None:
            21:50:15.136982 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.137056 line       141     d = id(x)
            New var:....... d = 140085372337176
            21:50:15.137169 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.137272 line       143     if y is not _nil:
            21:50:15.137374 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.137452 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.137556 line       149     if copier:
            21:50:15.137663 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337176: {'name': 'progress_save_to', '...t': None, 'help': 'Save progress to this file.'}}
            Modified var:.. y = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            21:50:15.137807 line       183     if y is not x:
            21:50:15.137947 line       184         memo[d] = y
            21:50:15.138035 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337176: {'name': 'progress_save_to', '...': None, 'help': 'Save progress to this file.'}]}
            21:50:15.138143 line       186     return y
            21:50:15.138260 return     186     return y
            Return value:.. {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        21:50:15.138381 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Save progress to this file.'}
        Modified var:.. opt_name = 'progress_save_to'
        21:50:15.138692 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_to': [None, None]}
        21:50:15.138994 line        62     if not opt_name.startswith('--'):
        21:50:15.139300 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_save_to'
        21:50:15.139553 line        64     if opt_name == '--options':
        21:50:15.139826 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_save_to',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Save progress to this file.'}
            21:50:15.140085 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.140278 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.140366 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.140479 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Sa...ve_to', 'option_strings': ['--progress_save_to']}
            21:50:15.140578 line      1327         if 'default' not in kwargs:
            21:50:15.140692 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.140789 line      1336         if not callable(action_class):
            21:50:15.140904 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_save_to...help='Save progress to this file.', metavar=None)
            21:50:15.141009 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.141158 line      1342         if not callable(type_func):
            21:50:15.141289 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.141393 line      1347             try:
            21:50:15.141495 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.141659 line      1352         return self._add_action(action)
            21:50:15.141790 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_save_to...help='Save progress to this file.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.141946 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        21:50:15.142243 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.142522 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.142692 line       138     if memo is None:
            21:50:15.142769 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.142843 line       141     d = id(x)
            New var:....... d = 140085372337248
            21:50:15.142941 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.143039 line       143     if y is not _nil:
            21:50:15.143153 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.143232 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.143336 line       149     if copier:
            21:50:15.143441 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337248: {'name': 'progress_save_every'..._save_every iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            21:50:15.143595 line       183     if y is not x:
            21:50:15.143731 line       184         memo[d] = y
            21:50:15.143820 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337248: {'name': 'progress_save_every'...save_every iterations.', 'type': <class 'int'>}]}
            21:50:15.143912 line       186     return y
            21:50:15.144028 return     186     return y
            Return value:.. {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        21:50:15.144171 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 5, 'help': 'Save ...s_save_every iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'progress_save_every'
        21:50:15.144482 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_every': [5, None]}
        21:50:15.144781 line        62     if not opt_name.startswith('--'):
        21:50:15.145068 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_save_every'
        21:50:15.145328 line        64     if opt_name == '--options':
        21:50:15.145607 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_save_every',)
            Starting var:.. kwargs = {'required': False, 'default': 5, 'help': 'Save ...s_save_every iterations.', 'type': <class 'int'>}
            21:50:15.145861 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.146055 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.146158 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.146274 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 5, 'help': 'Save ...ry', 'option_strings': ['--progress_save_every']}
            21:50:15.146376 line      1327         if 'default' not in kwargs:
            21:50:15.146493 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.146592 line      1336         if not callable(action_class):
            21:50:15.146709 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_save_ev...y progress_save_every iterations.', metavar=None)
            21:50:15.146817 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.146953 line      1342         if not callable(type_func):
            21:50:15.147097 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.147207 line      1347             try:
            21:50:15.147311 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.147477 line      1352         return self._add_action(action)
            21:50:15.147609 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_save_ev...y progress_save_every iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.147763 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        21:50:15.148048 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.148345 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.148518 line       138     if memo is None:
            21:50:15.148595 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.148669 line       141     d = id(x)
            New var:....... d = 140085372337320
            21:50:15.148767 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.148866 line       143     if y is not _nil:
            21:50:15.148968 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.149046 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.149161 line       149     if copier:
            21:50:15.149267 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337320: {'name': 'progress_report_on_e...time results are saved.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            21:50:15.149423 line       183     if y is not x:
            21:50:15.149558 line       184         memo[d] = y
            21:50:15.149645 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337320: {'name': 'progress_report_on_e...ime results are saved.', 'type': <class 'int'>}]}
            21:50:15.149742 line       186     return y
            21:50:15.149857 return     186     return y
            Return value:.. {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        21:50:15.149979 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': True, 'help': 'If... time results are saved.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'progress_report_on_each_save'
        21:50:15.150303 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'progress_report_on_each_save': [True, None]}
        21:50:15.150611 line        62     if not opt_name.startswith('--'):
        21:50:15.150896 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_report_on_each_save'
        21:50:15.151163 line        64     if opt_name == '--options':
        21:50:15.151446 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_report_on_each_save',)
            Starting var:.. kwargs = {'required': False, 'default': True, 'help': 'If... time results are saved.', 'type': <class 'int'>}
            21:50:15.151701 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.151888 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.151978 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.152102 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': True, 'help': 'If...ion_strings': ['--progress_report_on_each_save']}
            21:50:15.152206 line      1327         if 'default' not in kwargs:
            21:50:15.152322 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.152421 line      1336         if not callable(action_class):
            21:50:15.152538 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_report_...port each time results are saved.', metavar=None)
            21:50:15.152645 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.152780 line      1342         if not callable(type_func):
            21:50:15.152910 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.153015 line      1347             try:
            21:50:15.153132 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.153300 line      1352         return self._add_action(action)
            21:50:15.153432 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_report_...port each time results are saved.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.153583 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        21:50:15.153876 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.154173 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.154345 line       138     if memo is None:
            21:50:15.154421 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.154495 line       141     d = id(x)
            New var:....... d = 140085372442232
            21:50:15.154593 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.154692 line       143     if y is not _nil:
            21:50:15.154790 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.154866 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.154967 line       149     if copier:
            21:50:15.155076 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372442232: {'name': 'acq', 'required': Fa...as a hyphen separated list e.g. ucb-ts-ei-ttei'}}
            Modified var:.. y = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:15.155224 line       183     if y is not x:
            21:50:15.155359 line       184         memo[d] = y
            21:50:15.155446 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372442232: {'name': 'acq', 'required': Fa...s a hyphen separated list e.g. ucb-ts-ei-ttei'}]}
            21:50:15.155537 line       186     return y
            21:50:15.155651 return     186     return y
            Return value:.. {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        21:50:15.155772 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        Modified var:.. opt_name = 'acq'
        21:50:15.156094 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ch_save': [True, None], 'acq': ['default', None]}
        21:50:15.156406 line        62     if not opt_name.startswith('--'):
        21:50:15.156692 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq'
        21:50:15.156946 line        64     if opt_name == '--options':
        21:50:15.157236 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:15.157492 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.157679 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.157769 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.157888 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...tei', 'dest': 'acq', 'option_strings': ['--acq']}
            21:50:15.157989 line      1327         if 'default' not in kwargs:
            21:50:15.158114 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.158215 line      1336         if not callable(action_class):
            21:50:15.158330 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq'], dest='acq...eparated list e.g. ucb-ts-ei-ttei', metavar=None)
            21:50:15.158437 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.158571 line      1342         if not callable(type_func):
            21:50:15.158700 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.158806 line      1347             try:
            21:50:15.158908 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.159083 line      1352         return self._add_action(action)
            21:50:15.159220 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq'], dest='acq...eparated list e.g. ucb-ts-ei-ttei', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.159372 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        21:50:15.159657 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.159939 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.160124 line       138     if memo is None:
            21:50:15.160203 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.160278 line       141     d = id(x)
            New var:....... d = 140085917183720
            21:50:15.160376 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.160476 line       143     if y is not _nil:
            21:50:15.160577 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.160654 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.160756 line       149     if copier:
            21:50:15.160861 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917183720: {'name': 'acq_probs', 'require...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            21:50:15.161003 line       183     if y is not x:
            21:50:15.161150 line       184         memo[d] = y
            21:50:15.161240 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917183720: {'name': 'acq_probs', 'require...t acquisitions according to how well they do.'}]}
            21:50:15.161333 line       186     return y
            21:50:15.161452 return     186     return y
            Return value:.. {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        21:50:15.161576 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'adaptive', 'help...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'acq_probs'
        21:50:15.161885 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'acq_probs': ['adaptive', None]}
        21:50:15.162204 line        62     if not opt_name.startswith('--'):
        21:50:15.162491 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_probs'
        21:50:15.162750 line        64     if opt_name == '--options':
        21:50:15.163028 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_probs',)
            Starting var:.. kwargs = {'required': False, 'default': 'adaptive', 'help...ght acquisitions according to how well they do.'}
            21:50:15.163295 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.163486 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.163576 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.163691 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'adaptive', 'help...: 'acq_probs', 'option_strings': ['--acq_probs']}
            21:50:15.163792 line      1327         if 'default' not in kwargs:
            21:50:15.163908 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.164007 line      1336         if not callable(action_class):
            21:50:15.164135 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_probs'], des...ns according to how well they do.', metavar=None)
            21:50:15.164244 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.164382 line      1342         if not callable(type_func):
            21:50:15.164515 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.164621 line      1347             try:
            21:50:15.164726 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.164892 line      1352         return self._add_action(action)
            21:50:15.165026 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_probs'], des...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.165196 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        21:50:15.165489 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.165777 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.165953 line       138     if memo is None:
            21:50:15.166030 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.166116 line       141     d = id(x)
            New var:....... d = 140085916752776
            21:50:15.166216 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.166315 line       143     if y is not _nil:
            21:50:15.166416 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.166493 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.166595 line       149     if copier:
            21:50:15.166699 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752776: {'name': 'acq_opt_method', 're... use when maximising the acquisition function.'}}
            Modified var:.. y = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            21:50:15.166841 line       183     if y is not x:
            21:50:15.166973 line       184         memo[d] = y
            21:50:15.167059 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752776: {'name': 'acq_opt_method', 're...use when maximising the acquisition function.'}]}
            21:50:15.167163 line       186     return y
            21:50:15.167277 return     186     return y
            Return value:.. {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        21:50:15.167397 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...o use when maximising the acquisition function.'}
        Modified var:.. opt_name = 'acq_opt_method'
        21:50:15.167708 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ive', None], 'acq_opt_method': ['default', None]}
        21:50:15.168011 line        62     if not opt_name.startswith('--'):
        21:50:15.168311 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_opt_method'
        21:50:15.168565 line        64     if opt_name == '--options':
        21:50:15.168846 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_opt_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...o use when maximising the acquisition function.'}
            21:50:15.169112 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.169304 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.169393 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.169505 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'..._method', 'option_strings': ['--acq_opt_method']}
            21:50:15.169610 line      1327         if 'default' not in kwargs:
            21:50:15.169725 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.169823 line      1336         if not callable(action_class):
            21:50:15.169937 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_opt_method']...imising the acquisition function.', metavar=None)
            21:50:15.170042 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.170189 line      1342         if not callable(type_func):
            21:50:15.170320 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.170425 line      1347             try:
            21:50:15.170528 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.170691 line      1352         return self._add_action(action)
            21:50:15.170827 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_opt_method']...imising the acquisition function.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.170981 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        21:50:15.171286 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.171573 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.171747 line       138     if memo is None:
            21:50:15.171823 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.171896 line       141     d = id(x)
            New var:....... d = 140085916752704
            21:50:15.171994 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.172103 line       143     if y is not _nil:
            21:50:15.172205 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.172283 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.172386 line       149     if copier:
            21:50:15.172491 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752704: {'name': 'handle_parallel', 'r...e parallelisations. Should be halluc or naive.'}}
            Modified var:.. y = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            21:50:15.172633 line       183     if y is not x:
            21:50:15.172766 line       184         memo[d] = y
            21:50:15.172852 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752704: {'name': 'handle_parallel', 'r... parallelisations. Should be halluc or naive.'}]}
            21:50:15.172943 line       186     return y
            21:50:15.173056 return     186     return y
            Return value:.. {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        21:50:15.173188 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'halluc', 'help':...le parallelisations. Should be halluc or naive.'}
        Modified var:.. opt_name = 'handle_parallel'
        21:50:15.173506 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ult', None], 'handle_parallel': ['halluc', None]}
        21:50:15.173810 line        62     if not opt_name.startswith('--'):
        21:50:15.174106 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--handle_parallel'
        21:50:15.174368 line        64     if opt_name == '--options':
        21:50:15.174647 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--handle_parallel',)
            Starting var:.. kwargs = {'required': False, 'default': 'halluc', 'help':...le parallelisations. Should be halluc or naive.'}
            21:50:15.174903 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.175101 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.175192 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.175306 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'halluc', 'help':...rallel', 'option_strings': ['--handle_parallel']}
            21:50:15.175407 line      1327         if 'default' not in kwargs:
            21:50:15.175522 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.175619 line      1336         if not callable(action_class):
            21:50:15.175735 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--handle_parallel'...tions. Should be halluc or naive.', metavar=None)
            21:50:15.175840 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.175972 line      1342         if not callable(type_func):
            21:50:15.176114 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.176221 line      1347             try:
            21:50:15.176324 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.176488 line      1352         return self._add_action(action)
            21:50:15.176619 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--handle_parallel'...tions. Should be halluc or naive.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.176770 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        21:50:15.177056 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.177357 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.177540 line       138     if memo is None:
            21:50:15.177648 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.177728 line       141     d = id(x)
            New var:....... d = 140085916752848
            21:50:15.177828 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.177929 line       143     if y is not _nil:
            21:50:15.178031 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.178125 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.178233 line       149     if copier:
            21:50:15.178339 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752848: {'name': 'acq_opt_max_evals', ...ive uses default value.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            21:50:15.178496 line       183     if y is not x:
            21:50:15.178635 line       184         memo[d] = y
            21:50:15.178723 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752848: {'name': 'acq_opt_max_evals', ...ve uses default value.', 'type': <class 'int'>}]}
            21:50:15.178817 line       186     return y
            21:50:15.178935 return     186     return y
            Return value:.. {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        21:50:15.179057 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Numb...tive uses default value.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'acq_opt_max_evals'
        21:50:15.179390 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'halluc', None], 'acq_opt_max_evals': [-1, None]}
        21:50:15.179698 line        62     if not opt_name.startswith('--'):
        21:50:15.179982 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_opt_max_evals'
        21:50:15.180255 line        64     if opt_name == '--options':
        21:50:15.180540 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_opt_max_evals',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Numb...tive uses default value.', 'type': <class 'int'>}
            21:50:15.180800 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.180988 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.181086 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.181210 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Numb...vals', 'option_strings': ['--acq_opt_max_evals']}
            21:50:15.181312 line      1327         if 'default' not in kwargs:
            21:50:15.181435 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.181536 line      1336         if not callable(action_class):
            21:50:15.181652 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_opt_max_eval.... If negative uses default value.', metavar=None)
            21:50:15.181758 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.181895 line      1342         if not callable(type_func):
            21:50:15.182027 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.182147 line      1347             try:
            21:50:15.182253 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.182418 line      1352         return self._add_action(action)
            21:50:15.182551 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_opt_max_eval.... If negative uses default value.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.182706 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        21:50:15.182998 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.183303 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.183475 line       138     if memo is None:
            21:50:15.183551 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.183625 line       141     d = id(x)
            New var:....... d = 140085916803864
            21:50:15.183723 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.183822 line       143     if y is not _nil:
            21:50:15.183923 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.184000 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.184115 line       149     if copier:
            21:50:15.184222 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916803864: {'name': 'gpb_hp_tune_criterio...Other options are post_sampling and post_mean.'}}
            Modified var:.. y = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            21:50:15.184365 line       183     if y is not x:
            21:50:15.184499 line       184         memo[d] = y
            21:50:15.184586 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916803864: {'name': 'gpb_hp_tune_criterio...ther options are post_sampling and post_mean.'}]}
            21:50:15.184678 line       186     return y
            21:50:15.184794 return     186     return y
            Return value:.. {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        21:50:15.184915 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'ml-post_sampling... Other options are post_sampling and post_mean.'}
        Modified var:.. opt_name = 'gpb_hp_tune_criterion'
        21:50:15.185246 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...b_hp_tune_criterion': ['ml-post_sampling', None]}
        21:50:15.185557 line        62     if not opt_name.startswith('--'):
        21:50:15.185843 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_hp_tune_criterion'
        21:50:15.186114 line        64     if opt_name == '--options':
        21:50:15.186402 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_hp_tune_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'ml-post_sampling... Other options are post_sampling and post_mean.'}
            21:50:15.186660 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.186849 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.186939 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.187054 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'ml-post_sampling...', 'option_strings': ['--gpb_hp_tune_criterion']}
            21:50:15.187167 line      1327         if 'default' not in kwargs:
            21:50:15.187284 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.187383 line      1336         if not callable(action_class):
            21:50:15.187499 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_hp_tune_crit... are post_sampling and post_mean.', metavar=None)
            21:50:15.187605 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.187741 line      1342         if not callable(type_func):
            21:50:15.187872 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.187977 line      1347             try:
            21:50:15.188088 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.188259 line      1352         return self._add_action(action)
            21:50:15.188392 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_hp_tune_crit... are post_sampling and post_mean.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.188547 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        21:50:15.188836 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.189139 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.189314 line       138     if memo is None:
            21:50:15.189391 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.189470 line       141     d = id(x)
            New var:....... d = 140085916804296
            21:50:15.189570 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.189670 line       143     if y is not _nil:
            21:50:15.189771 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.189848 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.189951 line       149     if copier:
            21:50:15.190055 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804296: {'name': 'gpb_hp_tune_probs', ...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            21:50:15.190211 line       183     if y is not x:
            21:50:15.190349 line       184         memo[d] = y
            21:50:15.190438 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804296: {'name': 'gpb_hp_tune_probs', ...t acquisitions according to how well they do.'}]}
            21:50:15.190531 line       186     return y
            21:50:15.190647 return     186     return y
            Return value:.. {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        21:50:15.190770 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '0.3-0.7', 'help'...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'gpb_hp_tune_probs'
        21:50:15.191096 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...', None], 'gpb_hp_tune_probs': ['0.3-0.7', None]}
        21:50:15.191407 line        62     if not opt_name.startswith('--'):
        21:50:15.191693 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_hp_tune_probs'
        21:50:15.191954 line        64     if opt_name == '--options':
        21:50:15.192255 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_hp_tune_probs',)
            Starting var:.. kwargs = {'required': False, 'default': '0.3-0.7', 'help'...ght acquisitions according to how well they do.'}
            21:50:15.192518 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.192706 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.192796 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.192911 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '0.3-0.7', 'help'...robs', 'option_strings': ['--gpb_hp_tune_probs']}
            21:50:15.193012 line      1327         if 'default' not in kwargs:
            21:50:15.193139 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.193239 line      1336         if not callable(action_class):
            21:50:15.193360 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_hp_tune_prob...ns according to how well they do.', metavar=None)
            21:50:15.193468 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.193606 line      1342         if not callable(type_func):
            21:50:15.193739 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.193848 line      1347             try:
            21:50:15.193955 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.194131 line      1352         return self._add_action(action)
            21:50:15.194270 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_hp_tune_prob...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.194426 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        21:50:15.194720 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.195006 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.195194 line       138     if memo is None:
            21:50:15.195272 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.195347 line       141     d = id(x)
            New var:....... d = 140085916804368
            21:50:15.195444 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.195544 line       143     if y is not _nil:
            21:50:15.195645 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.195723 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.195828 line       149     if copier:
            21:50:15.195933 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804368: {'name': 'gpb_ml_hp_tune_opt',...r to use when maximising the tuning criterion.'}}
            Modified var:.. y = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            21:50:15.196084 line       183     if y is not x:
            21:50:15.196226 line       184         memo[d] = y
            21:50:15.196314 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804368: {'name': 'gpb_ml_hp_tune_opt',... to use when maximising the tuning criterion.'}]}
            21:50:15.196407 line       186     return y
            21:50:15.196520 return     186     return y
            Return value:.. {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        21:50:15.196641 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
        Modified var:.. opt_name = 'gpb_ml_hp_tune_opt'
        21:50:15.196954 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'gpb_ml_hp_tune_opt': ['default', None]}
        21:50:15.197278 line        62     if not opt_name.startswith('--'):
        21:50:15.197568 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_ml_hp_tune_opt'
        21:50:15.197826 line        64     if opt_name == '--options':
        21:50:15.198123 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_ml_hp_tune_opt',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            21:50:15.198383 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.198572 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.198661 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.198774 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...opt', 'option_strings': ['--gpb_ml_hp_tune_opt']}
            21:50:15.198875 line      1327         if 'default' not in kwargs:
            21:50:15.198990 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.199094 line      1336         if not callable(action_class):
            21:50:15.199216 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_ml_hp_tune_o... maximising the tuning criterion.', metavar=None)
            21:50:15.199322 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.199457 line      1342         if not callable(type_func):
            21:50:15.199586 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.199692 line      1347             try:
            21:50:15.199795 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.199959 line      1352         return self._add_action(action)
            21:50:15.200098 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_ml_hp_tune_o... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.200257 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        21:50:15.200555 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.200845 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.201018 line       138     if memo is None:
            21:50:15.201109 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.201188 line       141     d = id(x)
            New var:....... d = 140085916804440
            21:50:15.201287 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.201391 line       143     if y is not _nil:
            21:50:15.201493 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.201572 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.201675 line       149     if copier:
            21:50:15.201780 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804440: {'name': 'gpb_post_hp_tune_met...ing the tuning criterion. Other option is nuts'}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            21:50:15.201923 line       183     if y is not x:
            21:50:15.202059 line       184         memo[d] = y
            21:50:15.202158 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804440: {'name': 'gpb_post_hp_tune_met...ng the tuning criterion. Other option is nuts'}]}
            21:50:15.202253 line       186     return y
            21:50:15.202367 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        21:50:15.202487 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...sing the tuning criterion. Other option is nuts'}
        Modified var:.. opt_name = 'gpb_post_hp_tune_method'
        21:50:15.202808 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'gpb_post_hp_tune_method': ['slice', None]}
        21:50:15.203133 line        62     if not opt_name.startswith('--'):
        21:50:15.203424 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_method'
        21:50:15.203689 line        64     if opt_name == '--options':
        21:50:15.203975 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...sing the tuning criterion. Other option is nuts'}
            21:50:15.204251 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.204442 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.204532 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.204647 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'slice', 'help': ... 'option_strings': ['--gpb_post_hp_tune_method']}
            21:50:15.204750 line      1327         if 'default' not in kwargs:
            21:50:15.204866 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.204964 line      1336         if not callable(action_class):
            21:50:15.205087 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...g criterion. Other option is nuts', metavar=None)
            21:50:15.205198 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.205340 line      1342         if not callable(type_func):
            21:50:15.205472 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.205578 line      1347             try:
            21:50:15.205683 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.205851 line      1352         return self._add_action(action)
            21:50:15.205984 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...g criterion. Other option is nuts', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.206151 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.206448 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.206742 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.206915 line       138     if memo is None:
            21:50:15.206993 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.207076 line       141     d = id(x)
            New var:....... d = 140085916804512
            21:50:15.207183 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.207285 line       143     if y is not _nil:
            21:50:15.207386 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.207464 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.207566 line       149     if copier:
            21:50:15.207672 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804512: {'name': 'gpb_post_hp_tune_bur...ignore during sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.207826 line       183     if y is not x:
            21:50:15.207961 line       184         memo[d] = y
            21:50:15.208048 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804512: {'name': 'gpb_post_hp_tune_bur...gnore during sampling.', 'type': <class 'int'>}]}
            21:50:15.208152 line       186     return y
            21:50:15.208268 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.208389 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'gpb_post_hp_tune_burn'
        21:50:15.208707 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ice', None], 'gpb_post_hp_tune_burn': [-1, None]}
        21:50:15.209016 line        62     if not opt_name.startswith('--'):
        21:50:15.209320 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_burn'
        21:50:15.209581 line        64     if opt_name == '--options':
        21:50:15.209863 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_burn',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.210136 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.210331 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.210423 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.210539 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...', 'option_strings': ['--gpb_post_hp_tune_burn']}
            21:50:15.210642 line      1327         if 'default' not in kwargs:
            21:50:15.210760 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.210859 line      1336         if not callable(action_class):
            21:50:15.210976 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore during sampling.', metavar=None)
            21:50:15.211089 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.211231 line      1342         if not callable(type_func):
            21:50:15.211362 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.211469 line      1347             try:
            21:50:15.211572 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.211737 line      1352         return self._add_action(action)
            21:50:15.211870 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore during sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.212023 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        21:50:15.212324 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.212611 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.212784 line       138     if memo is None:
            21:50:15.212861 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.212936 line       141     d = id(x)
            New var:....... d = 140085916804584
            21:50:15.213035 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.213152 line       143     if y is not _nil:
            21:50:15.213256 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.213333 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.213442 line       149     if copier:
            21:50:15.213548 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804584: {'name': 'gpb_post_hp_tune_off...ignore between samples.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            21:50:15.213703 line       183     if y is not x:
            21:50:15.213836 line       184         memo[d] = y
            21:50:15.213923 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804584: {'name': 'gpb_post_hp_tune_off...gnore between samples.', 'type': <class 'int'>}]}
            21:50:15.214016 line       186     return y
            21:50:15.214142 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        21:50:15.214265 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'gpb_post_hp_tune_offset'
        21:50:15.214581 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...-1, None], 'gpb_post_hp_tune_offset': [25, None]}
        21:50:15.214890 line        62     if not opt_name.startswith('--'):
        21:50:15.215188 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_offset'
        21:50:15.215447 line        64     if opt_name == '--options':
        21:50:15.215730 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_offset',)
            Starting var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            21:50:15.215989 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.216194 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.216286 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.216399 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... 'option_strings': ['--gpb_post_hp_tune_offset']}
            21:50:15.216500 line      1327         if 'default' not in kwargs:
            21:50:15.216617 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.216714 line      1336         if not callable(action_class):
            21:50:15.216830 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore between samples.', metavar=None)
            21:50:15.216937 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.217079 line      1342         if not callable(type_func):
            21:50:15.217220 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.217328 line      1347             try:
            21:50:15.217432 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.217597 line      1352         return self._add_action(action)
            21:50:15.217729 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore between samples.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.217883 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        21:50:15.218187 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.218477 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.218648 line       138     if memo is None:
            21:50:15.218725 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.218800 line       141     d = id(x)
            New var:....... d = 140085916804656
            21:50:15.218898 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.218998 line       143     if y is not _nil:
            21:50:15.219115 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.219196 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.219299 line       149     if copier:
            21:50:15.219406 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804656: {'name': 'rand_exp_sampling_re...t in rand_exp_sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:15.219561 line       183     if y is not x:
            21:50:15.219698 line       184         memo[d] = y
            21:50:15.219786 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804656: {'name': 'rand_exp_sampling_re... in rand_exp_sampling.', 'type': <class 'int'>}]}
            21:50:15.219879 line       186     return y
            21:50:15.219996 return     186     return y
            Return value:.. {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        21:50:15.220131 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W...ot in rand_exp_sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'rand_exp_sampling_replace'
        21:50:15.220447 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'rand_exp_sampling_replace': [False, None]}
        21:50:15.220761 line        62     if not opt_name.startswith('--'):
        21:50:15.221048 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--rand_exp_sampling_replace'
        21:50:15.221320 line        64     if opt_name == '--options':
        21:50:15.221610 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--rand_exp_sampling_replace',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:15.221874 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.222062 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.222167 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.222283 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W...option_strings': ['--rand_exp_sampling_replace']}
            21:50:15.222384 line      1327         if 'default' not in kwargs:
            21:50:15.222499 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.222598 line      1336         if not callable(action_class):
            21:50:15.222715 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--rand_exp_samplin...lues or not in rand_exp_sampling.', metavar=None)
            21:50:15.222821 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.222956 line      1342         if not callable(type_func):
            21:50:15.223098 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.223206 line      1347             try:
            21:50:15.223311 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.223476 line      1352         return self._add_action(action)
            21:50:15.223609 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--rand_exp_samplin...lues or not in rand_exp_sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.223763 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        21:50:15.224059 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.224358 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.224530 line       138     if memo is None:
            21:50:15.224606 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.224680 line       141     d = id(x)
            New var:....... d = 140085916804728
            21:50:15.224777 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.224876 line       143     if y is not _nil:
            21:50:15.224975 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.225051 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.225171 line       149     if copier:
            21:50:15.225278 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804728: {'name': 'mf_strategy', 'requi...lity strategy to use. Should be one of {boca}.'}}
            Modified var:.. y = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            21:50:15.225425 line       183     if y is not x:
            21:50:15.225559 line       184         memo[d] = y
            21:50:15.225645 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804728: {'name': 'mf_strategy', 'requi...ity strategy to use. Should be one of {boca}.'}]}
            21:50:15.225736 line       186     return y
            21:50:15.225848 return     186     return y
            Return value:.. {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        21:50:15.225966 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'boca', 'help': '...elity strategy to use. Should be one of {boca}.'}
        Modified var:.. opt_name = 'mf_strategy'
        21:50:15.226293 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e': [False, None], 'mf_strategy': ['boca', None]}
        21:50:15.226602 line        62     if not opt_name.startswith('--'):
        21:50:15.226887 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mf_strategy'
        21:50:15.227154 line        64     if opt_name == '--options':
        21:50:15.227441 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mf_strategy',)
            Starting var:.. kwargs = {'required': False, 'default': 'boca', 'help': '...elity strategy to use. Should be one of {boca}.'}
            21:50:15.227702 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.227903 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.227998 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.228131 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'boca', 'help': '...f_strategy', 'option_strings': ['--mf_strategy']}
            21:50:15.228236 line      1327         if 'default' not in kwargs:
            21:50:15.228352 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.228451 line      1336         if not callable(action_class):
            21:50:15.228567 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mf_strategy'], d... to use. Should be one of {boca}.', metavar=None)
            21:50:15.228674 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.228810 line      1342         if not callable(type_func):
            21:50:15.228941 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.229046 line      1347             try:
            21:50:15.229161 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.229335 line      1352         return self._add_action(action)
            21:50:15.229469 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mf_strategy'], d... to use. Should be one of {boca}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.229622 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        21:50:15.229918 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.230221 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.230393 line       138     if memo is None:
            21:50:15.230469 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.230543 line       141     d = id(x)
            New var:....... d = 140085916804800
            21:50:15.230641 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.230741 line       143     if y is not _nil:
            21:50:15.230841 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.230918 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.231022 line       149     if copier:
            21:50:15.231142 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804800: {'name': 'gpb_prior_mean', 're...elp': 'The prior mean of the GP for the model.'}}
            Modified var:.. y = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            21:50:15.231287 line       183     if y is not x:
            21:50:15.231421 line       184         memo[d] = y
            21:50:15.231507 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804800: {'name': 'gpb_prior_mean', 're...lp': 'The prior mean of the GP for the model.'}]}
            21:50:15.231599 line       186     return y
            21:50:15.231711 return     186     return y
            Return value:.. {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        21:50:15.231830 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'The prior mean of the GP for the model.'}
        Modified var:.. opt_name = 'gpb_prior_mean'
        21:50:15.232160 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['boca', None], 'gpb_prior_mean': [None, None]}
        21:50:15.232475 line        62     if not opt_name.startswith('--'):
        21:50:15.232764 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_prior_mean'
        21:50:15.233025 line        64     if opt_name == '--options':
        21:50:15.233323 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_prior_mean',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'The prior mean of the GP for the model.'}
            21:50:15.233587 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.233779 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.233869 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.233982 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...or_mean', 'option_strings': ['--gpb_prior_mean']}
            21:50:15.234092 line      1327         if 'default' not in kwargs:
            21:50:15.234215 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.234315 line      1336         if not callable(action_class):
            21:50:15.234430 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_prior_mean']...ior mean of the GP for the model.', metavar=None)
            21:50:15.234536 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.234671 line      1342         if not callable(type_func):
            21:50:15.234800 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.234906 line      1347             try:
            21:50:15.235010 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.235184 line      1352         return self._add_action(action)
            21:50:15.235317 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_prior_mean']...ior mean of the GP for the model.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.235468 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        21:50:15.235759 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.236048 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.236233 line       138     if memo is None:
            21:50:15.236312 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.236387 line       141     d = id(x)
            New var:....... d = 140085916804872
            21:50:15.236487 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.236588 line       143     if y is not _nil:
            21:50:15.236690 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.236769 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.236873 line       149     if copier:
            21:50:15.236978 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804872: {'name': 'shrink_kernel_with_t...hat we don't get stuck.", 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            21:50:15.237144 line       183     if y is not x:
            21:50:15.237293 line       184         memo[d] = y
            21:50:15.237383 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804872: {'name': 'shrink_kernel_with_t...at we don't get stuck.", 'type': <class 'int'>}]}
            21:50:15.237476 line       186     return y
            21:50:15.237594 return     186     return y
            Return value:.. {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        21:50:15.237718 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': "If Tr...that we don't get stuck.", 'type': <class 'int'>}
        Modified var:.. opt_name = 'shrink_kernel_with_time'
        21:50:15.238034 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one, None], 'shrink_kernel_with_time': [0, None]}
        21:50:15.238361 line        62     if not opt_name.startswith('--'):
        21:50:15.238655 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--shrink_kernel_with_time'
        21:50:15.238919 line        64     if opt_name == '--options':
        21:50:15.239222 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--shrink_kernel_with_time',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': "If Tr...that we don't get stuck.", 'type': <class 'int'>}
            21:50:15.239487 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.239676 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.239766 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.239880 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': "If Tr... 'option_strings': ['--shrink_kernel_with_time']}
            21:50:15.239982 line      1327         if 'default' not in kwargs:
            21:50:15.240113 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.240216 line      1336         if not callable(action_class):
            21:50:15.240334 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--shrink_kernel_wi... time so that we don't get stuck.", metavar=None)
            21:50:15.240442 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.240578 line      1342         if not callable(type_func):
            21:50:15.240709 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.240816 line      1347             try:
            21:50:15.240920 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.241090 line      1352         return self._add_action(action)
            21:50:15.241228 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--shrink_kernel_wi... time so that we don't get stuck.", metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.241387 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        21:50:15.241686 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.241978 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.242168 line       138     if memo is None:
            21:50:15.242249 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.242326 line       141     d = id(x)
            New var:....... d = 140085916804944
            21:50:15.242428 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.242531 line       143     if y is not _nil:
            21:50:15.242635 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.242716 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.242822 line       149     if copier:
            21:50:15.242930 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804944: {'name': 'perturb_thresh', 're...cal stability issues.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            21:50:15.243097 line       183     if y is not x:
            21:50:15.243243 line       184         memo[d] = y
            21:50:15.243337 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804944: {'name': 'perturb_thresh', 're...al stability issues.', 'type': <class 'float'>}]}
            21:50:15.243434 line       186     return y
            21:50:15.243554 return     186     return y
            Return value:.. {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        21:50:15.243684 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.0001, 'help': '...ical stability issues.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'perturb_thresh'
        21:50:15.244012 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...me': [0, None], 'perturb_thresh': [0.0001, None]}
        21:50:15.244339 line        62     if not opt_name.startswith('--'):
        21:50:15.244631 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--perturb_thresh'
        21:50:15.244894 line        64     if opt_name == '--options':
        21:50:15.245195 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--perturb_thresh',)
            Starting var:.. kwargs = {'required': False, 'default': 0.0001, 'help': '...ical stability issues.', 'type': <class 'float'>}
            21:50:15.245464 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.245660 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.245753 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.245870 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.0001, 'help': '..._thresh', 'option_strings': ['--perturb_thresh']}
            21:50:15.245974 line      1327         if 'default' not in kwargs:
            21:50:15.246106 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.246210 line      1336         if not callable(action_class):
            21:50:15.246329 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--perturb_thresh']...avoid numerical stability issues.', metavar=None)
            21:50:15.246437 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.246577 line      1342         if not callable(type_func):
            21:50:15.246711 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.246821 line      1347             try:
            21:50:15.246928 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.247105 line      1352         return self._add_action(action)
            21:50:15.247245 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--perturb_thresh']...avoid numerical stability issues.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.247405 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        21:50:15.247701 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.247992 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.248176 line       138     if memo is None:
            21:50:15.248255 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.248330 line       141     d = id(x)
            New var:....... d = 140085916805016
            21:50:15.248429 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.248529 line       143     if y is not _nil:
            21:50:15.248629 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.248707 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.248809 line       149     if copier:
            21:50:15.248915 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805016: {'name': 'track_every_time_ste...tracks every time step.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            21:50:15.249079 line       183     if y is not x:
            21:50:15.249224 line       184         memo[d] = y
            21:50:15.249313 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805016: {'name': 'track_every_time_ste...racks every time step.', 'type': <class 'int'>}]}
            21:50:15.249405 line       186     return y
            21:50:15.249525 return     186     return y
            Return value:.. {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        21:50:15.249646 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If 1, it tracks every time step.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'track_every_time_step'
        21:50:15.249964 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari....0001, None], 'track_every_time_step': [0, None]}
        21:50:15.250289 line        62     if not opt_name.startswith('--'):
        21:50:15.250581 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--track_every_time_step'
        21:50:15.250844 line        64     if opt_name == '--options':
        21:50:15.251143 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--track_every_time_step',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': 'If 1, it tracks every time step.', 'type': <class 'int'>}
            21:50:15.251409 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.251598 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.251688 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.251802 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': 'If 1,...', 'option_strings': ['--track_every_time_step']}
            21:50:15.251904 line      1327         if 'default' not in kwargs:
            21:50:15.252021 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.252134 line      1336         if not callable(action_class):
            21:50:15.252253 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--track_every_time...'If 1, it tracks every time step.', metavar=None)
            21:50:15.252360 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.252496 line      1342         if not callable(type_func):
            21:50:15.252627 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.252733 line      1347             try:
            21:50:15.252837 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.253002 line      1352         return self._add_action(action)
            21:50:15.253146 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--track_every_time...'If 1, it tracks every time step.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.253303 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        21:50:15.253599 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.253896 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.254077 line       138     if memo is None:
            21:50:15.254163 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.254242 line       141     d = id(x)
            New var:....... d = 140085916805088
            21:50:15.254344 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.254447 line       143     if y is not _nil:
            21:50:15.254551 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.254631 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.254736 line       149     if copier:
            21:50:15.254845 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805088: {'name': 'next_pt_std_thresh',... the bandwidth range'), 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            21:50:15.255030 line       183     if y is not x:
            21:50:15.255191 line       184         memo[d] = y
            21:50:15.255286 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805088: {'name': 'next_pt_std_thresh',...the bandwidth range'), 'type': <class 'float'>}]}
            21:50:15.255384 line       186     return y
            21:50:15.255508 return     186     return y
            Return value:.. {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        21:50:15.255639 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.005, 'help': ('...e the bandwidth range'), 'type': <class 'float'>}
        Modified var:.. opt_name = 'next_pt_std_thresh'
        21:50:15.255962 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [0, None], 'next_pt_std_thresh': [0.005, None]}
        21:50:15.256292 line        62     if not opt_name.startswith('--'):
        21:50:15.256589 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--next_pt_std_thresh'
        21:50:15.256853 line        64     if opt_name == '--options':
        21:50:15.257153 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--next_pt_std_thresh',)
            Starting var:.. kwargs = {'required': False, 'default': 0.005, 'help': ('...e the bandwidth range'), 'type': <class 'float'>}
            21:50:15.257418 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.257610 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.257703 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.257823 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.005, 'help': ('...esh', 'option_strings': ['--next_pt_std_thresh']}
            21:50:15.257929 line      1327         if 'default' not in kwargs:
            21:50:15.258047 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.258163 line      1336         if not callable(action_class):
            21:50:15.258285 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--next_pt_std_thre... will reduce the bandwidth range'), metavar=None)
            21:50:15.258394 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.258534 line      1342         if not callable(type_func):
            21:50:15.258668 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.258778 line      1347             try:
            21:50:15.258884 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.259052 line      1352         return self._add_action(action)
            21:50:15.259198 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--next_pt_std_thre... will reduce the bandwidth range'), metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.259360 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        21:50:15.259657 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.259948 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.260132 line       138     if memo is None:
            21:50:15.260212 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.260287 line       141     d = id(x)
            New var:....... d = 140085916805160
            21:50:15.260386 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.260485 line       143     if y is not _nil:
            21:50:15.260586 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.260663 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.260767 line       149     if copier:
            21:50:15.260873 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805160: {'name': 'nn_report_results_ev...results more frequently', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            21:50:15.261028 line       183     if y is not x:
            21:50:15.261180 line       184         memo[d] = y
            21:50:15.261271 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805160: {'name': 'nn_report_results_ev...esults more frequently', 'type': <class 'int'>}]}
            21:50:15.261365 line       186     return y
            21:50:15.261481 return     186     return y
            Return value:.. {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        21:50:15.261607 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'If NN... results more frequently', 'type': <class 'int'>}
        Modified var:.. opt_name = 'nn_report_results_every'
        21:50:15.261927 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...005, None], 'nn_report_results_every': [1, None]}
        21:50:15.262255 line        62     if not opt_name.startswith('--'):
        21:50:15.262546 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--nn_report_results_every'
        21:50:15.262809 line        64     if opt_name == '--options':
        21:50:15.263105 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--nn_report_results_every',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'If NN... results more frequently', 'type': <class 'int'>}
            21:50:15.263370 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.263558 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.263648 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.263762 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'If NN... 'option_strings': ['--nn_report_results_every']}
            21:50:15.263864 line      1327         if 'default' not in kwargs:
            21:50:15.263980 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.264088 line      1336         if not callable(action_class):
            21:50:15.264211 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--nn_report_result...t, report results more frequently', metavar=None)
            21:50:15.264319 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.264455 line      1342         if not callable(type_func):
            21:50:15.264586 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.264696 line      1347             try:
            21:50:15.264815 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.264982 line      1352         return self._add_action(action)
            21:50:15.265126 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--nn_report_result...t, report results more frequently', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.265284 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        21:50:15.265584 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.265876 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.266054 line       138     if memo is None:
            21:50:15.266144 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.266220 line       141     d = id(x)
            New var:....... d = 140085372158312
            21:50:15.266319 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.266420 line       143     if y is not _nil:
            21:50:15.266521 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.266599 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.266704 line       149     if copier:
            21:50:15.266809 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372158312: {'name': 'hp_tune_criterion', ...Other options are post_sampling and post_mean.'}}
            Modified var:.. y = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            21:50:15.266951 line       183     if y is not x:
            21:50:15.267101 line       184         memo[d] = y
            21:50:15.267191 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372158312: {'name': 'hp_tune_criterion', ...ther options are post_sampling and post_mean.'}]}
            21:50:15.267284 line       186     return y
            21:50:15.267400 return     186     return y
            Return value:.. {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        21:50:15.267522 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'ml', 'help': 'Wh... Other options are post_sampling and post_mean.'}
        Modified var:.. opt_name = 'hp_tune_criterion'
        21:50:15.267843 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...y': [1, None], 'hp_tune_criterion': ['ml', None]}
        21:50:15.268170 line        62     if not opt_name.startswith('--'):
        21:50:15.268464 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_criterion'
        21:50:15.268731 line        64     if opt_name == '--options':
        21:50:15.269022 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'ml', 'help': 'Wh... Other options are post_sampling and post_mean.'}
            21:50:15.269298 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.269487 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.269577 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.269691 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'ml', 'help': 'Wh...rion', 'option_strings': ['--hp_tune_criterion']}
            21:50:15.269793 line      1327         if 'default' not in kwargs:
            21:50:15.269914 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.270014 line      1336         if not callable(action_class):
            21:50:15.270145 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_criterio... are post_sampling and post_mean.', metavar=None)
            21:50:15.270255 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.270391 line      1342         if not callable(type_func):
            21:50:15.270522 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.270628 line      1347             try:
            21:50:15.270732 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.270898 line      1352         return self._add_action(action)
            21:50:15.271029 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_criterio... are post_sampling and post_mean.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.271194 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        21:50:15.271492 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.271783 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.271955 line       138     if memo is None:
            21:50:15.272033 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.272118 line       141     d = id(x)
            New var:....... d = 140085372158960
            21:50:15.272220 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.272320 line       143     if y is not _nil:
            21:50:15.272421 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.272498 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.272601 line       149     if copier:
            21:50:15.272707 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372158960: {'name': 'hp_tune_probs', 'req...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            21:50:15.272851 line       183     if y is not x:
            21:50:15.272986 line       184         memo[d] = y
            21:50:15.273082 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372158960: {'name': 'hp_tune_probs', 'req...t acquisitions according to how well they do.'}]}
            21:50:15.273182 line       186     return y
            21:50:15.273298 return     186     return y
            Return value:.. {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        21:50:15.273422 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'uniform', 'help'...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'hp_tune_probs'
        21:50:15.273748 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['ml', None], 'hp_tune_probs': ['uniform', None]}
        21:50:15.274067 line        62     if not opt_name.startswith('--'):
        21:50:15.274368 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_probs'
        21:50:15.274635 line        64     if opt_name == '--options':
        21:50:15.274924 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_probs',)
            Starting var:.. kwargs = {'required': False, 'default': 'uniform', 'help'...ght acquisitions according to how well they do.'}
            21:50:15.275203 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.275393 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.275484 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.275598 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'uniform', 'help'...ne_probs', 'option_strings': ['--hp_tune_probs']}
            21:50:15.275699 line      1327         if 'default' not in kwargs:
            21:50:15.275815 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.275913 line      1336         if not callable(action_class):
            21:50:15.276030 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_probs'],...ns according to how well they do.', metavar=None)
            21:50:15.276150 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.276289 line      1342         if not callable(type_func):
            21:50:15.276422 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.276529 line      1347             try:
            21:50:15.276636 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.276803 line      1352         return self._add_action(action)
            21:50:15.276936 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_probs'],...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.277101 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        21:50:15.277402 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.277699 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.277871 line       138     if memo is None:
            21:50:15.277951 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.278025 line       141     d = id(x)
            New var:....... d = 140085916973240
            21:50:15.278134 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.278236 line       143     if y is not _nil:
            21:50:15.278337 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.278415 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.278518 line       149     if copier:
            21:50:15.278623 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973240: {'name': 'ml_hp_tune_opt', 're...r to use when maximising the tuning criterion.'}}
            Modified var:.. y = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            21:50:15.278766 line       183     if y is not x:
            21:50:15.278898 line       184         memo[d] = y
            21:50:15.278985 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973240: {'name': 'ml_hp_tune_opt', 're... to use when maximising the tuning criterion.'}]}
            21:50:15.279085 line       186     return y
            21:50:15.279204 return     186     return y
            Return value:.. {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        21:50:15.279323 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
        Modified var:.. opt_name = 'ml_hp_tune_opt'
        21:50:15.279645 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...orm', None], 'ml_hp_tune_opt': ['default', None]}
        21:50:15.279958 line        62     if not opt_name.startswith('--'):
        21:50:15.280263 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--ml_hp_tune_opt'
        21:50:15.280528 line        64     if opt_name == '--options':
        21:50:15.280817 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--ml_hp_tune_opt',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            21:50:15.281089 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.281283 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.281373 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.281486 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...une_opt', 'option_strings': ['--ml_hp_tune_opt']}
            21:50:15.281586 line      1327         if 'default' not in kwargs:
            21:50:15.281701 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.281798 line      1336         if not callable(action_class):
            21:50:15.281917 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--ml_hp_tune_opt']... maximising the tuning criterion.', metavar=None)
            21:50:15.282024 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.282174 line      1342         if not callable(type_func):
            21:50:15.282305 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.282410 line      1347             try:
            21:50:15.282513 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.282678 line      1352         return self._add_action(action)
            21:50:15.282810 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--ml_hp_tune_opt']... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.282961 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        21:50:15.283271 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.283565 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.283739 line       138     if memo is None:
            21:50:15.283817 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.283891 line       141     d = id(x)
            New var:....... d = 140085916973456
            21:50:15.283990 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.284101 line       143     if y is not _nil:
            21:50:15.284204 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.284282 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.284387 line       149     if copier:
            21:50:15.284492 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973456: {'name': 'hp_tune_max_evals', ...g the tuning criterion.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:15.284648 line       183     if y is not x:
            21:50:15.284783 line       184         memo[d] = y
            21:50:15.284870 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973456: {'name': 'hp_tune_max_evals', ... the tuning criterion.', 'type': <class 'int'>}]}
            21:50:15.284963 line       186     return y
            21:50:15.285083 return     186     return y
            Return value:.. {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        21:50:15.285211 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ...ng the tuning criterion.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'hp_tune_max_evals'
        21:50:15.285536 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'hp_tune_max_evals': [-1, None]}
        21:50:15.285855 line        62     if not opt_name.startswith('--'):
        21:50:15.286160 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_max_evals'
        21:50:15.286426 line        64     if opt_name == '--options':
        21:50:15.286716 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_max_evals',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:15.286983 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.287187 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.287279 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.287393 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...vals', 'option_strings': ['--hp_tune_max_evals']}
            21:50:15.287494 line      1327         if 'default' not in kwargs:
            21:50:15.287610 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.287709 line      1336         if not callable(action_class):
            21:50:15.287826 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_max_eval... maximising the tuning criterion.', metavar=None)
            21:50:15.287933 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.288078 line      1342         if not callable(type_func):
            21:50:15.288217 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.288325 line      1347             try:
            21:50:15.288430 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.288596 line      1352         return self._add_action(action)
            21:50:15.288728 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_max_eval... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.288881 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        21:50:15.289191 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.289487 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.289658 line       138     if memo is None:
            21:50:15.289734 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.289808 line       141     d = id(x)
            New var:....... d = 140085916973600
            21:50:15.289904 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.290007 line       143     if y is not _nil:
            21:50:15.290119 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.290198 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.290301 line       149     if copier:
            21:50:15.290406 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973600: {'name': 'handle_non_psd_kerne...elp': 'How to handle kernels that are non-psd.'}}
            Modified var:.. y = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            21:50:15.290549 line       183     if y is not x:
            21:50:15.290682 line       184         memo[d] = y
            21:50:15.290767 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973600: {'name': 'handle_non_psd_kerne...lp': 'How to handle kernels that are non-psd.'}]}
            21:50:15.290858 line       186     return y
            21:50:15.290970 return     186     return y
            Return value:.. {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        21:50:15.291105 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'guaranteed_psd', 'help': 'How to handle kernels that are non-psd.'}
        Modified var:.. opt_name = 'handle_non_psd_kernels'
        21:50:15.291433 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...andle_non_psd_kernels': ['guaranteed_psd', None]}
        21:50:15.291747 line        62     if not opt_name.startswith('--'):
        21:50:15.292040 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--handle_non_psd_kernels'
        21:50:15.292320 line        64     if opt_name == '--options':
        21:50:15.292611 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--handle_non_psd_kernels',)
            Starting var:.. kwargs = {'required': False, 'default': 'guaranteed_psd', 'help': 'How to handle kernels that are non-psd.'}
            21:50:15.292879 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.293073 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.293166 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.293280 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'guaranteed_psd',..., 'option_strings': ['--handle_non_psd_kernels']}
            21:50:15.293380 line      1327         if 'default' not in kwargs:
            21:50:15.293494 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.293592 line      1336         if not callable(action_class):
            21:50:15.293707 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--handle_non_psd_k... handle kernels that are non-psd.', metavar=None)
            21:50:15.293813 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.293952 line      1342         if not callable(type_func):
            21:50:15.294098 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.294208 line      1347             try:
            21:50:15.294312 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.294477 line      1352         return self._add_action(action)
            21:50:15.294609 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--handle_non_psd_k... handle kernels that are non-psd.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.294759 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        21:50:15.295061 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.295367 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.295539 line       138     if memo is None:
            21:50:15.295615 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.295689 line       141     d = id(x)
            New var:....... d = 140085917009888
            21:50:15.295787 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.295887 line       143     if y is not _nil:
            21:50:15.295988 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.296070 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.296180 line       149     if copier:
            21:50:15.296284 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917009888: {'name': 'mean_func', 'require...ill use this instead of theother options below'}}
            Modified var:.. y = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            21:50:15.296427 line       183     if y is not x:
            21:50:15.296561 line       184         memo[d] = y
            21:50:15.296647 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917009888: {'name': 'mean_func', 'require...ll use this instead of theother options below'}]}
            21:50:15.296738 line       186     return y
            21:50:15.296851 return     186     return y
            Return value:.. {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        21:50:15.296969 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...will use this instead of theother options below'}
        Modified var:.. opt_name = 'mean_func'
        21:50:15.297308 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...uaranteed_psd', None], 'mean_func': [None, None]}
        21:50:15.297623 line        62     if not opt_name.startswith('--'):
        21:50:15.297922 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func'
        21:50:15.298204 line        64     if opt_name == '--options':
        21:50:15.298500 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...will use this instead of theother options below'}
            21:50:15.298768 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.298956 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.299045 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.299170 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...: 'mean_func', 'option_strings': ['--mean_func']}
            21:50:15.299271 line      1327         if 'default' not in kwargs:
            21:50:15.299385 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.299483 line      1336         if not callable(action_class):
            21:50:15.299598 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func'], des...instead of theother options below', metavar=None)
            21:50:15.299703 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.299837 line      1342         if not callable(type_func):
            21:50:15.299966 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.300079 line      1347             try:
            21:50:15.300190 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.300355 line      1352         return self._add_action(action)
            21:50:15.300485 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func'], des...instead of theother options below', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.300636 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        21:50:15.300934 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.301242 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.301414 line       138     if memo is None:
            21:50:15.301492 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.301568 line       141     d = id(x)
            New var:....... d = 140085372259136
            21:50:15.301665 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.301766 line       143     if y is not _nil:
            21:50:15.301867 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.301950 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.302054 line       149     if copier:
            21:50:15.302172 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372259136: {'name': 'mean_func_type', 're... If const, specifcy value in mean-func-const.')}}
            Modified var:.. y = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            21:50:15.302340 line       183     if y is not x:
            21:50:15.302479 line       184         memo[d] = y
            21:50:15.302569 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372259136: {'name': 'mean_func_type', 're...If const, specifcy value in mean-func-const.')}]}
            21:50:15.302662 line       186     return y
            21:50:15.302779 return     186     return y
            Return value:.. {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        21:50:15.302903 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': (.... If const, specifcy value in mean-func-const.')}
        Modified var:.. opt_name = 'mean_func_type'
        21:50:15.303244 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'mean_func_type': ['tune', None]}
        21:50:15.303561 line        62     if not opt_name.startswith('--'):
        21:50:15.303856 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func_type'
        21:50:15.304134 line        64     if opt_name == '--options':
        21:50:15.304427 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'tune', 'help': (.... If const, specifcy value in mean-func-const.')}
            21:50:15.304696 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.304885 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.304976 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.305102 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tune', 'help': (...nc_type', 'option_strings': ['--mean_func_type']}
            21:50:15.305206 line      1327         if 'default' not in kwargs:
            21:50:15.305328 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.305428 line      1336         if not callable(action_class):
            21:50:15.305545 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func_type']...ecifcy value in mean-func-const.'), metavar=None)
            21:50:15.305653 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.305790 line      1342         if not callable(type_func):
            21:50:15.305928 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.306036 line      1347             try:
            21:50:15.306158 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.306327 line      1352         return self._add_action(action)
            21:50:15.306461 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func_type']...ecifcy value in mean-func-const.'), metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.306618 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        21:50:15.306922 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.307237 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.307411 line       138     if memo is None:
            21:50:15.307490 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.307567 line       141     d = id(x)
            New var:....... d = 140085917009960
            21:50:15.307670 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.307776 line       143     if y is not _nil:
            21:50:15.307879 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.307959 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.308069 line       149     if copier:
            21:50:15.308183 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917009960: {'name': 'mean_func_const', 'r...n_func_type is const.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            21:50:15.308341 line       183     if y is not x:
            21:50:15.308479 line       184         memo[d] = y
            21:50:15.308570 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917009960: {'name': 'mean_func_const', 'r..._func_type is const.', 'type': <class 'float'>}]}
            21:50:15.308665 line       186     return y
            21:50:15.308782 return     186     return y
            Return value:.. {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        21:50:15.308907 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.0, 'help': 'The...an_func_type is const.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'mean_func_const'
        21:50:15.309251 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['tune', None], 'mean_func_const': [0.0, None]}
        21:50:15.309575 line        62     if not opt_name.startswith('--'):
        21:50:15.309876 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func_const'
        21:50:15.310161 line        64     if opt_name == '--options':
        21:50:15.310456 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func_const',)
            Starting var:.. kwargs = {'required': False, 'default': 0.0, 'help': 'The...an_func_type is const.', 'type': <class 'float'>}
            21:50:15.310728 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.310919 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.311010 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.311139 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.0, 'help': 'The..._const', 'option_strings': ['--mean_func_const']}
            21:50:15.311244 line      1327         if 'default' not in kwargs:
            21:50:15.311360 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.311460 line      1336         if not callable(action_class):
            21:50:15.311578 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func_const'...o use if mean_func_type is const.', metavar=None)
            21:50:15.311687 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.311823 line      1342         if not callable(type_func):
            21:50:15.311955 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.312061 line      1347             try:
            21:50:15.312182 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.312349 line      1352         return self._add_action(action)
            21:50:15.312482 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func_const'...o use if mean_func_type is const.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.312636 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        21:50:15.312934 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.313247 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.313420 line       138     if memo is None:
            21:50:15.313497 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.313572 line       141     d = id(x)
            New var:....... d = 140085917010032
            21:50:15.313671 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.313772 line       143     if y is not _nil:
            21:50:15.313874 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.313951 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.314055 line       149     if copier:
            21:50:15.314173 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010032: {'name': 'noise_var_type', 're...te value in noise_var_label or noise_var_value'}}
            Modified var:.. y = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            21:50:15.314321 line       183     if y is not x:
            21:50:15.314459 line       184         memo[d] = y
            21:50:15.314547 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010032: {'name': 'noise_var_type', 're...e value in noise_var_label or noise_var_value'}]}
            21:50:15.314639 line       186     return y
            21:50:15.314755 return     186     return y
            Return value:.. {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        21:50:15.314878 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': '...ate value in noise_var_label or noise_var_value'}
        Modified var:.. opt_name = 'noise_var_type'
        21:50:15.315222 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0.0, None], 'noise_var_type': ['tune', None]}
        21:50:15.315542 line        62     if not opt_name.startswith('--'):
        21:50:15.315837 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_type'
        21:50:15.316118 line        64     if opt_name == '--options':
        21:50:15.316415 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'tune', 'help': '...ate value in noise_var_label or noise_var_value'}
            21:50:15.316686 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.316874 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.316965 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.317086 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tune', 'help': '...ar_type', 'option_strings': ['--noise_var_type']}
            21:50:15.317192 line      1327         if 'default' not in kwargs:
            21:50:15.317310 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.317408 line      1336         if not callable(action_class):
            21:50:15.317523 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_type']...oise_var_label or noise_var_value', metavar=None)
            21:50:15.317629 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.317764 line      1342         if not callable(type_func):
            21:50:15.317894 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.317999 line      1347             try:
            21:50:15.318113 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.318284 line      1352         return self._add_action(action)
            21:50:15.318418 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_type']...oise_var_label or noise_var_value', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.318570 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:15.318873 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.319188 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.319363 line       138     if memo is None:
            21:50:15.319443 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.319520 line       141     d = id(x)
            New var:....... d = 140085917010104
            21:50:15.319620 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.319723 line       143     if y is not _nil:
            21:50:15.319825 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.319905 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.320009 line       149     if copier:
            21:50:15.320130 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010104: {'name': 'noise_var_label', 'r...se as noise variance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:15.320290 line       183     if y is not x:
            21:50:15.320428 line       184         memo[d] = y
            21:50:15.320519 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010104: {'name': 'noise_var_label', 'r...e as noise variance.', 'type': <class 'float'>}]}
            21:50:15.320615 line       186     return y
            21:50:15.320733 return     186     return y
            Return value:.. {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:15.320858 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.05, 'help': 'Th...use as noise variance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'noise_var_label'
        21:50:15.321194 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... ['tune', None], 'noise_var_label': [0.05, None]}
        21:50:15.321515 line        62     if not opt_name.startswith('--'):
        21:50:15.321815 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_label'
        21:50:15.322101 line        64     if opt_name == '--options':
        21:50:15.322403 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_label',)
            Starting var:.. kwargs = {'required': False, 'default': 0.05, 'help': 'Th...use as noise variance.', 'type': <class 'float'>}
            21:50:15.322680 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.322876 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.322967 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.323094 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.05, 'help': 'Th..._label', 'option_strings': ['--noise_var_label']}
            21:50:15.323200 line      1327         if 'default' not in kwargs:
            21:50:15.323319 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.323421 line      1336         if not callable(action_class):
            21:50:15.323539 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_label'...ariance to use as noise variance.', metavar=None)
            21:50:15.323648 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.323786 line      1342         if not callable(type_func):
            21:50:15.323918 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.324026 line      1347             try:
            21:50:15.324144 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.324313 line      1352         return self._add_action(action)
            21:50:15.324448 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_label'...ariance to use as noise variance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.324606 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:15.324912 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.325230 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.325406 line       138     if memo is None:
            21:50:15.325485 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.325561 line       141     d = id(x)
            New var:....... d = 140085917010176
            21:50:15.325663 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.325765 line       143     if y is not _nil:
            21:50:15.325867 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.325946 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.326050 line       149     if copier:
            21:50:15.326170 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010176: {'name': 'noise_var_value', 'r...se as noise variance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:15.326329 line       183     if y is not x:
            21:50:15.326473 line       184         memo[d] = y
            21:50:15.326564 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010176: {'name': 'noise_var_value', 'r...e as noise variance.', 'type': <class 'float'>}]}
            21:50:15.326659 line       186     return y
            21:50:15.326777 return     186     return y
            Return value:.. {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:15.326902 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.1, 'help': 'The...use as noise variance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'noise_var_value'
        21:50:15.327240 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...l': [0.05, None], 'noise_var_value': [0.1, None]}
        21:50:15.327561 line        62     if not opt_name.startswith('--'):
        21:50:15.327861 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_value'
        21:50:15.328149 line        64     if opt_name == '--options':
        21:50:15.328449 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_value',)
            Starting var:.. kwargs = {'required': False, 'default': 0.1, 'help': 'The...use as noise variance.', 'type': <class 'float'>}
            21:50:15.328725 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.328915 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.329008 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.329136 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.1, 'help': 'The..._value', 'option_strings': ['--noise_var_value']}
            21:50:15.329242 line      1327         if 'default' not in kwargs:
            21:50:15.329360 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.329460 line      1336         if not callable(action_class):
            21:50:15.329578 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_value'...) value to use as noise variance.', metavar=None)
            21:50:15.329687 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.329825 line      1342         if not callable(type_func):
            21:50:15.329959 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.330073 line      1347             try:
            21:50:15.330185 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.330353 line      1352         return self._add_action(action)
            21:50:15.330487 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_value'...) value to use as noise variance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.330647 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        21:50:15.330949 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.331266 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.331439 line       138     if memo is None:
            21:50:15.331516 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.331590 line       141     d = id(x)
            New var:....... d = 140085917010248
            21:50:15.331689 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.331788 line       143     if y is not _nil:
            21:50:15.331888 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.331965 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.332075 line       149     if copier:
            21:50:15.332188 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010248: {'name': 'post_hp_tune_method'...ng the tuning criterion. Other option is nuts.'}}
            Modified var:.. y = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            21:50:15.332330 line       183     if y is not x:
            21:50:15.332466 line       184         memo[d] = y
            21:50:15.332553 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010248: {'name': 'post_hp_tune_method'...g the tuning criterion. Other option is nuts.'}]}
            21:50:15.332645 line       186     return y
            21:50:15.332759 return     186     return y
            Return value:.. {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        21:50:15.332878 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...ing the tuning criterion. Other option is nuts.'}
        Modified var:.. opt_name = 'post_hp_tune_method'
        21:50:15.333214 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...1, None], 'post_hp_tune_method': ['slice', None]}
        21:50:15.333540 line        62     if not opt_name.startswith('--'):
        21:50:15.333837 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_method'
        21:50:15.334123 line        64     if opt_name == '--options':
        21:50:15.334422 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...ing the tuning criterion. Other option is nuts.'}
            21:50:15.334695 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.334892 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.334982 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.335110 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...od', 'option_strings': ['--post_hp_tune_method']}
            21:50:15.335213 line      1327         if 'default' not in kwargs:
            21:50:15.335330 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.335428 line      1336         if not callable(action_class):
            21:50:15.335543 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_met... criterion. Other option is nuts.', metavar=None)
            21:50:15.335649 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.335782 line      1342         if not callable(type_func):
            21:50:15.335912 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.336017 line      1347             try:
            21:50:15.336132 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.336297 line      1352         return self._add_action(action)
            21:50:15.336429 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_met... criterion. Other option is nuts.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.336580 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.336885 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.337199 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.337372 line       138     if memo is None:
            21:50:15.337450 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.337525 line       141     d = id(x)
            New var:....... d = 140085917010320
            21:50:15.337623 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.337723 line       143     if y is not _nil:
            21:50:15.337825 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.337905 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.338009 line       149     if copier:
            21:50:15.338128 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010320: {'name': 'post_hp_tune_burn', ...ignore during sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.338287 line       183     if y is not x:
            21:50:15.338423 line       184         memo[d] = y
            21:50:15.338511 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010320: {'name': 'post_hp_tune_burn', ...gnore during sampling.', 'type': <class 'int'>}]}
            21:50:15.338606 line       186     return y
            21:50:15.338720 return     186     return y
            Return value:.. {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.338841 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'post_hp_tune_burn'
        21:50:15.339182 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['slice', None], 'post_hp_tune_burn': [-1, None]}
        21:50:15.339504 line        62     if not opt_name.startswith('--'):
        21:50:15.339803 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_burn'
        21:50:15.340083 line        64     if opt_name == '--options':
        21:50:15.340385 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_burn',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.340661 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.340850 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.340941 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.341055 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...burn', 'option_strings': ['--post_hp_tune_burn']}
            21:50:15.341170 line      1327         if 'default' not in kwargs:
            21:50:15.341288 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.341387 line      1336         if not callable(action_class):
            21:50:15.341503 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_bur...amples to ignore during sampling.', metavar=None)
            21:50:15.341611 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.341746 line      1342         if not callable(type_func):
            21:50:15.341877 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.341983 line      1347             try:
            21:50:15.342095 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.342262 line      1352         return self._add_action(action)
            21:50:15.342397 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_bur...amples to ignore during sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.342553 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        21:50:15.342861 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.343184 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.343358 line       138     if memo is None:
            21:50:15.343437 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.343513 line       141     d = id(x)
            New var:....... d = 140085917010392
            21:50:15.343612 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.343713 line       143     if y is not _nil:
            21:50:15.343815 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.343893 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.343996 line       149     if copier:
            21:50:15.344113 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010392: {'name': 'post_hp_tune_offset'...ignore between samples.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            21:50:15.344273 line       183     if y is not x:
            21:50:15.344409 line       184         memo[d] = y
            21:50:15.344498 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010392: {'name': 'post_hp_tune_offset'...gnore between samples.', 'type': <class 'int'>}]}
            21:50:15.344592 line       186     return y
            21:50:15.344707 return     186     return y
            Return value:.. {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        21:50:15.344830 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'post_hp_tune_offset'
        21:50:15.345176 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [-1, None], 'post_hp_tune_offset': [25, None]}
        21:50:15.345507 line        62     if not opt_name.startswith('--'):
        21:50:15.345811 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_offset'
        21:50:15.346100 line        64     if opt_name == '--options':
        21:50:15.346404 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_offset',)
            Starting var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            21:50:15.346683 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.346875 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.346985 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.347118 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ...et', 'option_strings': ['--post_hp_tune_offset']}
            21:50:15.347224 line      1327         if 'default' not in kwargs:
            21:50:15.347341 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.347440 line      1336         if not callable(action_class):
            21:50:15.347557 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_off...amples to ignore between samples.', metavar=None)
            21:50:15.347664 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.347802 line      1342         if not callable(type_func):
            21:50:15.347935 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.348042 line      1347             try:
            21:50:15.348160 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.348328 line      1352         return self._add_action(action)
            21:50:15.348461 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_off...amples to ignore between samples.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.348614 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        21:50:15.348924 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.349246 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.349422 line       138     if memo is None:
            21:50:15.349499 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.349574 line       141     d = id(x)
            New var:....... d = 140085916723528
            21:50:15.349672 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.349771 line       143     if y is not _nil:
            21:50:15.349871 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.349949 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.350050 line       149     if copier:
            21:50:15.350168 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723528: {'name': 'dom_euc_kernel_type'..., 'help': 'Kernel type for euclidean domains. '}}
            Modified var:.. y = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            21:50:15.350312 line       183     if y is not x:
            21:50:15.350446 line       184         memo[d] = y
            21:50:15.350532 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723528: {'name': 'dom_euc_kernel_type'... 'help': 'Kernel type for euclidean domains. '}]}
            21:50:15.350623 line       186     return y
            21:50:15.350736 return     186     return y
            Return value:.. {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        21:50:15.350859 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for euclidean domains. '}
        Modified var:.. opt_name = 'dom_euc_kernel_type'
        21:50:15.351203 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_kernel_type': ['default', None]}
        21:50:15.351527 line        62     if not opt_name.startswith('--'):
        21:50:15.351832 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_kernel_type'
        21:50:15.352120 line        64     if opt_name == '--options':
        21:50:15.352419 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for euclidean domains. '}
            21:50:15.352693 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.352884 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.352974 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.353097 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...pe', 'option_strings': ['--dom_euc_kernel_type']}
            21:50:15.353200 line      1327         if 'default' not in kwargs:
            21:50:15.353316 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.353415 line      1336         if not callable(action_class):
            21:50:15.353532 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_kernel_t...rnel type for euclidean domains. ', metavar=None)
            21:50:15.353638 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.353772 line      1342         if not callable(type_func):
            21:50:15.353902 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.354007 line      1347             try:
            21:50:15.354121 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.354288 line      1352         return self._add_action(action)
            21:50:15.354421 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_kernel_t...rnel type for euclidean domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.354575 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.354877 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.355195 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.355374 line       138     if memo is None:
            21:50:15.355452 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.355528 line       141     d = id(x)
            New var:....... d = 140085916723600
            21:50:15.355628 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.355730 line       143     if y is not _nil:
            21:50:15.355831 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.355908 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.356012 line       149     if copier:
            21:50:15.356130 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723600: {'name': 'dom_euc_use_same_ban... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.356288 line       183     if y is not x:
            21:50:15.356426 line       184         memo[d] = y
            21:50:15.356515 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723600: {'name': 'dom_euc_use_same_ban...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:15.356608 line       186     return y
            21:50:15.356725 return     186     return y
            Return value:.. {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.356849 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_use_same_bandwidth'
        21:50:15.357190 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_euc_use_same_bandwidth': [False, None]}
        21:50:15.357519 line        62     if not opt_name.startswith('--'):
        21:50:15.357820 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_use_same_bandwidth'
        21:50:15.358112 line        64     if opt_name == '--options':
        21:50:15.358413 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.358690 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.358882 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.358973 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.359099 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...ption_strings': ['--dom_euc_use_same_bandwidth']}
            21:50:15.359204 line      1327         if 'default' not in kwargs:
            21:50:15.359325 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.359424 line      1336         if not callable(action_class):
            21:50:15.359541 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_use_same...e is se or matern. Default=False.', metavar=None)
            21:50:15.359648 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.359783 line      1342         if not callable(type_func):
            21:50:15.359913 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.360019 line      1347             try:
            21:50:15.360134 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.360301 line      1352         return self._add_action(action)
            21:50:15.360433 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_use_same...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.360587 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:15.360895 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.361212 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.361385 line       138     if memo is None:
            21:50:15.361461 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.361536 line       141     d = id(x)
            New var:....... d = 140085916723672
            21:50:15.361634 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.361733 line       143     if y is not _nil:
            21:50:15.361832 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.361910 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.362012 line       149     if copier:
            21:50:15.362129 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723672: {'name': 'dom_euc_matern_nu', ...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:15.362275 line       183     if y is not x:
            21:50:15.362408 line       184         memo[d] = y
            21:50:15.362494 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723672: {'name': 'dom_euc_matern_nu', ...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.362586 line       186     return y
            21:50:15.362698 return     186     return y
            Return value:.. {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:15.362816 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_euc_matern_nu'
        21:50:15.363162 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_euc_matern_nu': ['default', None]}
        21:50:15.363486 line        62     if not opt_name.startswith('--'):
        21:50:15.363788 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_matern_nu'
        21:50:15.364059 line        64     if opt_name == '--options':
        21:50:15.364371 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.364645 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.364832 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.364922 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.365035 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...n_nu', 'option_strings': ['--dom_euc_matern_nu']}
            21:50:15.365148 line      1327         if 'default' not in kwargs:
            21:50:15.365265 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.365363 line      1336         if not callable(action_class):
            21:50:15.365480 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_matern_n...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.365586 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.365721 line      1342         if not callable(type_func):
            21:50:15.365852 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.365958 line      1347             try:
            21:50:15.366061 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.366238 line      1352         return self._add_action(action)
            21:50:15.366370 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_matern_n...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.366522 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.366825 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.367142 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.367320 line       138     if memo is None:
            21:50:15.367400 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.367475 line       141     d = id(x)
            New var:....... d = 140085916723744
            21:50:15.367575 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.367675 line       143     if y is not _nil:
            21:50:15.367777 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.367855 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.367959 line       149     if copier:
            21:50:15.368070 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723744: {'name': 'dom_euc_poly_order',...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.368232 line       183     if y is not x:
            21:50:15.368370 line       184         memo[d] = y
            21:50:15.368458 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723744: {'name': 'dom_euc_poly_order',... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:15.368550 line       186     return y
            21:50:15.368665 return     186     return y
            Return value:.. {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.368790 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_poly_order'
        21:50:15.369130 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_euc_poly_order': [1, None]}
        21:50:15.369455 line        62     if not opt_name.startswith('--'):
        21:50:15.369757 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_poly_order'
        21:50:15.370032 line        64     if opt_name == '--options':
        21:50:15.370348 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.370625 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.370816 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.370906 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.371021 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...der', 'option_strings': ['--dom_euc_poly_order']}
            21:50:15.371134 line      1327         if 'default' not in kwargs:
            21:50:15.371252 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.371356 line      1336         if not callable(action_class):
            21:50:15.371473 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:15.371580 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.371717 line      1342         if not callable(type_func):
            21:50:15.371848 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.371953 line      1347             try:
            21:50:15.372057 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.372242 line      1352         return self._add_action(action)
            21:50:15.372374 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.372527 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:15.372836 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.373149 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.373322 line       138     if memo is None:
            21:50:15.373400 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.373475 line       141     d = id(x)
            New var:....... d = 140085916723816
            21:50:15.373574 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.373675 line       143     if y is not _nil:
            21:50:15.373775 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.373854 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.373957 line       149     if copier:
            21:50:15.374061 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723816: {'name': 'dom_euc_use_additive...to use an additive GP. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:15.374234 line       183     if y is not x:
            21:50:15.374372 line       184         memo[d] = y
            21:50:15.374461 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723816: {'name': 'dom_euc_use_additive...o use an additive GP. ', 'type': <class 'int'>}]}
            21:50:15.374554 line       186     return y
            21:50:15.374669 return     186     return y
            Return value:.. {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:15.374808 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_use_additive_gp'
        21:50:15.375375 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_use_additive_gp': [False, None]}
        21:50:15.375933 line        62     if not opt_name.startswith('--'):
        21:50:15.376469 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_use_additive_gp'
        21:50:15.376952 line        64     if opt_name == '--options':
        21:50:15.377398 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_use_additive_gp',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            21:50:15.377678 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.377896 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.377994 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.378130 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W... 'option_strings': ['--dom_euc_use_additive_gp']}
            21:50:15.378237 line      1327         if 'default' not in kwargs:
            21:50:15.378354 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.378454 line      1336         if not callable(action_class):
            21:50:15.378571 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_use_addi...er or not to use an additive GP. ', metavar=None)
            21:50:15.378679 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.378814 line      1342         if not callable(type_func):
            21:50:15.378945 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.379050 line      1347             try:
            21:50:15.379172 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.379339 line      1352         return self._add_action(action)
            21:50:15.379471 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_use_addi...er or not to use an additive GP. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.379624 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:15.379930 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.380250 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.380424 line       138     if memo is None:
            21:50:15.380503 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.380578 line       141     d = id(x)
            New var:....... d = 140085916723888
            21:50:15.380677 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.380782 line       143     if y is not _nil:
            21:50:15.380884 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.380971 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.381090 line       149     if copier:
            21:50:15.381206 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723888: {'name': 'dom_euc_add_max_grou...the additive grouping. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:15.381363 line       183     if y is not x:
            21:50:15.381501 line       184         memo[d] = y
            21:50:15.381589 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723888: {'name': 'dom_euc_add_max_grou...he additive grouping. ', 'type': <class 'int'>}]}
            21:50:15.381685 line       186     return y
            21:50:15.381800 return     186     return y
            Return value:.. {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:15.381924 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_add_max_group_size'
        21:50:15.382287 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_add_max_group_size': [6, None]}
        21:50:15.382614 line        62     if not opt_name.startswith('--'):
        21:50:15.382916 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_max_group_size'
        21:50:15.383206 line        64     if opt_name == '--options':
        21:50:15.383506 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_max_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            21:50:15.383784 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.383974 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.384071 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.384196 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m...ption_strings': ['--dom_euc_add_max_group_size']}
            21:50:15.384300 line      1327         if 'default' not in kwargs:
            21:50:15.384418 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.384518 line      1336         if not callable(action_class):
            21:50:15.384636 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_max_...groups in the additive grouping. ', metavar=None)
            21:50:15.384743 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.384885 line      1342         if not callable(type_func):
            21:50:15.385017 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.385139 line      1347             try:
            21:50:15.385245 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.385412 line      1352         return self._add_action(action)
            21:50:15.385545 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_max_...groups in the additive grouping. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.385700 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:15.386010 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.386327 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.386502 line       138     if memo is None:
            21:50:15.386579 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.386653 line       141     d = id(x)
            New var:....... d = 140085916723960
            21:50:15.386751 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.386851 line       143     if y is not _nil:
            21:50:15.386952 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.387029 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.387152 line       149     if copier:
            21:50:15.387260 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723960: {'name': 'dom_euc_add_grouping...ng algorithm, should be one of {randomised_ml}'}}
            Modified var:.. y = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:15.387403 line       183     if y is not x:
            21:50:15.387542 line       184         memo[d] = y
            21:50:15.387629 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723960: {'name': 'dom_euc_add_grouping...g algorithm, should be one of {randomised_ml}'}]}
            21:50:15.387721 line       186     return y
            21:50:15.387836 return     186     return y
            Return value:.. {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:15.387957 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
        Modified var:.. opt_name = 'dom_euc_add_grouping_criterion'
        21:50:15.388304 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
        21:50:15.388629 line        62     if not opt_name.startswith('--'):
        21:50:15.388940 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_grouping_criterion'
        21:50:15.389229 line        64     if opt_name == '--options':
        21:50:15.389531 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_grouping_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            21:50:15.389809 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.389999 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.390103 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.390223 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...n_strings': ['--dom_euc_add_grouping_criterion']}
            21:50:15.390325 line      1327         if 'default' not in kwargs:
            21:50:15.390440 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.390539 line      1336         if not callable(action_class):
            21:50:15.390655 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_grou... should be one of {randomised_ml}', metavar=None)
            21:50:15.390761 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.390896 line      1342         if not callable(type_func):
            21:50:15.391027 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.391148 line      1347             try:
            21:50:15.391254 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.391420 line      1352         return self._add_action(action)
            21:50:15.391552 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_grou... should be one of {randomised_ml}', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.391705 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:15.392014 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.392329 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.392503 line       138     if memo is None:
            21:50:15.392581 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.392655 line       141     d = id(x)
            New var:....... d = 140085916724032
            21:50:15.392754 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.392854 line       143     if y is not _nil:
            21:50:15.392955 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.393037 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.393159 line       149     if copier:
            21:50:15.393268 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724032: {'name': 'dom_euc_num_groups_p... to try per group size.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:15.393424 line       183     if y is not x:
            21:50:15.393560 line       184         memo[d] = y
            21:50:15.393649 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724032: {'name': 'dom_euc_num_groups_p...to try per group size.', 'type': <class 'int'>}]}
            21:50:15.393743 line       186     return y
            21:50:15.393859 return     186     return y
            Return value:.. {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:15.393980 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_num_groups_per_group_size'
        21:50:15.394325 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_euc_num_groups_per_group_size': [-1, None]}
        21:50:15.394651 line        62     if not opt_name.startswith('--'):
        21:50:15.394954 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_num_groups_per_group_size'
        21:50:15.395242 line        64     if opt_name == '--options':
        21:50:15.395543 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_num_groups_per_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            21:50:15.395820 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.396009 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.396114 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.396234 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...trings': ['--dom_euc_num_groups_per_group_size']}
            21:50:15.396336 line      1327         if 'default' not in kwargs:
            21:50:15.396454 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.396554 line      1336         if not callable(action_class):
            21:50:15.396671 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_num_grou... of groups to try per group size.', metavar=None)
            21:50:15.396779 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.396919 line      1342         if not callable(type_func):
            21:50:15.397051 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.397172 line      1347             try:
            21:50:15.397278 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.397443 line      1352         return self._add_action(action)
            21:50:15.397575 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_num_grou... of groups to try per group size.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.397729 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:15.398038 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.398354 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.398527 line       138     if memo is None:
            21:50:15.398602 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.398677 line       141     d = id(x)
            New var:....... d = 140085916724104
            21:50:15.398774 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.398873 line       143     if y is not _nil:
            21:50:15.398973 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.399050 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.399172 line       149     if copier:
            21:50:15.399278 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724104: {'name': 'dom_euc_add_group_si...he group size, should be one of {max,sampled}.'}}
            Modified var:.. y = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:15.399421 line       183     if y is not x:
            21:50:15.399556 line       184         memo[d] = y
            21:50:15.399644 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724104: {'name': 'dom_euc_add_group_si...e group size, should be one of {max,sampled}.'}]}
            21:50:15.399735 line       186     return y
            21:50:15.399848 return     186     return y
            Return value:.. {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:15.399968 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
        Modified var:.. opt_name = 'dom_euc_add_group_size_criterion'
        21:50:15.400313 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...euc_add_group_size_criterion': ['sampled', None]}
        21:50:15.400640 line        62     if not opt_name.startswith('--'):
        21:50:15.400946 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_group_size_criterion'
        21:50:15.401239 line        64     if opt_name == '--options':
        21:50:15.401540 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_group_size_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            21:50:15.401819 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.402006 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.402109 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.402227 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...strings': ['--dom_euc_add_group_size_criterion']}
            21:50:15.402329 line      1327         if 'default' not in kwargs:
            21:50:15.402444 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.402542 line      1336         if not callable(action_class):
            21:50:15.402658 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_grou..., should be one of {max,sampled}.', metavar=None)
            21:50:15.402764 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.402897 line      1342         if not callable(type_func):
            21:50:15.403026 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.403147 line      1347             try:
            21:50:15.403253 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.403417 line      1352         return self._add_action(action)
            21:50:15.403550 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_grou..., should be one of {max,sampled}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.403703 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.404007 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.404323 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.404495 line       138     if memo is None:
            21:50:15.404572 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.404648 line       141     d = id(x)
            New var:....... d = 140085916724176
            21:50:15.404746 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.404846 line       143     if y is not _nil:
            21:50:15.404947 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.405024 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.405149 line       149     if copier:
            21:50:15.405259 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724176: {'name': 'dom_euc_esp_order', ...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.405415 line       183     if y is not x:
            21:50:15.405550 line       184         memo[d] = y
            21:50:15.405636 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724176: {'name': 'dom_euc_esp_order', ...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:15.405728 line       186     return y
            21:50:15.405840 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.405961 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_esp_order'
        21:50:15.406306 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_euc_esp_order': [-1, None]}
        21:50:15.406633 line        62     if not opt_name.startswith('--'):
        21:50:15.406937 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_order'
        21:50:15.407226 line        64     if opt_name == '--options':
        21:50:15.407527 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.407804 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.407993 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.408092 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.408215 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde...rder', 'option_strings': ['--dom_euc_esp_order']}
            21:50:15.408318 line      1327         if 'default' not in kwargs:
            21:50:15.408436 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.408535 line      1336         if not callable(action_class):
            21:50:15.408653 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_orde..., help='Order of the esp kernel. ', metavar=None)
            21:50:15.408761 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.408898 line      1342         if not callable(type_func):
            21:50:15.409029 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.409154 line      1347             try:
            21:50:15.409262 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.409428 line      1352         return self._add_action(action)
            21:50:15.409561 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_orde..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.409716 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:15.410026 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.410342 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.410513 line       138     if memo is None:
            21:50:15.410589 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.410661 line       141     d = id(x)
            New var:....... d = 140085916724248
            21:50:15.410758 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.410857 line       143     if y is not _nil:
            21:50:15.410956 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.411033 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.411154 line       149     if copier:
            21:50:15.411262 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724248: {'name': 'dom_euc_esp_kernel_t...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:15.411404 line       183     if y is not x:
            21:50:15.411538 line       184         memo[d] = y
            21:50:15.411624 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724248: {'name': 'dom_euc_esp_kernel_t...e of kernel. This depends on the application.'}]}
            21:50:15.411716 line       186     return y
            21:50:15.411828 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:15.411946 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_euc_esp_kernel_type'
        21:50:15.412292 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_esp_kernel_type': ['se', None]}
        21:50:15.412618 line        62     if not opt_name.startswith('--'):
        21:50:15.412922 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_kernel_type'
        21:50:15.413212 line        64     if opt_name == '--options':
        21:50:15.413512 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:15.413792 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.413980 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.414080 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.414218 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp... 'option_strings': ['--dom_euc_esp_kernel_type']}
            21:50:15.414320 line      1327         if 'default' not in kwargs:
            21:50:15.414436 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.414536 line      1336         if not callable(action_class):
            21:50:15.414651 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_kern... This depends on the application.', metavar=None)
            21:50:15.414758 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.414893 line      1342         if not callable(type_func):
            21:50:15.415024 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.415141 line      1347             try:
            21:50:15.415246 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.415411 line      1352         return self._add_action(action)
            21:50:15.415543 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_kern... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.415695 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:15.416003 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.416318 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.416492 line       138     if memo is None:
            21:50:15.416569 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.416642 line       141     d = id(x)
            New var:....... d = 140085916724320
            21:50:15.416739 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.416837 line       143     if y is not _nil:
            21:50:15.416938 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.417015 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.417129 line       149     if copier:
            21:50:15.417236 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724320: {'name': 'dom_euc_esp_matern_n...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:15.417379 line       183     if y is not x:
            21:50:15.417520 line       184         memo[d] = y
            21:50:15.417607 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724320: {'name': 'dom_euc_esp_matern_n...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.417699 line       186     return y
            21:50:15.417814 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:15.417934 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_euc_esp_matern_nu'
        21:50:15.418280 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_euc_esp_matern_nu': ['default', None]}
        21:50:15.418606 line        62     if not opt_name.startswith('--'):
        21:50:15.418909 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_matern_nu'
        21:50:15.419198 line        64     if opt_name == '--options':
        21:50:15.419503 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.419781 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.419971 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.420060 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.420187 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...', 'option_strings': ['--dom_euc_esp_matern_nu']}
            21:50:15.420288 line      1327         if 'default' not in kwargs:
            21:50:15.420403 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.420502 line      1336         if not callable(action_class):
            21:50:15.420619 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_mate...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.420726 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.420861 line      1342         if not callable(type_func):
            21:50:15.420992 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.421111 line      1347             try:
            21:50:15.421218 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.421389 line      1352         return self._add_action(action)
            21:50:15.421522 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_mate...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.421678 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        21:50:15.421990 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.422506 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.422742 line       138     if memo is None:
            21:50:15.422826 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.422903 line       141     d = id(x)
            New var:....... d = 140085916724392
            21:50:15.423008 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.423156 line       143     if y is not _nil:
            21:50:15.423263 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.423343 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.423449 line       149     if copier:
            21:50:15.423556 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724392: {'name': 'dom_int_kernel_type'...', 'help': 'Kernel type for integral domains. '}}
            Modified var:.. y = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            21:50:15.423700 line       183     if y is not x:
            21:50:15.423841 line       184         memo[d] = y
            21:50:15.423929 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724392: {'name': 'dom_int_kernel_type'..., 'help': 'Kernel type for integral domains. '}]}
            21:50:15.424021 line       186     return y
            21:50:15.424150 return     186     return y
            Return value:.. {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        21:50:15.424274 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for integral domains. '}
        Modified var:.. opt_name = 'dom_int_kernel_type'
        21:50:15.424611 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_kernel_type': ['default', None]}
        21:50:15.424945 line        62     if not opt_name.startswith('--'):
        21:50:15.425268 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_kernel_type'
        21:50:15.425553 line        64     if opt_name == '--options':
        21:50:15.425858 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for integral domains. '}
            21:50:15.426158 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.426357 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.426447 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.426563 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...pe', 'option_strings': ['--dom_int_kernel_type']}
            21:50:15.426663 line      1327         if 'default' not in kwargs:
            21:50:15.426779 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.426878 line      1336         if not callable(action_class):
            21:50:15.426995 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_kernel_t...ernel type for integral domains. ', metavar=None)
            21:50:15.427114 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.427254 line      1342         if not callable(type_func):
            21:50:15.427386 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.427493 line      1347             try:
            21:50:15.427598 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.427764 line      1352         return self._add_action(action)
            21:50:15.427898 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_kernel_t...ernel type for integral domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.428054 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.428377 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.428684 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.428858 line       138     if memo is None:
            21:50:15.428937 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.429013 line       141     d = id(x)
            New var:....... d = 140085916724464
            21:50:15.429131 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.429234 line       143     if y is not _nil:
            21:50:15.429337 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.429416 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.429520 line       149     if copier:
            21:50:15.429628 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724464: {'name': 'dom_int_use_same_ban... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.429784 line       183     if y is not x:
            21:50:15.429926 line       184         memo[d] = y
            21:50:15.430015 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724464: {'name': 'dom_int_use_same_ban...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:15.430119 line       186     return y
            21:50:15.430241 return     186     return y
            Return value:.. {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.430366 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_use_same_bandwidth'
        21:50:15.430699 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_int_use_same_bandwidth': [False, None]}
        21:50:15.431031 line        62     if not opt_name.startswith('--'):
        21:50:15.431348 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_use_same_bandwidth'
        21:50:15.431629 line        64     if opt_name == '--options':
        21:50:15.431935 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.432232 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.432429 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.432520 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.432635 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...ption_strings': ['--dom_int_use_same_bandwidth']}
            21:50:15.432736 line      1327         if 'default' not in kwargs:
            21:50:15.432852 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.432951 line      1336         if not callable(action_class):
            21:50:15.433074 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_use_same...e is se or matern. Default=False.', metavar=None)
            21:50:15.433188 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.433326 line      1342         if not callable(type_func):
            21:50:15.433458 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.433565 line      1347             try:
            21:50:15.433670 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.433835 line      1352         return self._add_action(action)
            21:50:15.433967 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_use_same...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.434137 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:15.434452 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.434757 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.434929 line       138     if memo is None:
            21:50:15.435005 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.435085 line       141     d = id(x)
            New var:....... d = 140085916724536
            21:50:15.435189 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.435288 line       143     if y is not _nil:
            21:50:15.435388 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.435465 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.435571 line       149     if copier:
            21:50:15.435675 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724536: {'name': 'dom_int_matern_nu', ...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:15.435818 line       183     if y is not x:
            21:50:15.435951 line       184         memo[d] = y
            21:50:15.436037 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724536: {'name': 'dom_int_matern_nu', ...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.436141 line       186     return y
            21:50:15.436255 return     186     return y
            Return value:.. {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:15.436375 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_int_matern_nu'
        21:50:15.436710 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_int_matern_nu': ['default', None]}
        21:50:15.437037 line        62     if not opt_name.startswith('--'):
        21:50:15.437361 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_matern_nu'
        21:50:15.437639 line        64     if opt_name == '--options':
        21:50:15.437939 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.438233 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.438429 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.438520 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.438634 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...n_nu', 'option_strings': ['--dom_int_matern_nu']}
            21:50:15.438734 line      1327         if 'default' not in kwargs:
            21:50:15.438850 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.438948 line      1336         if not callable(action_class):
            21:50:15.439070 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_matern_n...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.439183 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.439318 line      1342         if not callable(type_func):
            21:50:15.439449 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.439555 line      1347             try:
            21:50:15.439660 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.439825 line      1352         return self._add_action(action)
            21:50:15.439956 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_matern_n...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.440121 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.440432 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.440741 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.440913 line       138     if memo is None:
            21:50:15.440990 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.441072 line       141     d = id(x)
            New var:....... d = 140085916724608
            21:50:15.441179 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.441279 line       143     if y is not _nil:
            21:50:15.441379 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.441457 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.441560 line       149     if copier:
            21:50:15.441664 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724608: {'name': 'dom_int_poly_order',...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.441817 line       183     if y is not x:
            21:50:15.441953 line       184         memo[d] = y
            21:50:15.442040 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724608: {'name': 'dom_int_poly_order',... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:15.442149 line       186     return y
            21:50:15.442270 return     186     return y
            Return value:.. {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.442394 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_poly_order'
        21:50:15.442728 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_int_poly_order': [1, None]}
        21:50:15.443060 line        62     if not opt_name.startswith('--'):
        21:50:15.443378 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_poly_order'
        21:50:15.443657 line        64     if opt_name == '--options':
        21:50:15.443960 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.444259 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.444450 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.444540 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.444656 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...der', 'option_strings': ['--dom_int_poly_order']}
            21:50:15.444757 line      1327         if 'default' not in kwargs:
            21:50:15.444872 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.444970 line      1336         if not callable(action_class):
            21:50:15.445099 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:15.445209 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.445345 line      1342         if not callable(type_func):
            21:50:15.445476 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.445583 line      1347             try:
            21:50:15.445687 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.445852 line      1352         return self._add_action(action)
            21:50:15.445984 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.446149 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:15.446463 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.446776 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.446951 line       138     if memo is None:
            21:50:15.447028 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.447118 line       141     d = id(x)
            New var:....... d = 140085916724680
            21:50:15.447220 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.447322 line       143     if y is not _nil:
            21:50:15.447424 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.447502 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.447605 line       149     if copier:
            21:50:15.447711 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724680: {'name': 'dom_int_use_additive...to use an additive GP. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:15.447865 line       183     if y is not x:
            21:50:15.448000 line       184         memo[d] = y
            21:50:15.448097 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724680: {'name': 'dom_int_use_additive...o use an additive GP. ', 'type': <class 'int'>}]}
            21:50:15.448193 line       186     return y
            21:50:15.448308 return     186     return y
            Return value:.. {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:15.448430 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_use_additive_gp'
        21:50:15.448764 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_use_additive_gp': [False, None]}
        21:50:15.449102 line        62     if not opt_name.startswith('--'):
        21:50:15.449411 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_use_additive_gp'
        21:50:15.449690 line        64     if opt_name == '--options':
        21:50:15.449996 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_use_additive_gp',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            21:50:15.450290 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.450481 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.450572 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.450692 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W... 'option_strings': ['--dom_int_use_additive_gp']}
            21:50:15.450795 line      1327         if 'default' not in kwargs:
            21:50:15.450913 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.451013 line      1336         if not callable(action_class):
            21:50:15.451142 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_use_addi...er or not to use an additive GP. ', metavar=None)
            21:50:15.451251 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.451386 line      1342         if not callable(type_func):
            21:50:15.451516 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.451620 line      1347             try:
            21:50:15.451724 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.451888 line      1352         return self._add_action(action)
            21:50:15.452020 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_use_addi...er or not to use an additive GP. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.452186 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:15.452499 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.452810 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.452983 line       138     if memo is None:
            21:50:15.453061 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.453153 line       141     d = id(x)
            New var:....... d = 140085916724752
            21:50:15.453253 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.453354 line       143     if y is not _nil:
            21:50:15.453455 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.453533 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.453638 line       149     if copier:
            21:50:15.453743 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724752: {'name': 'dom_int_add_max_grou...the additive grouping. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:15.453898 line       183     if y is not x:
            21:50:15.454035 line       184         memo[d] = y
            21:50:15.454135 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724752: {'name': 'dom_int_add_max_grou...he additive grouping. ', 'type': <class 'int'>}]}
            21:50:15.454232 line       186     return y
            21:50:15.454348 return     186     return y
            Return value:.. {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:15.454474 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_add_max_group_size'
        21:50:15.454814 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_add_max_group_size': [6, None]}
        21:50:15.455157 line        62     if not opt_name.startswith('--'):
        21:50:15.455466 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_max_group_size'
        21:50:15.455746 line        64     if opt_name == '--options':
        21:50:15.456049 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_max_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            21:50:15.456343 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.456536 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.456627 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.456742 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m...ption_strings': ['--dom_int_add_max_group_size']}
            21:50:15.456844 line      1327         if 'default' not in kwargs:
            21:50:15.456962 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.457067 line      1336         if not callable(action_class):
            21:50:15.457192 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_max_...groups in the additive grouping. ', metavar=None)
            21:50:15.457301 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.457439 line      1342         if not callable(type_func):
            21:50:15.457571 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.457678 line      1347             try:
            21:50:15.457782 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.457947 line      1352         return self._add_action(action)
            21:50:15.458087 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_max_...groups in the additive grouping. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.458247 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:15.458559 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.458868 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.459045 line       138     if memo is None:
            21:50:15.459137 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.459213 line       141     d = id(x)
            New var:....... d = 140085916724824
            21:50:15.459311 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.459411 line       143     if y is not _nil:
            21:50:15.459511 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.459588 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.459690 line       149     if copier:
            21:50:15.459795 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724824: {'name': 'dom_int_add_grouping...ng algorithm, should be one of {randomised_ml}'}}
            Modified var:.. y = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:15.459938 line       183     if y is not x:
            21:50:15.460080 line       184         memo[d] = y
            21:50:15.460174 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724824: {'name': 'dom_int_add_grouping...g algorithm, should be one of {randomised_ml}'}]}
            21:50:15.460268 line       186     return y
            21:50:15.460382 return     186     return y
            Return value:.. {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:15.460503 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
        Modified var:.. opt_name = 'dom_int_add_grouping_criterion'
        21:50:15.460842 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
        21:50:15.461183 line        62     if not opt_name.startswith('--'):
        21:50:15.461490 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_grouping_criterion'
        21:50:15.461773 line        64     if opt_name == '--options':
        21:50:15.462083 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_grouping_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            21:50:15.462370 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.462560 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.462649 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.462764 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...n_strings': ['--dom_int_add_grouping_criterion']}
            21:50:15.462864 line      1327         if 'default' not in kwargs:
            21:50:15.462984 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.463089 line      1336         if not callable(action_class):
            21:50:15.463211 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_grou... should be one of {randomised_ml}', metavar=None)
            21:50:15.463318 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.463454 line      1342         if not callable(type_func):
            21:50:15.463585 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.463691 line      1347             try:
            21:50:15.463794 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.463959 line      1352         return self._add_action(action)
            21:50:15.464097 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_grou... should be one of {randomised_ml}', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.464256 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:15.464567 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.464875 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.465049 line       138     if memo is None:
            21:50:15.465142 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.465221 line       141     d = id(x)
            New var:....... d = 140085916724896
            21:50:15.465322 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.465424 line       143     if y is not _nil:
            21:50:15.465526 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.465604 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.465708 line       149     if copier:
            21:50:15.465814 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724896: {'name': 'dom_int_num_groups_p... to try per group size.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:15.465969 line       183     if y is not x:
            21:50:15.466118 line       184         memo[d] = y
            21:50:15.466209 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724896: {'name': 'dom_int_num_groups_p...to try per group size.', 'type': <class 'int'>}]}
            21:50:15.466302 line       186     return y
            21:50:15.466416 return     186     return y
            Return value:.. {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:15.466538 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_num_groups_per_group_size'
        21:50:15.466876 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_int_num_groups_per_group_size': [-1, None]}
        21:50:15.467217 line        62     if not opt_name.startswith('--'):
        21:50:15.467528 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_num_groups_per_group_size'
        21:50:15.467811 line        64     if opt_name == '--options':
        21:50:15.468130 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_num_groups_per_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            21:50:15.468415 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.468605 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.468696 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.468810 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...trings': ['--dom_int_num_groups_per_group_size']}
            21:50:15.468912 line      1327         if 'default' not in kwargs:
            21:50:15.469028 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.469138 line      1336         if not callable(action_class):
            21:50:15.469257 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_num_grou... of groups to try per group size.', metavar=None)
            21:50:15.469364 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.469501 line      1342         if not callable(type_func):
            21:50:15.469632 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.469738 line      1347             try:
            21:50:15.469842 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.470006 line      1352         return self._add_action(action)
            21:50:15.470150 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_num_grou... of groups to try per group size.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.470305 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:15.470614 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.470922 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.471114 line       138     if memo is None:
            21:50:15.471193 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.471268 line       141     d = id(x)
            New var:....... d = 140085916724968
            21:50:15.471367 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.471466 line       143     if y is not _nil:
            21:50:15.471567 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.471643 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.471746 line       149     if copier:
            21:50:15.471851 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724968: {'name': 'dom_int_add_group_si...he group size, should be one of {max,sampled}.'}}
            Modified var:.. y = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:15.471994 line       183     if y is not x:
            21:50:15.472142 line       184         memo[d] = y
            21:50:15.472230 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724968: {'name': 'dom_int_add_group_si...e group size, should be one of {max,sampled}.'}]}
            21:50:15.472322 line       186     return y
            21:50:15.472436 return     186     return y
            Return value:.. {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:15.472557 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
        Modified var:.. opt_name = 'dom_int_add_group_size_criterion'
        21:50:15.472892 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...int_add_group_size_criterion': ['sampled', None]}
        21:50:15.473234 line        62     if not opt_name.startswith('--'):
        21:50:15.473543 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_group_size_criterion'
        21:50:15.473824 line        64     if opt_name == '--options':
        21:50:15.474144 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_group_size_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            21:50:15.474428 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.474619 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.474708 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.474822 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...strings': ['--dom_int_add_group_size_criterion']}
            21:50:15.474923 line      1327         if 'default' not in kwargs:
            21:50:15.475038 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.475152 line      1336         if not callable(action_class):
            21:50:15.475270 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_grou..., should be one of {max,sampled}.', metavar=None)
            21:50:15.475377 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.475510 line      1342         if not callable(type_func):
            21:50:15.475641 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.475748 line      1347             try:
            21:50:15.475851 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.476015 line      1352         return self._add_action(action)
            21:50:15.476157 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_grou..., should be one of {max,sampled}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.476312 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.476622 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.476932 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.477121 line       138     if memo is None:
            21:50:15.477202 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.477278 line       141     d = id(x)
            New var:....... d = 140085916725040
            21:50:15.477376 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.477477 line       143     if y is not _nil:
            21:50:15.477580 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.477658 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.477761 line       149     if copier:
            21:50:15.477867 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725040: {'name': 'dom_int_esp_order', ...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.478023 line       183     if y is not x:
            21:50:15.478171 line       184         memo[d] = y
            21:50:15.478260 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725040: {'name': 'dom_int_esp_order', ...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:15.478353 line       186     return y
            21:50:15.478468 return     186     return y
            Return value:.. {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.478590 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_esp_order'
        21:50:15.478935 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_int_esp_order': [-1, None]}
        21:50:15.479280 line        62     if not opt_name.startswith('--'):
        21:50:15.479592 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_order'
        21:50:15.479877 line        64     if opt_name == '--options':
        21:50:15.480203 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.480494 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.480683 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.480772 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.480886 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde...rder', 'option_strings': ['--dom_int_esp_order']}
            21:50:15.480986 line      1327         if 'default' not in kwargs:
            21:50:15.481114 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.481215 line      1336         if not callable(action_class):
            21:50:15.481333 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_orde..., help='Order of the esp kernel. ', metavar=None)
            21:50:15.481440 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.481576 line      1342         if not callable(type_func):
            21:50:15.481706 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.481811 line      1347             try:
            21:50:15.481915 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.482087 line      1352         return self._add_action(action)
            21:50:15.482226 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_orde..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.482381 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:15.482694 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.483005 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.483193 line       138     if memo is None:
            21:50:15.483272 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.483351 line       141     d = id(x)
            New var:....... d = 140085916725112
            21:50:15.483451 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.483551 line       143     if y is not _nil:
            21:50:15.483653 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.483732 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.483835 line       149     if copier:
            21:50:15.483940 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725112: {'name': 'dom_int_esp_kernel_t...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:15.484091 line       183     if y is not x:
            21:50:15.484233 line       184         memo[d] = y
            21:50:15.484320 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725112: {'name': 'dom_int_esp_kernel_t...e of kernel. This depends on the application.'}]}
            21:50:15.484411 line       186     return y
            21:50:15.484523 return     186     return y
            Return value:.. {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:15.484642 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_int_esp_kernel_type'
        21:50:15.484979 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_esp_kernel_type': ['se', None]}
        21:50:15.485324 line        62     if not opt_name.startswith('--'):
        21:50:15.485635 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_kernel_type'
        21:50:15.485917 line        64     if opt_name == '--options':
        21:50:15.486243 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:15.486529 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.486718 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.486807 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.486921 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp... 'option_strings': ['--dom_int_esp_kernel_type']}
            21:50:15.487020 line      1327         if 'default' not in kwargs:
            21:50:15.487148 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.487248 line      1336         if not callable(action_class):
            21:50:15.487365 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_kern... This depends on the application.', metavar=None)
            21:50:15.487474 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.487610 line      1342         if not callable(type_func):
            21:50:15.487741 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.487847 line      1347             try:
            21:50:15.487950 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.488121 line      1352         return self._add_action(action)
            21:50:15.488260 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_kern... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.488416 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:15.488734 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.489047 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.489236 line       138     if memo is None:
            21:50:15.489314 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.489390 line       141     d = id(x)
            New var:....... d = 140085916725184
            21:50:15.489488 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.489587 line       143     if y is not _nil:
            21:50:15.489688 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.489765 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.489866 line       149     if copier:
            21:50:15.489971 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725184: {'name': 'dom_int_esp_matern_n...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:15.490119 line       183     if y is not x:
            21:50:15.490260 line       184         memo[d] = y
            21:50:15.490349 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725184: {'name': 'dom_int_esp_matern_n...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.490442 line       186     return y
            21:50:15.490555 return     186     return y
            Return value:.. {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:15.490675 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_int_esp_matern_nu'
        21:50:15.491018 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_int_esp_matern_nu': ['default', None]}
        21:50:15.491367 line        62     if not opt_name.startswith('--'):
        21:50:15.491682 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_matern_nu'
        21:50:15.491965 line        64     if opt_name == '--options':
        21:50:15.492291 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.492579 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.492769 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.492859 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.492973 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...', 'option_strings': ['--dom_int_esp_matern_nu']}
            21:50:15.493080 line      1327         if 'default' not in kwargs:
            21:50:15.493203 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.493302 line      1336         if not callable(action_class):
            21:50:15.493418 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_mate...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.493524 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.493661 line      1342         if not callable(type_func):
            21:50:15.493793 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.493899 line      1347             try:
            21:50:15.494003 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.494179 line      1352         return self._add_action(action)
            21:50:15.494313 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_mate...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.494466 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        21:50:15.494788 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.495118 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.495295 line       138     if memo is None:
            21:50:15.495372 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.495446 line       141     d = id(x)
            New var:....... d = 140085916749896
            21:50:15.495544 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.495647 line       143     if y is not _nil:
            21:50:15.495748 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.495824 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.495926 line       149     if copier:
            21:50:15.496030 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916749896: {'name': 'dom_disc_num_kernel_...': 'Kernel type for discrete numeric domains. '}}
            Modified var:.. y = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            21:50:15.496185 line       183     if y is not x:
            21:50:15.496322 line       184         memo[d] = y
            21:50:15.496408 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916749896: {'name': 'dom_disc_num_kernel_...: 'Kernel type for discrete numeric domains. '}]}
            21:50:15.496500 line       186     return y
            21:50:15.496613 return     186     return y
            Return value:.. {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        21:50:15.496732 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete numeric domains. '}
        Modified var:.. opt_name = 'dom_disc_num_kernel_type'
        21:50:15.497077 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...], 'dom_disc_num_kernel_type': ['default', None]}
        21:50:15.497413 line        62     if not opt_name.startswith('--'):
        21:50:15.497722 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_kernel_type'
        21:50:15.498004 line        64     if opt_name == '--options':
        21:50:15.498325 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete numeric domains. '}
            21:50:15.498608 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.498796 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.498885 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.498998 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...'option_strings': ['--dom_disc_num_kernel_type']}
            21:50:15.499109 line      1327         if 'default' not in kwargs:
            21:50:15.499227 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.499325 line      1336         if not callable(action_class):
            21:50:15.499442 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_ker...pe for discrete numeric domains. ', metavar=None)
            21:50:15.499548 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.499688 line      1342         if not callable(type_func):
            21:50:15.499818 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.499923 line      1347             try:
            21:50:15.500024 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.500202 line      1352         return self._add_action(action)
            21:50:15.500335 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_ker...pe for discrete numeric domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.500488 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.500799 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.501123 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.501298 line       138     if memo is None:
            21:50:15.501375 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.501449 line       141     d = id(x)
            New var:....... d = 140085916749968
            21:50:15.501548 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.501647 line       143     if y is not _nil:
            21:50:15.501749 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.501826 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.501928 line       149     if copier:
            21:50:15.502032 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916749968: {'name': 'dom_disc_num_use_sam... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.502198 line       183     if y is not x:
            21:50:15.502336 line       184         memo[d] = y
            21:50:15.502424 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916749968: {'name': 'dom_disc_num_use_sam...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:15.502517 line       186     return y
            21:50:15.502632 return     186     return y
            Return value:.. {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        21:50:15.502756 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_use_same_bandwidth'
        21:50:15.503102 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'dom_disc_num_use_same_bandwidth': [False, None]}
        21:50:15.503433 line        62     if not opt_name.startswith('--'):
        21:50:15.503747 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_use_same_bandwidth'
        21:50:15.504030 line        64     if opt_name == '--options':
        21:50:15.504350 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:15.504635 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.504824 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.504914 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.505029 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I..._strings': ['--dom_disc_num_use_same_bandwidth']}
            21:50:15.505142 line      1327         if 'default' not in kwargs:
            21:50:15.505260 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.505359 line      1336         if not callable(action_class):
            21:50:15.505476 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_use...e is se or matern. Default=False.', metavar=None)
            21:50:15.505583 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.505719 line      1342         if not callable(type_func):
            21:50:15.505849 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.505954 line      1347             try:
            21:50:15.506058 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.506234 line      1352         return self._add_action(action)
            21:50:15.506537 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_use...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.506699 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        21:50:15.507015 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.507346 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.507520 line       138     if memo is None:
            21:50:15.507597 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.507671 line       141     d = id(x)
            New var:....... d = 140085916750040
            21:50:15.507769 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.507868 line       143     if y is not _nil:
            21:50:15.507969 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.508046 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.508166 line       149     if copier:
            21:50:15.508273 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750040: {'name': 'dom_disc_num_matern_...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            21:50:15.508413 line       183     if y is not x:
            21:50:15.508547 line       184         memo[d] = y
            21:50:15.508633 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750040: {'name': 'dom_disc_num_matern_...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.508724 line       186     return y
            21:50:15.508836 return     186     return y
            Return value:.. {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        21:50:15.508956 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_disc_num_matern_nu'
        21:50:15.509309 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_disc_num_matern_nu': ['default', None]}
        21:50:15.509645 line        62     if not opt_name.startswith('--'):
        21:50:15.509958 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_matern_nu'
        21:50:15.510259 line        64     if opt_name == '--options':
        21:50:15.510569 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.510854 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.511044 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.511148 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.511265 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'..., 'option_strings': ['--dom_disc_num_matern_nu']}
            21:50:15.511366 line      1327         if 'default' not in kwargs:
            21:50:15.511481 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.511580 line      1336         if not callable(action_class):
            21:50:15.511697 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_mat...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.511802 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.511936 line      1342         if not callable(type_func):
            21:50:15.512076 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.512188 line      1347             try:
            21:50:15.512293 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.512458 line      1352         return self._add_action(action)
            21:50:15.512589 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_mat...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.512742 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.513055 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.513382 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.513557 line       138     if memo is None:
            21:50:15.513634 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.513710 line       141     d = id(x)
            New var:....... d = 140085916750112
            21:50:15.513808 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.513908 line       143     if y is not _nil:
            21:50:15.514009 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.514097 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.514205 line       149     if copier:
            21:50:15.514311 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750112: {'name': 'dom_disc_num_poly_or...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.514467 line       183     if y is not x:
            21:50:15.514604 line       184         memo[d] = y
            21:50:15.514692 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750112: {'name': 'dom_disc_num_poly_or... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:15.514785 line       186     return y
            21:50:15.514901 return     186     return y
            Return value:.. {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:15.515024 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_poly_order'
        21:50:15.515373 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'dom_disc_num_poly_order': [1, None]}
        21:50:15.515706 line        62     if not opt_name.startswith('--'):
        21:50:15.516016 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_poly_order'
        21:50:15.516320 line        64     if opt_name == '--options':
        21:50:15.516634 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:15.516919 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.517120 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.517213 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.517330 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order... 'option_strings': ['--dom_disc_num_poly_order']}
            21:50:15.517432 line      1327         if 'default' not in kwargs:
            21:50:15.517547 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.517646 line      1336         if not callable(action_class):
            21:50:15.517763 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_pol...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:15.517869 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.518004 line      1342         if not callable(type_func):
            21:50:15.518146 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.518254 line      1347             try:
            21:50:15.518357 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.518522 line      1352         return self._add_action(action)
            21:50:15.518655 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_pol...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.518809 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.519140 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.519454 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.519626 line       138     if memo is None:
            21:50:15.519703 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.519777 line       141     d = id(x)
            New var:....... d = 140085916750184
            21:50:15.519876 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.519976 line       143     if y is not _nil:
            21:50:15.520083 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.520167 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.520270 line       149     if copier:
            21:50:15.520379 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750184: {'name': 'dom_disc_num_esp_ord...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.520535 line       183     if y is not x:
            21:50:15.520669 line       184         memo[d] = y
            21:50:15.520757 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750184: {'name': 'dom_disc_num_esp_ord...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:15.520849 line       186     return y
            21:50:15.520962 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:15.521088 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_esp_order'
        21:50:15.521432 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... [1, None], 'dom_disc_num_esp_order': [-1, None]}
        21:50:15.521764 line        62     if not opt_name.startswith('--'):
        21:50:15.522085 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_order'
        21:50:15.522378 line        64     if opt_name == '--options':
        21:50:15.522686 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:15.522972 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.523175 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.523266 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.523380 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde..., 'option_strings': ['--dom_disc_num_esp_order']}
            21:50:15.523481 line      1327         if 'default' not in kwargs:
            21:50:15.523596 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.523695 line      1336         if not callable(action_class):
            21:50:15.523812 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp..., help='Order of the esp kernel. ', metavar=None)
            21:50:15.523919 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.524055 line      1342         if not callable(type_func):
            21:50:15.524196 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.524303 line      1347             try:
            21:50:15.524407 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.524575 line      1352         return self._add_action(action)
            21:50:15.524710 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.524864 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        21:50:15.525200 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.525514 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.525685 line       138     if memo is None:
            21:50:15.525762 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.525836 line       141     d = id(x)
            New var:....... d = 140085916750256
            21:50:15.525933 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.526032 line       143     if y is not _nil:
            21:50:15.526145 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.526224 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.526328 line       149     if copier:
            21:50:15.526433 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750256: {'name': 'dom_disc_num_esp_ker...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            21:50:15.526575 line       183     if y is not x:
            21:50:15.526708 line       184         memo[d] = y
            21:50:15.526794 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750256: {'name': 'dom_disc_num_esp_ker...e of kernel. This depends on the application.'}]}
            21:50:15.526885 line       186     return y
            21:50:15.526997 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        21:50:15.527128 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_disc_num_esp_kernel_type'
        21:50:15.527472 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'dom_disc_num_esp_kernel_type': ['se', None]}
        21:50:15.527809 line        62     if not opt_name.startswith('--'):
        21:50:15.528136 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_kernel_type'
        21:50:15.528422 line        64     if opt_name == '--options':
        21:50:15.528734 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:15.529018 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.529226 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.529318 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.529432 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ion_strings': ['--dom_disc_num_esp_kernel_type']}
            21:50:15.529533 line      1327         if 'default' not in kwargs:
            21:50:15.529648 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.529746 line      1336         if not callable(action_class):
            21:50:15.529862 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp... This depends on the application.', metavar=None)
            21:50:15.529967 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.530113 line      1342         if not callable(type_func):
            21:50:15.530245 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.530351 line      1347             try:
            21:50:15.530454 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.530619 line      1352         return self._add_action(action)
            21:50:15.530751 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.530903 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        21:50:15.531236 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.531551 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.531725 line       138     if memo is None:
            21:50:15.531802 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.531876 line       141     d = id(x)
            New var:....... d = 140085916750328
            21:50:15.531974 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.532080 line       143     if y is not _nil:
            21:50:15.532188 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.532267 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.532371 line       149     if copier:
            21:50:15.532476 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750328: {'name': 'dom_disc_num_esp_mat...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            21:50:15.532618 line       183     if y is not x:
            21:50:15.532757 line       184         memo[d] = y
            21:50:15.532844 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750328: {'name': 'dom_disc_num_esp_mat...lue for matern kernel. If negative, will fit.'}]}
            21:50:15.532936 line       186     return y
            21:50:15.533049 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        21:50:15.533182 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_disc_num_esp_matern_nu'
        21:50:15.533527 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_disc_num_esp_matern_nu': ['default', None]}
        21:50:15.533861 line        62     if not opt_name.startswith('--'):
        21:50:15.534189 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_matern_nu'
        21:50:15.534480 line        64     if opt_name == '--options':
        21:50:15.534790 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:15.535088 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.535285 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.535375 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.535488 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...ption_strings': ['--dom_disc_num_esp_matern_nu']}
            21:50:15.535588 line      1327         if 'default' not in kwargs:
            21:50:15.535702 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.535800 line      1336         if not callable(action_class):
            21:50:15.535914 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp...rn kernel. If negative, will fit.', metavar=None)
            21:50:15.536020 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.536167 line      1342         if not callable(type_func):
            21:50:15.536298 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.536404 line      1347             try:
            21:50:15.536507 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.536672 line      1352         return self._add_action(action)
            21:50:15.536807 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.536960 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        21:50:15.537294 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.537609 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.537780 line       138     if memo is None:
            21:50:15.537856 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.537930 line       141     d = id(x)
            New var:....... d = 140085916750400
            21:50:15.538026 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.538137 line       143     if y is not _nil:
            21:50:15.538239 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.538316 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.538418 line       149     if copier:
            21:50:15.538522 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750400: {'name': 'dom_disc_kernel_type...t', 'help': 'Kernel type for discrete domains.'}}
            Modified var:.. y = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            21:50:15.538663 line       183     if y is not x:
            21:50:15.538796 line       184         memo[d] = y
            21:50:15.538882 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750400: {'name': 'dom_disc_kernel_type...', 'help': 'Kernel type for discrete domains.'}]}
            21:50:15.538972 line       186     return y
            21:50:15.539093 return     186     return y
            Return value:.. {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        21:50:15.539216 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete domains.'}
        Modified var:.. opt_name = 'dom_disc_kernel_type'
        21:50:15.539556 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'dom_disc_kernel_type': ['default', None]}
        21:50:15.539892 line        62     if not opt_name.startswith('--'):
        21:50:15.540220 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_kernel_type'
        21:50:15.540508 line        64     if opt_name == '--options':
        21:50:15.540819 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete domains.'}
            21:50:15.541116 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.541311 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.541400 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.541512 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...e', 'option_strings': ['--dom_disc_kernel_type']}
            21:50:15.541611 line      1327         if 'default' not in kwargs:
            21:50:15.541726 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.541823 line      1336         if not callable(action_class):
            21:50:15.541938 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_kernel_...Kernel type for discrete domains.', metavar=None)
            21:50:15.542044 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.542191 line      1342         if not callable(type_func):
            21:50:15.542323 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.542428 line      1347             try:
            21:50:15.542531 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.542696 line      1352         return self._add_action(action)
            21:50:15.542827 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_kernel_...Kernel type for discrete domains.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.542980 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        21:50:15.543314 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.543630 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.543801 line       138     if memo is None:
            21:50:15.543878 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.543953 line       141     d = id(x)
            New var:....... d = 140085916750472
            21:50:15.544050 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.544164 line       143     if y is not _nil:
            21:50:15.544266 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.544344 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.544448 line       149     if copier:
            21:50:15.544553 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750472: {'name': 'dom_disc_hamming_use... of the hamming kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:15.544708 line       183     if y is not x:
            21:50:15.544844 line       184         memo[d] = y
            21:50:15.544936 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750472: {'name': 'dom_disc_hamming_use...of the hamming kernel.', 'type': <class 'int'>}]}
            21:50:15.545030 line       186     return y
            21:50:15.545158 return     186     return y
            Return value:.. {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        21:50:15.545284 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...s of the hamming kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_hamming_use_same_weight'
        21:50:15.545627 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...dom_disc_hamming_use_same_weight': [False, None]}
        21:50:15.545966 line        62     if not opt_name.startswith('--'):
        21:50:15.546297 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_hamming_use_same_weight'
        21:50:15.546588 line        64     if opt_name == '--options':
        21:50:15.546899 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_hamming_use_same_weight',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:15.547199 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.547390 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.547480 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.547595 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...strings': ['--dom_disc_hamming_use_same_weight']}
            21:50:15.547696 line      1327         if 'default' not in kwargs:
            21:50:15.547812 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.547911 line      1336         if not callable(action_class):
            21:50:15.548028 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_hamming...dimensions of the hamming kernel.', metavar=None)
            21:50:15.548146 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.548283 line      1342         if not callable(type_func):
            21:50:15.548414 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.548520 line      1347             try:
            21:50:15.548624 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.548789 line      1352         return self._add_action(action)
            21:50:15.548922 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_hamming...dimensions of the hamming kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.549083 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        21:50:15.549411 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.549725 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.549897 line       138     if memo is None:
            21:50:15.549973 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.550046 line       141     d = id(x)
            New var:....... d = 140085916750544
            21:50:15.550156 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.550256 line       143     if y is not _nil:
            21:50:15.550356 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.550433 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.550535 line       149     if copier:
            21:50:15.550639 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750544: {'name': 'dom_nn_kernel_type',...default', 'help': 'Kernel type for NN Domains.'}}
            Modified var:.. y = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            21:50:15.550782 line       183     if y is not x:
            21:50:15.550914 line       184         memo[d] = y
            21:50:15.550999 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750544: {'name': 'dom_nn_kernel_type',...efault', 'help': 'Kernel type for NN Domains.'}]}
            21:50:15.551095 line       186     return y
            21:50:15.551213 return     186     return y
            Return value:.. {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        21:50:15.551333 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for NN Domains.'}
        Modified var:.. opt_name = 'dom_nn_kernel_type'
        21:50:15.551674 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_nn_kernel_type': ['default', None]}
        21:50:15.552010 line        62     if not opt_name.startswith('--'):
        21:50:15.552339 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_nn_kernel_type'
        21:50:15.552624 line        64     if opt_name == '--options':
        21:50:15.552935 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_nn_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for NN Domains.'}
            21:50:15.553232 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.553423 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.553513 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.553626 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...ype', 'option_strings': ['--dom_nn_kernel_type']}
            21:50:15.553724 line      1327         if 'default' not in kwargs:
            21:50:15.553840 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.553938 line      1336         if not callable(action_class):
            21:50:15.554053 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_nn_kernel_ty...help='Kernel type for NN Domains.', metavar=None)
            21:50:15.554170 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.554305 line      1342         if not callable(type_func):
            21:50:15.554435 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.554540 line      1347             try:
            21:50:15.554643 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.554807 line      1352         return self._add_action(action)
            21:50:15.554938 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_nn_kernel_ty...help='Kernel type for NN Domains.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.555104 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        21:50:15.555427 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.555740 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.555912 line       138     if memo is None:
            21:50:15.555988 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.556061 line       141     d = id(x)
            New var:....... d = 140085916750616
            21:50:15.556172 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.556272 line       143     if y is not _nil:
            21:50:15.556372 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.556449 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.556551 line       149     if copier:
            21:50:15.556655 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750616: {'name': 'otmann_dist_type', '...type of distance. Should be lp, emd or lp-emd.'}}
            Modified var:.. y = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            21:50:15.556795 line       183     if y is not x:
            21:50:15.556929 line       184         memo[d] = y
            21:50:15.557014 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750616: {'name': 'otmann_dist_type', '...ype of distance. Should be lp, emd or lp-emd.'}]}
            21:50:15.557115 line       186     return y
            21:50:15.557234 return     186     return y
            Return value:.. {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        21:50:15.557355 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'lp-emd', 'help':... type of distance. Should be lp, emd or lp-emd.'}
        Modified var:.. opt_name = 'otmann_dist_type'
        21:50:15.557694 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'otmann_dist_type': ['lp-emd', None]}
        21:50:15.558030 line        62     if not opt_name.startswith('--'):
        21:50:15.558359 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_dist_type'
        21:50:15.558646 line        64     if opt_name == '--options':
        21:50:15.558956 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_dist_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'lp-emd', 'help':... type of distance. Should be lp, emd or lp-emd.'}
            21:50:15.559253 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.559443 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.559534 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.559649 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'lp-emd', 'help':..._type', 'option_strings': ['--otmann_dist_type']}
            21:50:15.559750 line      1327         if 'default' not in kwargs:
            21:50:15.559865 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.559963 line      1336         if not callable(action_class):
            21:50:15.560085 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_dist_type...nce. Should be lp, emd or lp-emd.', metavar=None)
            21:50:15.560196 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.560331 line      1342         if not callable(type_func):
            21:50:15.560462 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.560567 line      1347             try:
            21:50:15.560672 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.560837 line      1352         return self._add_action(action)
            21:50:15.560968 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_dist_type...nce. Should be lp, emd or lp-emd.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.561139 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        21:50:15.561459 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.561781 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.561954 line       138     if memo is None:
            21:50:15.562031 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.562116 line       141     d = id(x)
            New var:....... d = 140085916750688
            21:50:15.562218 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.562318 line       143     if y is not _nil:
            21:50:15.562419 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.562496 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.562599 line       149     if copier:
            21:50:15.562705 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750688: {'name': 'otmann_kernel_type',...d be one of lp, emd, lpemd_sum, or lpemd_prod.'}}
            Modified var:.. y = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:15.562848 line       183     if y is not x:
            21:50:15.562982 line       184         memo[d] = y
            21:50:15.563074 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750688: {'name': 'otmann_kernel_type',... be one of lp, emd, lpemd_sum, or lpemd_prod.'}]}
            21:50:15.563172 line       186     return y
            21:50:15.563287 return     186     return y
            Return value:.. {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        21:50:15.563408 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'lpemd_sum', 'hel...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        Modified var:.. opt_name = 'otmann_kernel_type'
        21:50:15.563755 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'otmann_kernel_type': ['lpemd_sum', None]}
        21:50:15.564108 line        62     if not opt_name.startswith('--'):
        21:50:15.564426 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_kernel_type'
        21:50:15.564713 line        64     if opt_name == '--options':
        21:50:15.565025 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'lpemd_sum', 'hel...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:15.565325 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.565516 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.565605 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.565725 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'lpemd_sum', 'hel...ype', 'option_strings': ['--otmann_kernel_type']}
            21:50:15.565826 line      1327         if 'default' not in kwargs:
            21:50:15.565941 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.566039 line      1336         if not callable(action_class):
            21:50:15.566168 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_kernel_ty...p, emd, lpemd_sum, or lpemd_prod.', metavar=None)
            21:50:15.566275 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.566409 line      1342         if not callable(type_func):
            21:50:15.566540 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.566646 line      1347             try:
            21:50:15.566751 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.566917 line      1352         return self._add_action(action)
            21:50:15.567050 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_kernel_ty...p, emd, lpemd_sum, or lpemd_prod.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.567219 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        21:50:15.567538 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.567853 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.568026 line       138     if memo is None:
            21:50:15.568115 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.568193 line       141     d = id(x)
            New var:....... d = 140085916750760
            21:50:15.568292 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.568392 line       143     if y is not _nil:
            21:50:15.568494 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.568571 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.568675 line       149     if copier:
            21:50:15.568781 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750760: {'name': 'otmann_choose_mislab... and otmann_struct_coeffs should be non-empty.'}}
            Modified var:.. y = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            21:50:15.568924 line       183     if y is not x:
            21:50:15.569059 line       184         memo[d] = y
            21:50:15.569158 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750760: {'name': 'otmann_choose_mislab...and otmann_struct_coeffs should be non-empty.'}]}
            21:50:15.569253 line       186     return y
            21:50:15.569370 return     186     return y
            Return value:.. {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        21:50:15.569497 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'use_given', 'hel...s and otmann_struct_coeffs should be non-empty.'}
        Modified var:.. opt_name = 'otmann_choose_mislabel_struct_coeffs'
        21:50:15.569842 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ose_mislabel_struct_coeffs': ['use_given', None]}
        21:50:15.570199 line        62     if not opt_name.startswith('--'):
        21:50:15.570518 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_choose_mislabel_struct_coeffs'
        21:50:15.570810 line        64     if opt_name == '--options':
        21:50:15.571133 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_choose_mislabel_struct_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': 'use_given', 'hel...s and otmann_struct_coeffs should be non-empty.'}
            21:50:15.571426 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.571615 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.571705 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.571821 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'use_given', 'hel...ngs': ['--otmann_choose_mislabel_struct_coeffs']}
            21:50:15.571922 line      1327         if 'default' not in kwargs:
            21:50:15.572038 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.572148 line      1336         if not callable(action_class):
            21:50:15.572266 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_choose_mi...truct_coeffs should be non-empty.', metavar=None)
            21:50:15.572374 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.572511 line      1342         if not callable(type_func):
            21:50:15.572644 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.572752 line      1347             try:
            21:50:15.572858 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.573026 line      1352         return self._add_action(action)
            21:50:15.573177 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_choose_mi...truct_coeffs should be non-empty.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.573336 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        21:50:15.573658 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.573973 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.574162 line       138     if memo is None:
            21:50:15.574240 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.574315 line       141     d = id(x)
            New var:....... d = 140085916750832
            21:50:15.574414 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.574513 line       143     if y is not _nil:
            21:50:15.574614 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.574691 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.574793 line       149     if copier:
            21:50:15.574898 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750832: {'name': 'otmann_mislabel_coef...ied as a string. If -1, it means we will tune.'}}
            Modified var:.. y = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            21:50:15.575040 line       183     if y is not x:
            21:50:15.575186 line       184         memo[d] = y
            21:50:15.575275 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750832: {'name': 'otmann_mislabel_coef...ed as a string. If -1, it means we will tune.'}]}
            21:50:15.575366 line       186     return y
            21:50:15.575480 return     186     return y
            Return value:.. {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        21:50:15.575602 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '1.0-1.0-1.0-1.0'...fied as a string. If -1, it means we will tune.'}
        Modified var:.. opt_name = 'otmann_mislabel_coeffs'
        21:50:15.575944 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_mislabel_coeffs': ['1.0-1.0-1.0-1.0', None]}
        21:50:15.576297 line        62     if not opt_name.startswith('--'):
        21:50:15.576616 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_mislabel_coeffs'
        21:50:15.576905 line        64     if opt_name == '--options':
        21:50:15.577229 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_mislabel_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': '1.0-1.0-1.0-1.0'...fied as a string. If -1, it means we will tune.'}
            21:50:15.577517 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.577704 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.577794 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.577909 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '1.0-1.0-1.0-1.0'..., 'option_strings': ['--otmann_mislabel_coeffs']}
            21:50:15.578013 line      1327         if 'default' not in kwargs:
            21:50:15.578167 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.578273 line      1336         if not callable(action_class):
            21:50:15.578391 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_mislabel_...ng. If -1, it means we will tune.', metavar=None)
            21:50:15.578498 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.578632 line      1342         if not callable(type_func):
            21:50:15.578763 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.578869 line      1347             try:
            21:50:15.578972 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.579148 line      1352         return self._add_action(action)
            21:50:15.579286 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_mislabel_...ng. If -1, it means we will tune.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.579440 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        21:50:15.579757 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.580081 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.580264 line       138     if memo is None:
            21:50:15.580341 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.580416 line       141     d = id(x)
            New var:....... d = 140085916750904
            21:50:15.580513 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.580612 line       143     if y is not _nil:
            21:50:15.580712 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.580789 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.580892 line       149     if copier:
            21:50:15.580997 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750904: {'name': 'otmann_struct_coeffs...ied as a string. If -1, it means we will tune.'}}
            Modified var:.. y = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            21:50:15.581149 line       183     if y is not x:
            21:50:15.581291 line       184         memo[d] = y
            21:50:15.581378 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750904: {'name': 'otmann_struct_coeffs...ed as a string. If -1, it means we will tune.'}]}
            21:50:15.581470 line       186     return y
            21:50:15.581585 return     186     return y
            Return value:.. {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        21:50:15.581707 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '0.1-0.25-0.61-1....fied as a string. If -1, it means we will tune.'}
        Modified var:.. opt_name = 'otmann_struct_coeffs'
        21:50:15.582056 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_struct_coeffs': ['0.1-0.25-0.61-1.5', None]}
        21:50:15.582407 line        62     if not opt_name.startswith('--'):
        21:50:15.582723 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_struct_coeffs'
        21:50:15.583013 line        64     if opt_name == '--options':
        21:50:15.583344 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_struct_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': '0.1-0.25-0.61-1....fied as a string. If -1, it means we will tune.'}
            21:50:15.583632 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.583820 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.583909 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.584022 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '0.1-0.25-0.61-1....s', 'option_strings': ['--otmann_struct_coeffs']}
            21:50:15.584138 line      1327         if 'default' not in kwargs:
            21:50:15.584256 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.584356 line      1336         if not callable(action_class):
            21:50:15.584471 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_struct_co...ng. If -1, it means we will tune.', metavar=None)
            21:50:15.584578 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132cdb70>
            21:50:15.584711 line      1342         if not callable(type_func):
            21:50:15.584839 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.584945 line      1347             try:
            21:50:15.585048 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.585224 line      1352         return self._add_action(action)
            21:50:15.585356 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_struct_co...ng. If -1, it means we will tune.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.585507 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        21:50:15.585828 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.586159 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.586339 line       138     if memo is None:
            21:50:15.586418 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.586493 line       141     d = id(x)
            New var:....... d = 140085916750976
            21:50:15.586591 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.586692 line       143     if y is not _nil:
            21:50:15.586794 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.586873 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.586977 line       149     if copier:
            21:50:15.587097 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750976: {'name': 'otmann_lp_power', 'r...istance for the kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            21:50:15.587257 line       183     if y is not x:
            21:50:15.587395 line       184         memo[d] = y
            21:50:15.587484 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750976: {'name': 'otmann_lp_power', 'r...stance for the kernel.', 'type': <class 'int'>}]}
            21:50:15.587577 line       186     return y
            21:50:15.587692 return     186     return y
            Return value:.. {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        21:50:15.587813 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'otmann_lp_power'
        21:50:15.588170 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...5-0.61-1.5', None], 'otmann_lp_power': [1, None]}
        21:50:15.588511 line        62     if not opt_name.startswith('--'):
        21:50:15.588827 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_lp_power'
        21:50:15.589132 line        64     if opt_name == '--options':
        21:50:15.589454 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_lp_power',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            21:50:15.589743 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.589933 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.590024 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.590155 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'The p..._power', 'option_strings': ['--otmann_lp_power']}
            21:50:15.590259 line      1327         if 'default' not in kwargs:
            21:50:15.590380 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.590481 line      1336         if not callable(action_class):
            21:50:15.590598 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_lp_power'...n the LP distance for the kernel.', metavar=None)
            21:50:15.590706 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.590843 line      1342         if not callable(type_func):
            21:50:15.590974 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.591087 line      1347             try:
            21:50:15.591197 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.591365 line      1352         return self._add_action(action)
            21:50:15.591499 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_lp_power'...n the LP distance for the kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.591655 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        21:50:15.591978 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.592317 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.592492 line       138     if memo is None:
            21:50:15.592570 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.592648 line       141     d = id(x)
            New var:....... d = 140085916751048
            21:50:15.592748 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.592848 line       143     if y is not _nil:
            21:50:15.592950 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.593027 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.593147 line       149     if copier:
            21:50:15.593255 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916751048: {'name': 'otmann_emd_power', '...istance for the kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            21:50:15.593412 line       183     if y is not x:
            21:50:15.593550 line       184         memo[d] = y
            21:50:15.593639 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916751048: {'name': 'otmann_emd_power', '...stance for the kernel.', 'type': <class 'int'>}]}
            21:50:15.593733 line       186     return y
            21:50:15.593849 return     186     return y
            Return value:.. {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        21:50:15.593971 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 2, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'otmann_emd_power'
        21:50:15.594336 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...power': [1, None], 'otmann_emd_power': [2, None]}
        21:50:15.594679 line        62     if not opt_name.startswith('--'):
        21:50:15.594998 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_emd_power'
        21:50:15.595311 line        64     if opt_name == '--options':
        21:50:15.595630 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_emd_power',)
            Starting var:.. kwargs = {'required': False, 'default': 2, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            21:50:15.595923 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.596129 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.596223 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.596338 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 2, 'help': 'The p...power', 'option_strings': ['--otmann_emd_power']}
            21:50:15.596442 line      1327         if 'default' not in kwargs:
            21:50:15.596559 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.596658 line      1336         if not callable(action_class):
            21:50:15.596774 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_emd_power... the EMD distance for the kernel.', metavar=None)
            21:50:15.596883 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.597021 line      1342         if not callable(type_func):
            21:50:15.597164 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.597272 line      1347             try:
            21:50:15.597376 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.597544 line      1352         return self._add_action(action)
            21:50:15.597677 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_emd_power... the EMD distance for the kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.597831 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        21:50:15.598170 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.598500 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.598674 line       138     if memo is None:
            21:50:15.598752 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.598828 line       141     d = id(x)
            New var:....... d = 140085916751120
            21:50:15.598934 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.599035 line       143     if y is not _nil:
            21:50:15.599152 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.599233 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.599337 line       149     if copier:
            21:50:15.599443 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916751120: {'name': 'otmann_non_assignmen... the OTMANN distance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:15.599600 line       183     if y is not x:
            21:50:15.599735 line       184         memo[d] = y
            21:50:15.599824 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916751120: {'name': 'otmann_non_assignmen...the OTMANN distance.', 'type': <class 'float'>}]}
            21:50:15.599918 line       186     return y
            21:50:15.600035 return     186     return y
            Return value:.. {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        21:50:15.600172 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1.0, 'help': 'The...r the OTMANN distance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'otmann_non_assignment_penalty'
        21:50:15.600525 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:15.600874 line        62     if not opt_name.startswith('--'):
        21:50:15.601216 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_non_assignment_penalty'
        21:50:15.601514 line        64     if opt_name == '--options':
        21:50:15.601831 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_non_assignment_penalty',)
            Starting var:.. kwargs = {'required': False, 'default': 1.0, 'help': 'The...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:15.602138 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.602331 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.602423 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.602539 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1.0, 'help': 'The...on_strings': ['--otmann_non_assignment_penalty']}
            21:50:15.602642 line      1327         if 'default' not in kwargs:
            21:50:15.602759 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.602858 line      1336         if not callable(action_class):
            21:50:15.602977 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_non_assig... penalty for the OTMANN distance.', metavar=None)
            21:50:15.603094 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.603238 line      1342         if not callable(type_func):
            21:50:15.603370 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.603477 line      1347             try:
            21:50:15.603582 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.603747 line      1352         return self._add_action(action)
            21:50:15.603880 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_non_assig... penalty for the OTMANN distance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.604034 line        58   for elem in list_of_options:
        21:50:15.604371 line        68   if cmd_line:
        21:50:15.604661 line        71     args = parser.parse_args(args=[])
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = []
            Starting var:.. namespace = None
            21:50:15.604954 call      1733     def parse_args(self, args=None, namespace=None):
            21:50:15.605154 line      1734         args, argv = self.parse_known_args(args, namespace)
            Modified var:.. args = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
            New var:....... argv = []
            21:50:15.606034 line      1735         if argv:
            21:50:15.606288 line      1738         return args
            21:50:15.606468 return    1738         return args
            Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... args = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        21:50:15.606764 line        72   for key in opt_names_default_parsed:
        New var:....... key = 'moo_strategy'
        21:50:15.607228 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...e], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:15.607643 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_scalarisation'
        21:50:15.608056 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.608487 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_weight_sampler'
        21:50:15.608871 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.609292 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_reference_point'
        21:50:15.609675 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.610094 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moo_gpb_prior_means'
        21:50:15.610484 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.610894 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'max_num_steps'
        21:50:15.611288 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.611703 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'capital_type'
        21:50:15.612094 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.612511 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mode'
        21:50:15.612894 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.613323 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'build_new_model_every'
        21:50:15.613711 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.614134 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'report_model_on_each_build'
        21:50:15.614518 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.614927 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'report_results_every'
        21:50:15.615321 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.615732 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_capital'
        21:50:15.616127 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.616543 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_capital_frac'
        21:50:15.616927 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.617350 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'num_init_evals'
        21:50:15.617734 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.618153 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'prev_evaluations'
        21:50:15.618541 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.618951 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'get_initial_qinfos'
        21:50:15.619352 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.619763 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_method'
        21:50:15.620159 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.620569 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_load_from_and_save_to'
        21:50:15.620950 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.621373 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_load_from'
        21:50:15.621756 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.622184 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_save_to'
        21:50:15.622568 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.622977 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_save_every'
        21:50:15.623373 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.623782 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_report_on_each_save'
        21:50:15.624175 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.624585 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq'
        21:50:15.624967 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.625395 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_probs'
        21:50:15.625778 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.626206 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_opt_method'
        21:50:15.626594 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.627009 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'handle_parallel'
        21:50:15.627402 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.627812 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_opt_max_evals'
        21:50:15.628212 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.628626 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_hp_tune_criterion'
        21:50:15.629010 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.629433 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_hp_tune_probs'
        21:50:15.629817 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.630239 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_ml_hp_tune_opt'
        21:50:15.630627 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.631038 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_method'
        21:50:15.631436 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.631847 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_burn'
        21:50:15.632244 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.632658 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_offset'
        21:50:15.633042 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.633463 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'rand_exp_sampling_replace'
        21:50:15.633847 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.634275 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mf_strategy'
        21:50:15.634660 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.635079 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_prior_mean'
        21:50:15.635468 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.635879 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'shrink_kernel_with_time'
        21:50:15.636275 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.636687 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'perturb_thresh'
        21:50:15.637078 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.637498 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'track_every_time_step'
        21:50:15.637885 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.638307 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'next_pt_std_thresh'
        21:50:15.638690 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.639110 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'nn_report_results_every'
        21:50:15.639495 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.639907 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_criterion'
        21:50:15.640307 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.640721 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_probs'
        21:50:15.641114 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.641531 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'ml_hp_tune_opt'
        21:50:15.641916 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.642344 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_max_evals'
        21:50:15.642728 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.643154 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'handle_non_psd_kernels'
        21:50:15.643540 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.643950 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func'
        21:50:15.644348 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.644760 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func_type'
        21:50:15.645153 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.645565 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func_const'
        21:50:15.645947 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.646376 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_type'
        21:50:15.646758 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.647182 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_label'
        21:50:15.647572 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.647983 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_value'
        21:50:15.648378 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.648789 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_method'
        21:50:15.649190 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.649604 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_burn'
        21:50:15.649988 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.650413 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_offset'
        21:50:15.650797 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.651224 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_kernel_type'
        21:50:15.651609 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.652020 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_use_same_bandwidth'
        21:50:15.652421 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.652835 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_matern_nu'
        21:50:15.653232 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.653644 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_poly_order'
        21:50:15.654028 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.654450 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_use_additive_gp'
        21:50:15.654836 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.655272 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_max_group_size'
        21:50:15.655659 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.656085 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_grouping_criterion'
        21:50:15.656474 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.656891 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_num_groups_per_group_size'
        21:50:15.657286 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.657697 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_group_size_criterion'
        21:50:15.658090 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.658510 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_order'
        21:50:15.658895 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.659319 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_kernel_type'
        21:50:15.659702 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.660122 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_matern_nu'
        21:50:15.660507 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.660918 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_kernel_type'
        21:50:15.661319 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.661733 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_use_same_bandwidth'
        21:50:15.662132 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.662545 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_matern_nu'
        21:50:15.662928 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.663353 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_poly_order'
        21:50:15.663736 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.664163 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_use_additive_gp'
        21:50:15.664549 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.664959 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_max_group_size'
        21:50:15.665356 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.665769 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_grouping_criterion'
        21:50:15.666164 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.666576 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_num_groups_per_group_size'
        21:50:15.666960 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.667390 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_group_size_criterion'
        21:50:15.667774 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.668201 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_order'
        21:50:15.668588 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.669000 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_kernel_type'
        21:50:15.669394 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.669805 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_matern_nu'
        21:50:15.670208 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.670622 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_kernel_type'
        21:50:15.671006 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.671433 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_use_same_bandwidth'
        21:50:15.671818 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.672246 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_matern_nu'
        21:50:15.672631 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.673042 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_poly_order'
        21:50:15.673443 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.673857 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_order'
        21:50:15.674257 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.674669 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_kernel_type'
        21:50:15.675052 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.675473 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_matern_nu'
        21:50:15.675857 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.676285 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_kernel_type'
        21:50:15.676671 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.677091 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_hamming_use_same_weight'
        21:50:15.677479 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.677889 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_nn_kernel_type'
        21:50:15.678283 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.678697 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_dist_type'
        21:50:15.679089 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.679506 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_kernel_type'
        21:50:15.679890 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.680314 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_choose_mislabel_struct_coeffs'
        21:50:15.680697 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.681119 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_mislabel_coeffs'
        21:50:15.681503 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.681912 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_struct_coeffs'
        21:50:15.682310 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.682723 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_lp_power'
        21:50:15.683117 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:15.683529 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_emd_power'
        21:50:15.683914 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...2], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:15.684349 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_non_assignment_penalty'
        21:50:15.684762 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal... 2], 'otmann_non_assignment_penalty': [1.0, 1.0]}
        21:50:15.685191 line        72   for key in opt_names_default_parsed:
        21:50:15.685607 line        74   _print_options(opt_names_default_parsed, descr, reporter)
            Starting var:.. ondp = {'moo_strategy': ['moors', 'moors'], 'moors_scal... 2], 'otmann_non_assignment_penalty': [1.0, 1.0]}
            Starting var:.. desc = 'Algorithm'
            Starting var:.. reporter = None
            21:50:15.685995 call        39 def _print_options(ondp, desc, reporter):
            21:50:15.686213 line        41   if reporter is None:
            21:50:15.686345 line        42     return
            21:50:15.686472 return      42     return
            Return value:.. None
        21:50:15.686629 line        76   if partial_options is not None:
        21:50:15.687016 line        84   return args
        21:50:15.687411 return      84   return args
        Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    New var:....... opt_options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
    21:50:15.687922 line       137   options = Namespace() if options is None else options
    21:50:15.688179 line       138   for attr in vars(options):
    New var:....... attr = 'report_results_every'
    21:50:15.688363 line       139     setattr(opt_options, attr, getattr(options, attr))
    21:50:15.688572 line       138   for attr in vars(options):
    Modified var:.. attr = 'init_capital'
    21:50:15.688753 line       139     setattr(opt_options, attr, getattr(options, attr))
    21:50:15.688962 line       138   for attr in vars(options):
    Modified var:.. attr = 'init_capital_frac'
    21:50:15.689155 line       139     setattr(opt_options, attr, getattr(options, attr))
    21:50:15.689364 line       138   for attr in vars(options):
    Modified var:.. attr = 'num_init_evals'
    21:50:15.689545 line       139     setattr(opt_options, attr, getattr(options, attr))
    21:50:15.689753 line       138   for attr in vars(options):
    21:50:15.689931 line       141   opt_options.capital_type = 'return_value' if capital_type == 'num_evals' \
    21:50:15.690121 line       143   return opt_options
    21:50:15.690300 return     143   return opt_options
    Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
Modified var:.. options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
21:50:15.690598 line        87   worker_manager = get_worker_manager_from_type(num_workers=num_workers,
21:50:15.690875 line        88                      worker_manager_type=worker_manager, capital_type=capital_type)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    Starting var:.. num_workers = 1
    Starting var:.. worker_manager_type = 'default'
    Starting var:.. capital_type = 'num_evals'
    Starting var:.. tmp_dir = None
    Starting var:.. args = ()
    Starting var:.. kwargs = {}
    21:50:15.691108 call        38 def get_worker_manager_from_type(num_workers=1, worker_manager_type='default',
    21:50:15.691346 line        43   if isinstance(worker_manager_type, AbstractWorkerManager):
    21:50:15.691428 line        47   if worker_manager_type == 'default':
    21:50:15.691503 line        48     if capital_type in ['return_value', 'num_evals']:
    21:50:15.691576 line        49       _wm_type = 'synthetic'
    New var:....... _wm_type = 'synthetic'
    21:50:15.691649 line        59   if _wm_type == 'synthetic':
    21:50:15.691746 line        60     return SyntheticWorkerManager(num_workers=num_workers, *args, **kwargs)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/worker_manager.py
        Starting var:.. self = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
        Starting var:.. num_workers = 1
        Starting var:.. time_distro = 'caller_eval_cost'
        Starting var:.. time_distro_params = None
        Starting var:.. __class__ = <class 'dragonfly.exd.worker_manager.SyntheticWorkerManager'>
        21:50:15.691824 call       110   def __init__(self, num_workers, time_distro='caller_eval_cost',
        21:50:15.692141 line       113     self.worker_pipe = None
        21:50:15.692219 line       114     super(SyntheticWorkerManager, self).__init__(num_workers)
            Starting var:.. self = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
            Starting var:.. worker_ids = 1
            21:50:15.692293 call        33   def __init__(self, worker_ids):
            21:50:15.692405 line        35     if hasattr(worker_ids, '__iter__'):
            21:50:15.692472 line        38       self.worker_ids = list(range(worker_ids))
            21:50:15.692539 line        39     self.num_workers = len(self.worker_ids)
            21:50:15.692605 line        41     self.experiment_designer = None
            21:50:15.692669 line        42     self.latest_results = None
            21:50:15.692734 line        44     self.reset()
            21:50:15.692813 return      44     self.reset()
            Return value:.. None
        21:50:15.692907 line       116     self.time_distro = time_distro
        21:50:15.692980 line       117     self.time_distro_params = time_distro_params
        21:50:15.693051 line       118     self.time_sampler = None
        21:50:15.693134 line       119     self._set_up_time_sampler()
            Starting var:.. self = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
            21:50:15.693212 call       121   def _set_up_time_sampler(self):
            21:50:15.693308 line       123     self.time_distro_params = Namespace() if self.time_distro_params is None else \
            21:50:15.693380 line       125     if self.time_distro == 'caller_eval_cost':
            21:50:15.693446 line       126       pass
            21:50:15.693510 return     126       pass
            Return value:.. None
        21:50:15.693601 return     119     self._set_up_time_sampler()
        Return value:.. None
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    21:50:15.693700 return      60     return SyntheticWorkerManager(num_workers=num_workers, *args, **kwargs)
    Return value:.. <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
Modified var:.. worker_manager = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
21:50:15.693827 line        90   if opt_method == 'bo':
21:50:15.694128 line        91     options = preprocess_options_for_gp_bandits(options, config, 'moo',
21:50:15.694353 line        92                                                 converted_cp_to_euclidean)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    Starting var:.. options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
    Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
    Starting var:.. prob = 'moo'
    Starting var:.. converted_cp_to_euclidean = False
    21:50:15.694578 call       271 def preprocess_options_for_gp_bandits(options, config, prob, converted_cp_to_euclidean):
    21:50:15.694895 line       275   options = Namespace(**vars(options)) # Make a new copy
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
        Starting var:.. self = Namespace()
        Starting var:.. kwargs = {'moo_strategy': 'moors', 'moors_scalarisation':..._power': 2, 'otmann_non_assignment_penalty': 1.0}
        21:50:15.695109 call      1211     def __init__(self, **kwargs):
        21:50:15.695299 line      1212         for name in kwargs:
        New var:....... name = 'moo_strategy'
        21:50:15.695405 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(moo_strategy='moors')
        21:50:15.695534 line      1212         for name in kwargs:
        Modified var:.. name = 'moors_scalarisation'
        21:50:15.695664 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(moo_strategy='moors', moors_scalarisation='tchebychev')
        21:50:15.695793 line      1212         for name in kwargs:
        Modified var:.. name = 'moors_weight_sampler'
        21:50:15.695924 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(moo_strategy='moors', moors_scalarisat...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.696052 line      1212         for name in kwargs:
        Modified var:.. name = 'moors_reference_point'
        21:50:15.696197 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(moo_strategy='moors', moors_reference_...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.696330 line      1212         for name in kwargs:
        Modified var:.. name = 'moo_gpb_prior_means'
        21:50:15.696463 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(moo_gpb_prior_means=None, moo_strategy...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.696596 line      1212         for name in kwargs:
        Modified var:.. name = 'max_num_steps'
        21:50:15.696730 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(max_num_steps=10000000.0, moo_gpb_prio...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.696862 line      1212         for name in kwargs:
        Modified var:.. name = 'capital_type'
        21:50:15.696996 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(capital_type='return_value', max_num_s...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.697145 line      1212         for name in kwargs:
        Modified var:.. name = 'mode'
        21:50:15.697282 line      1213             setattr(self, name, kwargs[name])
        21:50:15.697417 line      1212         for name in kwargs:
        Modified var:.. name = 'build_new_model_every'
        21:50:15.697530 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(build_new_model_every=17, capital_type...tchebychev', moors_weight_sampler='flat_uniform')
        21:50:15.697666 line      1212         for name in kwargs:
        Modified var:.. name = 'report_model_on_each_build'
        21:50:15.697805 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(build_new_model_every=17, capital_type...ler='flat_uniform', report_model_on_each_build=0)
        21:50:15.697941 line      1212         for name in kwargs:
        Modified var:.. name = 'report_results_every'
        21:50:15.698088 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(build_new_model_every=17, capital_type...rt_model_on_each_build=0, report_results_every=2)
        21:50:15.698232 line      1212         for name in kwargs:
        Modified var:.. name = 'init_capital'
        21:50:15.698375 line      1213             setattr(self, name, kwargs[name])
        21:50:15.698513 line      1212         for name in kwargs:
        Modified var:.. name = 'init_capital_frac'
        21:50:15.698627 line      1213             setattr(self, name, kwargs[name])
        21:50:15.698764 line      1212         for name in kwargs:
        Modified var:.. name = 'num_init_evals'
        21:50:15.698879 line      1213             setattr(self, name, kwargs[name])
        21:50:15.699018 line      1212         for name in kwargs:
        Modified var:.. name = 'prev_evaluations'
        21:50:15.699144 line      1213             setattr(self, name, kwargs[name])
        21:50:15.699286 line      1212         for name in kwargs:
        Modified var:.. name = 'get_initial_qinfos'
        21:50:15.699403 line      1213             setattr(self, name, kwargs[name])
        21:50:15.699544 line      1212         for name in kwargs:
        Modified var:.. name = 'init_method'
        21:50:15.699663 line      1213             setattr(self, name, kwargs[name])
        21:50:15.699804 line      1212         for name in kwargs:
        Modified var:.. name = 'progress_load_from_and_save_to'
        21:50:15.699924 line      1213             setattr(self, name, kwargs[name])
        21:50:15.700074 line      1212         for name in kwargs:
        Modified var:.. name = 'progress_load_from'
        21:50:15.700204 line      1213             setattr(self, name, kwargs[name])
        21:50:15.700351 line      1212         for name in kwargs:
        Modified var:.. name = 'progress_save_to'
        21:50:15.700473 line      1213             setattr(self, name, kwargs[name])
        21:50:15.700618 line      1212         for name in kwargs:
        Modified var:.. name = 'progress_save_every'
        21:50:15.700741 line      1213             setattr(self, name, kwargs[name])
        21:50:15.700888 line      1212         for name in kwargs:
        Modified var:.. name = 'progress_report_on_each_save'
        21:50:15.701011 line      1213             setattr(self, name, kwargs[name])
        21:50:15.701176 line      1212         for name in kwargs:
        Modified var:.. name = 'acq'
        21:50:15.701302 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', build_new_model_every=1...rt_model_on_each_build=0, report_results_every=2)
        21:50:15.701452 line      1212         for name in kwargs:
        Modified var:.. name = 'acq_probs'
        21:50:15.701602 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', acq_probs='adaptive', b...rt_model_on_each_build=0, report_results_every=2)
        21:50:15.701752 line      1212         for name in kwargs:
        Modified var:.. name = 'acq_opt_method'
        21:50:15.701900 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', acq_opt_method='default...rt_model_on_each_build=0, report_results_every=2)
        21:50:15.702048 line      1212         for name in kwargs:
        Modified var:.. name = 'handle_parallel'
        21:50:15.702211 line      1213             setattr(self, name, kwargs[name])
        21:50:15.702363 line      1212         for name in kwargs:
        Modified var:.. name = 'acq_opt_max_evals'
        21:50:15.702490 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', acq_opt_max_evals=-1, a...rt_model_on_each_build=0, report_results_every=2)
        21:50:15.702641 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_hp_tune_criterion'
        21:50:15.702793 line      1213             setattr(self, name, kwargs[name])
        21:50:15.702946 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_hp_tune_probs'
        21:50:15.703082 line      1213             setattr(self, name, kwargs[name])
        21:50:15.703250 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_ml_hp_tune_opt'
        21:50:15.703381 line      1213             setattr(self, name, kwargs[name])
        21:50:15.703536 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_post_hp_tune_method'
        21:50:15.703666 line      1213             setattr(self, name, kwargs[name])
        21:50:15.703820 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_post_hp_tune_burn'
        21:50:15.703950 line      1213             setattr(self, name, kwargs[name])
        21:50:15.704121 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_post_hp_tune_offset'
        21:50:15.704255 line      1213             setattr(self, name, kwargs[name])
        21:50:15.704411 line      1212         for name in kwargs:
        Modified var:.. name = 'rand_exp_sampling_replace'
        21:50:15.704543 line      1213             setattr(self, name, kwargs[name])
        21:50:15.704699 line      1212         for name in kwargs:
        Modified var:.. name = 'mf_strategy'
        21:50:15.704831 line      1213             setattr(self, name, kwargs[name])
        21:50:15.704987 line      1212         for name in kwargs:
        Modified var:.. name = 'gpb_prior_mean'
        21:50:15.705130 line      1213             setattr(self, name, kwargs[name])
        21:50:15.705289 line      1212         for name in kwargs:
        Modified var:.. name = 'shrink_kernel_with_time'
        21:50:15.705425 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', acq_opt_max_evals=-1, a...eport_results_every=2, shrink_kernel_with_time=0)
        21:50:15.705585 line      1212         for name in kwargs:
        Modified var:.. name = 'perturb_thresh'
        21:50:15.705744 line      1213             setattr(self, name, kwargs[name])
        21:50:15.705903 line      1212         for name in kwargs:
        Modified var:.. name = 'track_every_time_step'
        21:50:15.706040 line      1213             setattr(self, name, kwargs[name])
        Modified var:.. self = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        21:50:15.706222 line      1212         for name in kwargs:
        Modified var:.. name = 'next_pt_std_thresh'
        21:50:15.706387 line      1213             setattr(self, name, kwargs[name])
        21:50:15.706551 line      1212         for name in kwargs:
        Modified var:.. name = 'nn_report_results_every'
        21:50:15.706692 line      1213             setattr(self, name, kwargs[name])
        21:50:15.706856 line      1212         for name in kwargs:
        Modified var:.. name = 'hp_tune_criterion'
        21:50:15.706997 line      1213             setattr(self, name, kwargs[name])
        21:50:15.707177 line      1212         for name in kwargs:
        Modified var:.. name = 'hp_tune_probs'
        21:50:15.707320 line      1213             setattr(self, name, kwargs[name])
        21:50:15.707487 line      1212         for name in kwargs:
        Modified var:.. name = 'ml_hp_tune_opt'
        21:50:15.707628 line      1213             setattr(self, name, kwargs[name])
        21:50:15.707796 line      1212         for name in kwargs:
        Modified var:.. name = 'hp_tune_max_evals'
        21:50:15.707943 line      1213             setattr(self, name, kwargs[name])
        21:50:15.708121 line      1212         for name in kwargs:
        Modified var:.. name = 'handle_non_psd_kernels'
        21:50:15.708265 line      1213             setattr(self, name, kwargs[name])
        21:50:15.708433 line      1212         for name in kwargs:
        Modified var:.. name = 'mean_func'
        21:50:15.708577 line      1213             setattr(self, name, kwargs[name])
        21:50:15.708745 line      1212         for name in kwargs:
        Modified var:.. name = 'mean_func_type'
        21:50:15.708895 line      1213             setattr(self, name, kwargs[name])
        21:50:15.709072 line      1212         for name in kwargs:
        Modified var:.. name = 'mean_func_const'
        21:50:15.709228 line      1213             setattr(self, name, kwargs[name])
        21:50:15.709401 line      1212         for name in kwargs:
        Modified var:.. name = 'noise_var_type'
        21:50:15.709547 line      1213             setattr(self, name, kwargs[name])
        21:50:15.709716 line      1212         for name in kwargs:
        Modified var:.. name = 'noise_var_label'
        21:50:15.709864 line      1213             setattr(self, name, kwargs[name])
        21:50:15.710035 line      1212         for name in kwargs:
        Modified var:.. name = 'noise_var_value'
        21:50:15.710199 line      1213             setattr(self, name, kwargs[name])
        21:50:15.710374 line      1212         for name in kwargs:
        Modified var:.. name = 'post_hp_tune_method'
        21:50:15.710523 line      1213             setattr(self, name, kwargs[name])
        21:50:15.710698 line      1212         for name in kwargs:
        Modified var:.. name = 'post_hp_tune_burn'
        21:50:15.710848 line      1213             setattr(self, name, kwargs[name])
        21:50:15.711023 line      1212         for name in kwargs:
        Modified var:.. name = 'post_hp_tune_offset'
        21:50:15.711186 line      1213             setattr(self, name, kwargs[name])
        21:50:15.711363 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_kernel_type'
        21:50:15.711515 line      1213             setattr(self, name, kwargs[name])
        21:50:15.711692 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_use_same_bandwidth'
        21:50:15.711845 line      1213             setattr(self, name, kwargs[name])
        21:50:15.712023 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_matern_nu'
        21:50:15.712194 line      1213             setattr(self, name, kwargs[name])
        21:50:15.712375 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_poly_order'
        21:50:15.712530 line      1213             setattr(self, name, kwargs[name])
        21:50:15.712710 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_use_additive_gp'
        21:50:15.712867 line      1213             setattr(self, name, kwargs[name])
        21:50:15.713049 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_add_max_group_size'
        21:50:15.713220 line      1213             setattr(self, name, kwargs[name])
        21:50:15.713403 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_add_grouping_criterion'
        21:50:15.713559 line      1213             setattr(self, name, kwargs[name])
        21:50:15.713740 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_num_groups_per_group_size'
        21:50:15.713897 line      1213             setattr(self, name, kwargs[name])
        21:50:15.714085 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_add_group_size_criterion'
        21:50:15.714248 line      1213             setattr(self, name, kwargs[name])
        21:50:15.714432 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_esp_order'
        21:50:15.714592 line      1213             setattr(self, name, kwargs[name])
        21:50:15.714778 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_esp_kernel_type'
        21:50:15.714940 line      1213             setattr(self, name, kwargs[name])
        21:50:15.715143 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_euc_esp_matern_nu'
        21:50:15.715308 line      1213             setattr(self, name, kwargs[name])
        21:50:15.715496 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_kernel_type'
        21:50:15.715664 line      1213             setattr(self, name, kwargs[name])
        21:50:15.715854 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_use_same_bandwidth'
        21:50:15.716018 line      1213             setattr(self, name, kwargs[name])
        21:50:15.716222 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_matern_nu'
        21:50:15.716388 line      1213             setattr(self, name, kwargs[name])
        21:50:15.716578 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_poly_order'
        21:50:15.716744 line      1213             setattr(self, name, kwargs[name])
        21:50:15.716935 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_use_additive_gp'
        21:50:15.717112 line      1213             setattr(self, name, kwargs[name])
        21:50:15.717307 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_add_max_group_size'
        21:50:15.717473 line      1213             setattr(self, name, kwargs[name])
        21:50:15.717666 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_add_grouping_criterion'
        21:50:15.717835 line      1213             setattr(self, name, kwargs[name])
        21:50:15.718027 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_num_groups_per_group_size'
        21:50:15.718213 line      1213             setattr(self, name, kwargs[name])
        21:50:15.718409 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_add_group_size_criterion'
        21:50:15.718580 line      1213             setattr(self, name, kwargs[name])
        21:50:15.718775 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_esp_order'
        21:50:15.718948 line      1213             setattr(self, name, kwargs[name])
        21:50:15.719159 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_esp_kernel_type'
        21:50:15.719334 line      1213             setattr(self, name, kwargs[name])
        21:50:15.719533 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_int_esp_matern_nu'
        21:50:15.719706 line      1213             setattr(self, name, kwargs[name])
        21:50:15.719903 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_kernel_type'
        21:50:15.720085 line      1213             setattr(self, name, kwargs[name])
        21:50:15.720290 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_use_same_bandwidth'
        21:50:15.720466 line      1213             setattr(self, name, kwargs[name])
        21:50:15.720665 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_matern_nu'
        21:50:15.720840 line      1213             setattr(self, name, kwargs[name])
        21:50:15.721042 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_poly_order'
        21:50:15.721238 line      1213             setattr(self, name, kwargs[name])
        21:50:15.721443 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_esp_order'
        21:50:15.721621 line      1213             setattr(self, name, kwargs[name])
        21:50:15.721823 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_esp_kernel_type'
        21:50:15.722001 line      1213             setattr(self, name, kwargs[name])
        21:50:15.722220 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_num_esp_matern_nu'
        21:50:15.722400 line      1213             setattr(self, name, kwargs[name])
        21:50:15.722605 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_kernel_type'
        21:50:15.722786 line      1213             setattr(self, name, kwargs[name])
        21:50:15.723001 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_disc_hamming_use_same_weight'
        21:50:15.723195 line      1213             setattr(self, name, kwargs[name])
        21:50:15.723405 line      1212         for name in kwargs:
        Modified var:.. name = 'dom_nn_kernel_type'
        21:50:15.723586 line      1213             setattr(self, name, kwargs[name])
        21:50:15.723795 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_dist_type'
        21:50:15.723978 line      1213             setattr(self, name, kwargs[name])
        21:50:15.724208 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_kernel_type'
        21:50:15.724396 line      1213             setattr(self, name, kwargs[name])
        21:50:15.724605 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_choose_mislabel_struct_coeffs'
        21:50:15.724791 line      1213             setattr(self, name, kwargs[name])
        21:50:15.725002 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_mislabel_coeffs'
        21:50:15.725201 line      1213             setattr(self, name, kwargs[name])
        21:50:15.725414 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_struct_coeffs'
        21:50:15.725601 line      1213             setattr(self, name, kwargs[name])
        21:50:15.725810 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_lp_power'
        21:50:15.725996 line      1213             setattr(self, name, kwargs[name])
        21:50:15.726220 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_emd_power'
        21:50:15.726409 line      1213             setattr(self, name, kwargs[name])
        21:50:15.726621 line      1212         for name in kwargs:
        Modified var:.. name = 'otmann_non_assignment_penalty'
        21:50:15.726810 line      1213             setattr(self, name, kwargs[name])
        21:50:15.727023 line      1212         for name in kwargs:
        21:50:15.727229 return    1212         for name in kwargs:
        Return value:.. None
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/api_utils.py
    21:50:15.727451 line       277   def _get_gpb_prior_mean_from_unproc(prior_mean_unproc_given, prior_mean_given,
    New var:....... _get_gpb_prior_mean_from_unproc = <function preprocess_options_for_gp_bandits.<loc...get_gpb_prior_mean_from_unproc at 0x7f6713327488>
    21:50:15.727674 line       323   if hasattr(options, 'gp_prior_mean'):
    21:50:15.727899 line       330   if hasattr(options, 'gpb_prior_kernel_unproc') and \
    21:50:15.728106 line       334   if hasattr(options, 'gps_prior_means') and \
    21:50:15.728304 line       350   if hasattr(options, 'moo_gpb_prior_kernels_unproc') and \
    21:50:15.728499 line       354   return options
    21:50:15.728691 return     354   return options
    Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
21:50:15.729003 line        93     pareto_values, pareto_points, history = multiobjective_gpb_from_multi_func_caller(
21:50:15.729263 line        94                                         multi_func_caller, worker_manager, max_capital,
21:50:15.729483 line        95                                         is_mf=False, options=options, reporter=reporter)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
    Starting var:.. multi_func_caller = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
    Starting var:.. worker_manager = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
    Starting var:.. max_capital = 5
    Starting var:.. is_mf = False
    Starting var:.. mode = None
    Starting var:.. acq = None
    Starting var:.. moo_strategy = 'moors'
    Starting var:.. moo_strategy_parameters = None
    Starting var:.. mf_strategy = None
    Starting var:.. domain_add_max_group_size = -1
    Starting var:.. options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
    Starting var:.. reporter = 'default'
    21:50:15.729705 call       775 def multiobjective_gpb_from_multi_func_caller(multi_func_caller, worker_manager,
    21:50:15.730195 line       783   reporter = get_reporter(reporter)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/reporters.py
        Starting var:.. reporter = 'default'
        21:50:15.730385 call        11 def get_reporter(reporter):
        21:50:15.730763 line        15   if six.PY2:
        21:50:15.730833 line        18     file_types = (io.IOBase, )
        New var:....... file_types = (<class 'io.IOBase'>,)
        21:50:15.730897 line        20   if isinstance(reporter, str):
        21:50:15.730989 line        21     if reporter.lower() == 'default':
        21:50:15.731055 line        22       reporter = BasicReporter()
            Starting var:.. self = <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
            Starting var:.. out = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='ANSI_X3.4-1968'>
            21:50:15.731139 call        39   def __init__(self, out=sys.stdout):
            21:50:15.731259 line        41     self.out = out
            21:50:15.731328 return      41     self.out = out
            Return value:.. None
        Modified var:.. reporter = <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
        21:50:15.731424 line        33   return reporter
        21:50:15.731515 return      33   return reporter
        Return value:.. <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
    Modified var:.. reporter = <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
    21:50:15.731610 line       784   if is_mf:
    21:50:15.731851 line       787     if isinstance(multi_func_caller.domain, domains.EuclideanDomain):
    21:50:15.732036 line       790     elif isinstance(multi_func_caller.domain, domains.CartesianProductDomain):
    21:50:15.732230 line       791       optimiser_constructor = CPMultiObjectiveGPBandit
    New var:....... optimiser_constructor = <class 'dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit'>
    21:50:15.732414 line       792       dflt_list_of_options = get_all_cp_moo_gp_bandit_args()
        Starting var:.. additional_args = None
        21:50:15.732626 call        62 def get_all_cp_moo_gp_bandit_args(additional_args=None):
        21:50:15.732718 line        64   if additional_args is None:
        21:50:15.732783 line        65     additional_args = []
        Modified var:.. additional_args = []
        21:50:15.732846 line        66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/gp_bandit.py
            Starting var:.. additional_args = [{'name': 'moo_strategy', 'required': False, 'de...mean functions for Multi-objective GP bandits.'}]
            21:50:15.732935 call       135 def get_all_cp_gp_bandit_args(additional_args=None):
            21:50:15.733067 line       137   if additional_args is None:
            21:50:15.733155 line       139   return get_all_gp_bandit_args(additional_args) + cartesian_product_gp_args
            21:50:15.733241 return     139   return get_all_gp_bandit_args(additional_args) + cartesian_product_gp_args
            Return value:.. [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
        21:50:15.733492 return      66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
        Return value:.. [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
    New var:....... dflt_list_of_options = [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
    21:50:15.733755 line       797   options = load_options(dflt_list_of_options, partial_options=options)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Starting var:.. list_of_options = [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        Starting var:.. descr = 'Algorithm'
        Starting var:.. reporter = None
        Starting var:.. cmd_line = False
        Starting var:.. partial_options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        21:50:15.734123 call        51 def load_options(list_of_options, descr='Algorithm', reporter=None, cmd_line=False,
        21:50:15.734571 line        56   parser = argparse.ArgumentParser(description=descr)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = REPR FAILED
            Starting var:.. prog = None
            Starting var:.. usage = None
            Starting var:.. description = 'Algorithm'
            Starting var:.. epilog = None
            Starting var:.. parents = []
            Starting var:.. formatter_class = <class 'argparse.HelpFormatter'>
            Starting var:.. prefix_chars = '-'
            Starting var:.. fromfile_prefix_chars = None
            Starting var:.. argument_default = None
            Starting var:.. conflict_handler = 'error'
            Starting var:.. add_help = True
            Starting var:.. allow_abbrev = True
            Starting var:.. __class__ = <class 'argparse.ArgumentParser'>
            21:50:15.734882 call      1604     def __init__(self,
            21:50:15.735320 line      1618         superinit = super(ArgumentParser, self).__init__
            New var:....... superinit = REPR FAILED
            21:50:15.735426 line      1619         superinit(description=description,
            21:50:15.735556 line      1620                   prefix_chars=prefix_chars,
            21:50:15.735658 line      1621                   argument_default=argument_default,
            21:50:15.735758 line      1622                   conflict_handler=conflict_handler)
            21:50:15.735925 line      1625         if prog is None:
            21:50:15.736029 line      1626             prog = _os.path.basename(_sys.argv[0])
            Modified var:.. prog = 'inception_fixrandom.py'
            21:50:15.736166 line      1628         self.prog = prog
            21:50:15.736295 line      1629         self.usage = usage
            21:50:15.736396 line      1630         self.epilog = epilog
            21:50:15.736497 line      1631         self.formatter_class = formatter_class
            21:50:15.736597 line      1632         self.fromfile_prefix_chars = fromfile_prefix_chars
            21:50:15.736698 line      1633         self.add_help = add_help
            Modified var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Modified var:.. superinit = <bound method _ActionsContainer.__init__ of Argu...tter'>, conflict_handler='error', add_help=True)>
            21:50:15.736798 line      1634         self.allow_abbrev = allow_abbrev
            21:50:15.736959 line      1636         add_group = self.add_argument_group
            New var:....... add_group = <bound method _ActionsContainer.add_argument_gro...tter'>, conflict_handler='error', add_help=True)>
            21:50:15.737082 line      1637         self._positionals = add_group(_('positional arguments'))
            21:50:15.737515 line      1638         self._optionals = add_group(_('optional arguments'))
            21:50:15.737909 line      1639         self._subparsers = None
            21:50:15.738051 line      1642         def identity(string):
            New var:....... identity = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.738192 line      1644         self.register('type', None, identity)
            21:50:15.738355 line      1648         default_prefix = '-' if '-' in prefix_chars else prefix_chars[0]
            New var:....... default_prefix = '-'
            21:50:15.738482 line      1649         if self.add_help:
            21:50:15.738635 line      1650             self.add_argument(
            21:50:15.738762 line      1651                 default_prefix+'h', default_prefix*2+'help',
            21:50:15.738887 line      1652                 action='help', default=SUPPRESS,
            21:50:15.739011 line      1653                 help=_('show this help message and exit'))
            21:50:15.739466 line      1656         for parent in parents:
            21:50:15.739613 return    1656         for parent in parents:
            Return value:.. None
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... parser = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
        21:50:15.739778 line        57   opt_names_default_parsed = {}
        New var:....... opt_names_default_parsed = {}
        21:50:15.740172 line        58   for elem in list_of_options:
        New var:....... elem = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        21:50:15.740523 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.740872 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.741042 line       138     if memo is None:
            21:50:15.741131 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.741208 line       141     d = id(x)
            New var:....... d = 140085916891320
            21:50:15.741305 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.741403 line       143     if y is not _nil:
            21:50:15.741503 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.741580 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.741683 line       149     if copier:
            21:50:15.741787 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916891320: {'name': 'moo_strategy', 'requ...rategy. So far, Dragonfly only supports moors.'}}
            Modified var:.. y = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            21:50:15.741927 line       183     if y is not x:
            21:50:15.742061 line       184         memo[d] = y
            21:50:15.742166 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916891320: {'name': 'moo_strategy', 'requ...ategy. So far, Dragonfly only supports moors.'}]}
            21:50:15.742259 line       186     return y
            21:50:15.742373 return     186     return y
            Return value:.. {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... opt_dict = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
        21:50:15.742496 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'moors', 'help': ...trategy. So far, Dragonfly only supports moors.'}
        New var:....... opt_name = 'moo_strategy'
        21:50:15.742879 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None]}
        21:50:15.743272 line        62     if not opt_name.startswith('--'):
        21:50:15.743631 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moo_strategy'
        21:50:15.743958 line        64     if opt_name == '--options':
        21:50:15.744321 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moo_strategy',)
            Starting var:.. kwargs = {'required': False, 'default': 'moors', 'help': ...trategy. So far, Dragonfly only supports moors.'}
            21:50:15.744650 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.744840 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.744931 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.745045 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'moors', 'help': ..._strategy', 'option_strings': ['--moo_strategy']}
            21:50:15.745163 line      1327         if 'default' not in kwargs:
            21:50:15.745281 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.745379 line      1336         if not callable(action_class):
            21:50:15.745496 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moo_strategy'], ...r, Dragonfly only supports moors.', metavar=None)
            21:50:15.745601 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.745736 line      1342         if not callable(type_func):
            21:50:15.745866 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.745970 line      1347             try:
            21:50:15.746081 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.746252 line      1352         return self._add_action(action)
            21:50:15.746383 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moo_strategy'], ...r, Dragonfly only supports moors.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.746534 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        21:50:15.746889 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.747256 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.747435 line       138     if memo is None:
            21:50:15.747513 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.747588 line       141     d = id(x)
            New var:....... d = 140085916891896
            21:50:15.747687 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.747788 line       143     if y is not _nil:
            21:50:15.747889 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.747967 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.748079 line       149     if copier:
            21:50:15.748196 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916891896: {'name': 'moors_scalarisation'...for MOORS. Should be "tchebychev" or "linear".'}}
            Modified var:.. y = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:15.748339 line       183     if y is not x:
            21:50:15.748473 line       184         memo[d] = y
            21:50:15.748560 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916891896: {'name': 'moors_scalarisation'...or MOORS. Should be "tchebychev" or "linear".'}]}
            21:50:15.748652 line       186     return y
            21:50:15.748765 return     186     return y
            Return value:.. {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
        21:50:15.748886 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tchebychev', 'he... for MOORS. Should be "tchebychev" or "linear".'}
        Modified var:.. opt_name = 'moors_scalarisation'
        21:50:15.749285 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalarisation': ['tchebychev', None]}
        21:50:15.749662 line        62     if not opt_name.startswith('--'):
        21:50:15.750017 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_scalarisation'
        21:50:15.750356 line        64     if opt_name == '--options':
        21:50:15.750708 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_scalarisation',)
            Starting var:.. kwargs = {'required': False, 'default': 'tchebychev', 'he... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:15.751041 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.751249 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.751340 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.751455 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tchebychev', 'he...on', 'option_strings': ['--moors_scalarisation']}
            21:50:15.751558 line      1327         if 'default' not in kwargs:
            21:50:15.751675 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.751778 line      1336         if not callable(action_class):
            21:50:15.751895 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_scalarisat...ould be "tchebychev" or "linear".', metavar=None)
            21:50:15.752001 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.752150 line      1342         if not callable(type_func):
            21:50:15.752284 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.752390 line      1347             try:
            21:50:15.752494 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.752659 line      1352         return self._add_action(action)
            21:50:15.752789 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_scalarisat...ould be "tchebychev" or "linear".', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.752942 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        21:50:15.753315 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.753671 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.753843 line       138     if memo is None:
            21:50:15.753919 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.753992 line       141     d = id(x)
            New var:....... d = 140085916892616
            21:50:15.754106 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.754209 line       143     if y is not _nil:
            21:50:15.754311 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.754388 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.754492 line       149     if copier:
            21:50:15.754596 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916892616: {'name': 'moors_weight_sampler...uniform', 'help': 'A weight sampler for moors.'}}
            Modified var:.. y = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            21:50:15.754737 line       183     if y is not x:
            21:50:15.754870 line       184         memo[d] = y
            21:50:15.754956 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916892616: {'name': 'moors_weight_sampler...niform', 'help': 'A weight sampler for moors.'}]}
            21:50:15.755047 line       186     return y
            21:50:15.755176 return     186     return y
            Return value:.. {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
        21:50:15.755297 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'flat_uniform', 'help': 'A weight sampler for moors.'}
        Modified var:.. opt_name = 'moors_weight_sampler'
        21:50:15.755686 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'moors_weight_sampler': ['flat_uniform', None]}
        21:50:15.756072 line        62     if not opt_name.startswith('--'):
        21:50:15.756436 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_weight_sampler'
        21:50:15.756765 line        64     if opt_name == '--options':
        21:50:15.757136 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_weight_sampler',)
            Starting var:.. kwargs = {'required': False, 'default': 'flat_uniform', 'help': 'A weight sampler for moors.'}
            21:50:15.757468 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.757659 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.757748 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.757861 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'flat_uniform', '...r', 'option_strings': ['--moors_weight_sampler']}
            21:50:15.757960 line      1327         if 'default' not in kwargs:
            21:50:15.758082 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.758186 line      1336         if not callable(action_class):
            21:50:15.758304 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_weight_sam...help='A weight sampler for moors.', metavar=None)
            21:50:15.758410 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.758544 line      1342         if not callable(type_func):
            21:50:15.758675 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.758780 line      1347             try:
            21:50:15.758883 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.759047 line      1352         return self._add_action(action)
            21:50:15.759190 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_weight_sam...help='A weight sampler for moors.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.759343 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        21:50:15.759702 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.760060 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.760252 line       138     if memo is None:
            21:50:15.760331 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.760410 line       141     d = id(x)
            New var:....... d = 140085916893048
            21:50:15.760510 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.760612 line       143     if y is not _nil:
            21:50:15.760713 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.760790 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.760892 line       149     if copier:
            21:50:15.760998 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916893048: {'name': 'moors_reference_poin...lt': None, 'help': 'Reference point for MOORS.'}}
            Modified var:.. y = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            21:50:15.761147 line       183     if y is not x:
            21:50:15.761287 line       184         memo[d] = y
            21:50:15.761373 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916893048: {'name': 'moors_reference_poin...t': None, 'help': 'Reference point for MOORS.'}]}
            21:50:15.761464 line       186     return y
            21:50:15.761575 return     186     return y
            Return value:.. {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
        21:50:15.761696 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Reference point for MOORS.'}
        Modified var:.. opt_name = 'moors_reference_point'
        21:50:15.762084 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...m', None], 'moors_reference_point': [None, None]}
        21:50:15.762471 line        62     if not opt_name.startswith('--'):
        21:50:15.762830 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moors_reference_point'
        21:50:15.763176 line        64     if opt_name == '--options':
        21:50:15.763532 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moors_reference_point',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Reference point for MOORS.'}
            21:50:15.763864 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.764055 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.764158 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.764274 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Re...', 'option_strings': ['--moors_reference_point']}
            21:50:15.764373 line      1327         if 'default' not in kwargs:
            21:50:15.764488 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.764586 line      1336         if not callable(action_class):
            21:50:15.764701 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moors_reference_... help='Reference point for MOORS.', metavar=None)
            21:50:15.764811 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.764945 line      1342         if not callable(type_func):
            21:50:15.765081 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.765192 line      1347             try:
            21:50:15.765299 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.765462 line      1352         return self._add_action(action)
            21:50:15.765593 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moors_reference_... help='Reference point for MOORS.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.765745 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        21:50:15.766120 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.766482 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.766654 line       138     if memo is None:
            21:50:15.766732 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.766808 line       141     d = id(x)
            New var:....... d = 140085916427752
            21:50:15.766906 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.767005 line       143     if y is not _nil:
            21:50:15.767121 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.767201 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.767303 line       149     if copier:
            21:50:15.767407 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916427752: {'name': 'moo_gpb_prior_means'...mean functions for Multi-objective GP bandits.'}}
            Modified var:.. y = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            21:50:15.767547 line       183     if y is not x:
            21:50:15.767680 line       184         memo[d] = y
            21:50:15.767765 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916427752: {'name': 'moo_gpb_prior_means'...ean functions for Multi-objective GP bandits.'}]}
            21:50:15.767856 line       186     return y
            21:50:15.767970 return     186     return y
            Return value:.. {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
        21:50:15.768101 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Pr... mean functions for Multi-objective GP bandits.'}
        Modified var:.. opt_name = 'moo_gpb_prior_means'
        21:50:15.768492 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'moo_gpb_prior_means': [None, None]}
        21:50:15.768875 line        62     if not opt_name.startswith('--'):
        21:50:15.769254 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--moo_gpb_prior_means'
        21:50:15.769586 line        64     if opt_name == '--options':
        21:50:15.769943 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--moo_gpb_prior_means',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Pr... mean functions for Multi-objective GP bandits.'}
            21:50:15.770295 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.770488 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.770579 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.770694 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Pr...ns', 'option_strings': ['--moo_gpb_prior_means']}
            21:50:15.770795 line      1327         if 'default' not in kwargs:
            21:50:15.770909 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.771007 line      1336         if not callable(action_class):
            21:50:15.771134 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--moo_gpb_prior_me...s for Multi-objective GP bandits.', metavar=None)
            21:50:15.771241 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.771375 line      1342         if not callable(type_func):
            21:50:15.771507 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.771613 line      1347             try:
            21:50:15.771718 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.771882 line      1352         return self._add_action(action)
            21:50:15.772014 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--moo_gpb_prior_me...s for Multi-objective GP bandits.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.772186 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        21:50:15.772549 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.772913 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.773100 line       138     if memo is None:
            21:50:15.773182 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.773258 line       141     d = id(x)
            New var:....... d = 140085372804984
            21:50:15.773359 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.773460 line       143     if y is not _nil:
            21:50:15.773569 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.773649 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.773754 line       149     if copier:
            21:50:15.773860 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372804984: {'name': 'max_num_steps', 'req...ny evaluations, stop.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            21:50:15.774017 line       183     if y is not x:
            21:50:15.774168 line       184         memo[d] = y
            21:50:15.774260 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372804984: {'name': 'max_num_steps', 'req...y evaluations, stop.', 'type': <class 'float'>}]}
            21:50:15.774356 line       186     return y
            21:50:15.774472 return     186     return y
            Return value:.. {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
        21:50:15.774598 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 10000000.0, 'help...any evaluations, stop.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'max_num_steps'
        21:50:15.774987 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'max_num_steps': [10000000.0, None]}
        21:50:15.775393 line        62     if not opt_name.startswith('--'):
        21:50:15.775757 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--max_num_steps'
        21:50:15.776103 line        64     if opt_name == '--options':
        21:50:15.776465 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--max_num_steps',)
            Starting var:.. kwargs = {'required': False, 'default': 10000000.0, 'help...any evaluations, stop.', 'type': <class 'float'>}
            21:50:15.776802 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.776996 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.777098 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.777218 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 10000000.0, 'help...um_steps', 'option_strings': ['--max_num_steps']}
            21:50:15.777321 line      1327         if 'default' not in kwargs:
            21:50:15.777439 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.777539 line      1336         if not callable(action_class):
            21:50:15.777657 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--max_num_steps'],...eeds this many evaluations, stop.', metavar=None)
            21:50:15.777765 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.777905 line      1342         if not callable(type_func):
            21:50:15.778040 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.778167 line      1347             try:
            21:50:15.778275 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.778466 line      1352         return self._add_action(action)
            21:50:15.778606 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--max_num_steps'],...eeds this many evaluations, stop.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.778765 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        21:50:15.779144 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.779507 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.779678 line       138     if memo is None:
            21:50:15.779755 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.779830 line       141     d = id(x)
            New var:....... d = 140085372334944
            21:50:15.779930 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.780029 line       143     if y is not _nil:
            21:50:15.780143 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.780222 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.780326 line       149     if copier:
            21:50:15.780432 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372334944: {'name': 'capital_type', 'requ...d be one of return_value, cputime, or realtime'}}
            Modified var:.. y = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            21:50:15.780573 line       183     if y is not x:
            21:50:15.780706 line       184         memo[d] = y
            21:50:15.780793 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372334944: {'name': 'capital_type', 'requ... be one of return_value, cputime, or realtime'}]}
            21:50:15.780883 line       186     return y
            21:50:15.780995 return     186     return y
            Return value:.. {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
        21:50:15.781130 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'return_value', '...ld be one of return_value, cputime, or realtime'}
        Modified var:.. opt_name = 'capital_type'
        21:50:15.781524 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...0, None], 'capital_type': ['return_value', None]}
        21:50:15.781905 line        62     if not opt_name.startswith('--'):
        21:50:15.782291 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--capital_type'
        21:50:15.782627 line        64     if opt_name == '--options':
        21:50:15.782987 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--capital_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'return_value', '...ld be one of return_value, cputime, or realtime'}
            21:50:15.783335 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.783529 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.783620 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.783734 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'return_value', '...ital_type', 'option_strings': ['--capital_type']}
            21:50:15.783835 line      1327         if 'default' not in kwargs:
            21:50:15.783950 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.784047 line      1336         if not callable(action_class):
            21:50:15.784179 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--capital_type'], ...eturn_value, cputime, or realtime', metavar=None)
            21:50:15.784287 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.784422 line      1342         if not callable(type_func):
            21:50:15.784554 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.784661 line      1347             try:
            21:50:15.784766 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.784930 line      1352         return self._add_action(action)
            21:50:15.785071 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--capital_type'], ...eturn_value, cputime, or realtime', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.785235 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        21:50:15.785598 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.785966 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.786154 line       138     if memo is None:
            21:50:15.786233 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.786307 line       141     d = id(x)
            New var:....... d = 140085372335088
            21:50:15.786405 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.786505 line       143     if y is not _nil:
            21:50:15.786606 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.786683 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.786784 line       149     if copier:
            21:50:15.786893 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372335088: {'name': 'mode', 'required': F...ynchronous parallelisation, else asynchronous."}}
            Modified var:.. y = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            21:50:15.787035 line       183     if y is not x:
            21:50:15.787190 line       184         memo[d] = y
            21:50:15.787281 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372335088: {'name': 'mode', 'required': F...nchronous parallelisation, else asynchronous."}]}
            21:50:15.787375 line       186     return y
            21:50:15.787490 return     186     return y
            Return value:.. {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
        21:50:15.787613 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'asy', 'help': "I...synchronous parallelisation, else asynchronous."}
        Modified var:.. opt_name = 'mode'
        21:50:15.788006 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': ['return_value', None], 'mode': ['asy', None]}
        21:50:15.788408 line        62     if not opt_name.startswith('--'):
        21:50:15.788774 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mode'
        21:50:15.789121 line        64     if opt_name == '--options':
        21:50:15.789485 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mode',)
            Starting var:.. kwargs = {'required': False, 'default': 'asy', 'help': "I...synchronous parallelisation, else asynchronous."}
            21:50:15.789821 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.790014 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.790119 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.790237 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'asy', 'help': "I....", 'dest': 'mode', 'option_strings': ['--mode']}
            21:50:15.790339 line      1327         if 'default' not in kwargs:
            21:50:15.790454 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.790551 line      1336         if not callable(action_class):
            21:50:15.790667 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mode'], dest='mo...rallelisation, else asynchronous.", metavar=None)
            21:50:15.790773 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.790907 line      1342         if not callable(type_func):
            21:50:15.791037 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.791163 line      1347             try:
            21:50:15.791271 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.791436 line      1352         return self._add_action(action)
            21:50:15.791567 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mode'], dest='mo...rallelisation, else asynchronous.", metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.791720 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.792091 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.792461 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.792636 line       138     if memo is None:
            21:50:15.792715 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.792791 line       141     d = id(x)
            New var:....... d = 140085372335232
            21:50:15.792889 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.792988 line       143     if y is not _nil:
            21:50:15.793106 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.793196 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.793308 line       149     if copier:
            21:50:15.793415 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372335232: {'name': 'build_new_model_ever...y this many iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.793570 line       183     if y is not x:
            21:50:15.793704 line       184         memo[d] = y
            21:50:15.793793 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372335232: {'name': 'build_new_model_ever... this many iterations.', 'type': <class 'int'>}]}
            21:50:15.793886 line       186     return y
            21:50:15.794001 return     186     return y
            Return value:.. {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.794139 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 17, 'help': 'Upda...ry this many iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'build_new_model_every'
        21:50:15.794531 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...asy', None], 'build_new_model_every': [17, None]}
        21:50:15.794917 line        62     if not opt_name.startswith('--'):
        21:50:15.795294 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--build_new_model_every'
        21:50:15.795629 line        64     if opt_name == '--options':
        21:50:15.795990 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--build_new_model_every',)
            Starting var:.. kwargs = {'required': False, 'default': 17, 'help': 'Upda...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.796349 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.796544 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.796635 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.796750 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 17, 'help': 'Upda...', 'option_strings': ['--build_new_model_every']}
            21:50:15.796852 line      1327         if 'default' not in kwargs:
            21:50:15.796967 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.797075 line      1336         if not callable(action_class):
            21:50:15.797201 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--build_new_model_...edure every this many iterations.', metavar=None)
            21:50:15.797310 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.797446 line      1342         if not callable(type_func):
            21:50:15.797577 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.797683 line      1347             try:
            21:50:15.797788 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.797953 line      1352         return self._add_action(action)
            21:50:15.798093 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--build_new_model_...edure every this many iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.798255 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        21:50:15.798620 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.798982 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.799175 line       138     if memo is None:
            21:50:15.799256 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.799331 line       141     d = id(x)
            New var:....... d = 140085372336456
            21:50:15.799429 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.799530 line       143     if y is not _nil:
            21:50:15.799631 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.799709 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.799811 line       149     if copier:
            21:50:15.799917 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336456: {'name': 'report_model_on_each... each time it is built.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            21:50:15.800079 line       183     if y is not x:
            21:50:15.800227 line       184         memo[d] = y
            21:50:15.800317 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336456: {'name': 'report_model_on_each...each time it is built.', 'type': <class 'int'>}]}
            21:50:15.800409 line       186     return y
            21:50:15.800523 return     186     return y
            Return value:.. {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
        21:50:15.800645 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If Tr...l each time it is built.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'report_model_on_each_build'
        21:50:15.801038 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'report_model_on_each_build': [0, None]}
        21:50:15.801435 line        62     if not opt_name.startswith('--'):
        21:50:15.801795 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--report_model_on_each_build'
        21:50:15.802145 line        64     if opt_name == '--options':
        21:50:15.802508 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--report_model_on_each_build',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': 'If Tr...l each time it is built.', 'type': <class 'int'>}
            21:50:15.802845 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.803037 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.803142 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.803259 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': 'If Tr...ption_strings': ['--report_model_on_each_build']}
            21:50:15.803361 line      1327         if 'default' not in kwargs:
            21:50:15.803476 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.803575 line      1336         if not callable(action_class):
            21:50:15.803693 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--report_model_on_... the model each time it is built.', metavar=None)
            21:50:15.803800 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.803936 line      1342         if not callable(type_func):
            21:50:15.804073 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.804186 line      1347             try:
            21:50:15.804292 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.804457 line      1352         return self._add_action(action)
            21:50:15.804590 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--report_model_on_... the model each time it is built.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.804750 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.805130 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.805495 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.805669 line       138     if memo is None:
            21:50:15.805746 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.805822 line       141     d = id(x)
            New var:....... d = 140085372336528
            21:50:15.805920 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.806019 line       143     if y is not _nil:
            21:50:15.806136 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.806215 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.806319 line       149     if copier:
            21:50:15.806423 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336528: {'name': 'report_results_every...y this many iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.806576 line       183     if y is not x:
            21:50:15.806711 line       184         memo[d] = y
            21:50:15.806800 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336528: {'name': 'report_results_every... this many iterations.', 'type': <class 'int'>}]}
            21:50:15.806894 line       186     return y
            21:50:15.807008 return     186     return y
            Return value:.. {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
        21:50:15.807143 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 13, 'help': 'Repo...ry this many iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'report_results_every'
        21:50:15.807534 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0, None], 'report_results_every': [13, None]}
        21:50:15.807918 line        62     if not opt_name.startswith('--'):
        21:50:15.808300 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--report_results_every'
        21:50:15.808638 line        64     if opt_name == '--options':
        21:50:15.808998 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--report_results_every',)
            Starting var:.. kwargs = {'required': False, 'default': 13, 'help': 'Repo...ry this many iterations.', 'type': <class 'int'>}
            21:50:15.809349 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.809547 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.809638 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.809752 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 13, 'help': 'Repo...y', 'option_strings': ['--report_results_every']}
            21:50:15.809853 line      1327         if 'default' not in kwargs:
            21:50:15.809969 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.810074 line      1336         if not callable(action_class):
            21:50:15.810198 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--report_results_e...sults every this many iterations.', metavar=None)
            21:50:15.810305 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.810442 line      1342         if not callable(type_func):
            21:50:15.810573 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.810680 line      1347             try:
            21:50:15.810784 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.810949 line      1352         return self._add_action(action)
            21:50:15.811092 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--report_results_e...sults every this many iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.811256 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        21:50:15.811622 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.811984 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.812173 line       138     if memo is None:
            21:50:15.812251 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.812325 line       141     d = id(x)
            New var:....... d = 140085372336600
            21:50:15.812422 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.812522 line       143     if y is not _nil:
            21:50:15.812621 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.812698 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.812801 line       149     if copier:
            21:50:15.812906 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336600: {'name': 'init_capital', 'requ...': 'The capital to be used for initialisation.'}}
            Modified var:.. y = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            21:50:15.813047 line       183     if y is not x:
            21:50:15.813192 line       184         memo[d] = y
            21:50:15.813285 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336600: {'name': 'init_capital', 'requ...: 'The capital to be used for initialisation.'}]}
            21:50:15.813378 line       186     return y
            21:50:15.813491 return     186     return y
            Return value:.. {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
        21:50:15.813611 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'The capital to be used for initialisation.'}
        Modified var:.. opt_name = 'init_capital'
        21:50:15.814001 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [13, None], 'init_capital': ['default', None]}
        21:50:15.814404 line        62     if not opt_name.startswith('--'):
        21:50:15.814771 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_capital'
        21:50:15.815120 line        64     if opt_name == '--options':
        21:50:15.815491 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_capital',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'The capital to be used for initialisation.'}
            21:50:15.815820 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.816006 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.816103 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.816216 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...t_capital', 'option_strings': ['--init_capital']}
            21:50:15.816314 line      1327         if 'default' not in kwargs:
            21:50:15.816426 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.816522 line      1336         if not callable(action_class):
            21:50:15.816635 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_capital'], ...al to be used for initialisation.', metavar=None)
            21:50:15.816738 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.816870 line      1342         if not callable(type_func):
            21:50:15.816997 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.817116 line      1347             try:
            21:50:15.817222 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.817384 line      1352         return self._add_action(action)
            21:50:15.817512 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_capital'], ...al to be used for initialisation.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.817660 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        21:50:15.818020 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.818392 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.818561 line       138     if memo is None:
            21:50:15.818637 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.818709 line       141     d = id(x)
            New var:....... d = 140085372336672
            21:50:15.818804 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.818902 line       143     if y is not _nil:
            21:50:15.818999 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.819080 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.819187 line       149     if copier:
            21:50:15.819292 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336672: {'name': 'init_capital_frac', ...e total capital to be used for initialisation.'}}
            Modified var:.. y = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            21:50:15.819429 line       183     if y is not x:
            21:50:15.819559 line       184         memo[d] = y
            21:50:15.819643 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336672: {'name': 'init_capital_frac', ... total capital to be used for initialisation.'}]}
            21:50:15.819733 line       186     return y
            21:50:15.819842 return     186     return y
            Return value:.. {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
        21:50:15.819959 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...he total capital to be used for initialisation.'}
        Modified var:.. opt_name = 'init_capital_frac'
        21:50:15.820359 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...fault', None], 'init_capital_frac': [None, None]}
        21:50:15.820740 line        62     if not opt_name.startswith('--'):
        21:50:15.821108 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_capital_frac'
        21:50:15.821438 line        64     if opt_name == '--options':
        21:50:15.821790 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_capital_frac',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...he total capital to be used for initialisation.'}
            21:50:15.822133 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.822321 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.822412 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.822524 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...frac', 'option_strings': ['--init_capital_frac']}
            21:50:15.822622 line      1327         if 'default' not in kwargs:
            21:50:15.822733 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.822828 line      1336         if not callable(action_class):
            21:50:15.822940 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_capital_fra...al to be used for initialisation.', metavar=None)
            21:50:15.823044 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.823193 line      1342         if not callable(type_func):
            21:50:15.823323 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.823426 line      1347             try:
            21:50:15.823528 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.823688 line      1352         return self._add_action(action)
            21:50:15.823816 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_capital_fra...al to be used for initialisation.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.823980 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        21:50:15.824349 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.824705 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.824873 line       138     if memo is None:
            21:50:15.824948 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.825020 line       141     d = id(x)
            New var:....... d = 140085372336744
            21:50:15.825128 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.825226 line       143     if y is not _nil:
            21:50:15.825323 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.825399 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.825498 line       149     if copier:
            21:50:15.825599 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336744: {'name': 'num_init_evals', 're...f <0, will use default.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            21:50:15.825747 line       183     if y is not x:
            21:50:15.825876 line       184         memo[d] = y
            21:50:15.825961 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336744: {'name': 'num_init_evals', 're... <0, will use default.', 'type': <class 'int'>}]}
            21:50:15.826050 line       186     return y
            21:50:15.826181 return     186     return y
            Return value:.. {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
        21:50:15.826302 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 20, 'help': 'The ...If <0, will use default.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'num_init_evals'
        21:50:15.826683 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...rac': [None, None], 'num_init_evals': [20, None]}
        21:50:15.827058 line        62     if not opt_name.startswith('--'):
        21:50:15.827424 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--num_init_evals'
        21:50:15.827752 line        64     if opt_name == '--options':
        21:50:15.828116 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--num_init_evals',)
            Starting var:.. kwargs = {'required': False, 'default': 20, 'help': 'The ...If <0, will use default.', 'type': <class 'int'>}
            21:50:15.828446 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.828632 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.828719 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.828830 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 20, 'help': 'The ...t_evals', 'option_strings': ['--num_init_evals']}
            21:50:15.828928 line      1327         if 'default' not in kwargs:
            21:50:15.829040 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.829154 line      1336         if not callable(action_class):
            21:50:15.829270 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--num_init_evals']...isation. If <0, will use default.', metavar=None)
            21:50:15.829384 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.829512 line      1342         if not callable(type_func):
            21:50:15.829635 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.829736 line      1347             try:
            21:50:15.829836 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.829992 line      1352         return self._add_action(action)
            21:50:15.830130 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--num_init_evals']...isation. If <0, will use default.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.830278 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        21:50:15.830628 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.830978 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.831157 line       138     if memo is None:
            21:50:15.831231 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.831302 line       141     d = id(x)
            New var:....... d = 140085372336816
            21:50:15.831394 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.831488 line       143     if y is not _nil:
            21:50:15.831582 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.831656 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.831752 line       149     if copier:
            21:50:15.831852 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336816: {'name': 'prev_evaluations', '...e, 'help': 'Data for any previous evaluations.'}}
            Modified var:.. y = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            21:50:15.831985 line       183     if y is not x:
            21:50:15.832129 line       184         memo[d] = y
            21:50:15.832213 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336816: {'name': 'prev_evaluations', '..., 'help': 'Data for any previous evaluations.'}]}
            21:50:15.832300 line       186     return y
            21:50:15.832406 return     186     return y
            Return value:.. {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
        21:50:15.832519 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Data for any previous evaluations.'}
        Modified var:.. opt_name = 'prev_evaluations'
        21:50:15.832890 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...s': [20, None], 'prev_evaluations': [None, None]}
        21:50:15.833272 line        62     if not opt_name.startswith('--'):
        21:50:15.833619 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--prev_evaluations'
        21:50:15.833943 line        64     if opt_name == '--options':
        21:50:15.834299 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--prev_evaluations',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Data for any previous evaluations.'}
            21:50:15.834638 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.834815 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.834897 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.835002 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Da...tions', 'option_strings': ['--prev_evaluations']}
            21:50:15.835111 line      1327         if 'default' not in kwargs:
            21:50:15.835223 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.835315 line      1336         if not callable(action_class):
            21:50:15.835423 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--prev_evaluations...ata for any previous evaluations.', metavar=None)
            21:50:15.835522 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.835647 line      1342         if not callable(type_func):
            21:50:15.835768 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.835866 line      1347             try:
            21:50:15.835963 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.836126 line      1352         return self._add_action(action)
            21:50:15.836254 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--prev_evaluations...ata for any previous evaluations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.836397 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        21:50:15.836743 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.837096 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.837262 line       138     if memo is None:
            21:50:15.837333 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.837404 line       141     d = id(x)
            New var:....... d = 140085372336888
            21:50:15.837496 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.837590 line       143     if y is not _nil:
            21:50:15.837684 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.837755 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.837852 line       149     if copier:
            21:50:15.837949 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336888: {'name': 'get_initial_qinfos',... 'help': 'A function to obtain initial qinfos.'}}
            Modified var:.. y = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            21:50:15.838093 line       183     if y is not x:
            21:50:15.838227 line       184         memo[d] = y
            21:50:15.838309 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336888: {'name': 'get_initial_qinfos',...'help': 'A function to obtain initial qinfos.'}]}
            21:50:15.838394 line       186     return y
            21:50:15.838499 return     186     return y
            Return value:.. {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
        21:50:15.838611 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'A function to obtain initial qinfos.'}
        Modified var:.. opt_name = 'get_initial_qinfos'
        21:50:15.838990 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'get_initial_qinfos': [None, None]}
        21:50:15.839371 line        62     if not opt_name.startswith('--'):
        21:50:15.839715 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--get_initial_qinfos'
        21:50:15.840032 line        64     if opt_name == '--options':
        21:50:15.840385 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--get_initial_qinfos',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'A function to obtain initial qinfos.'}
            21:50:15.840710 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.840884 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.840965 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.841077 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'A ...fos', 'option_strings': ['--get_initial_qinfos']}
            21:50:15.841177 line      1327         if 'default' not in kwargs:
            21:50:15.841284 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.841373 line      1336         if not callable(action_class):
            21:50:15.841479 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--get_initial_qinf...unction to obtain initial qinfos.', metavar=None)
            21:50:15.841576 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.841699 line      1342         if not callable(type_func):
            21:50:15.841819 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.841917 line      1347             try:
            21:50:15.842012 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.842178 line      1352         return self._add_action(action)
            21:50:15.842301 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--get_initial_qinf...unction to obtain initial qinfos.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.842441 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        21:50:15.842783 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.843131 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.843295 line       138     if memo is None:
            21:50:15.843367 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.843436 line       141     d = id(x)
            New var:....... d = 140085372336960
            21:50:15.843525 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.843616 line       143     if y is not _nil:
            21:50:15.843707 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.843777 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.843870 line       149     if copier:
            21:50:15.843965 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372336960: {'name': 'init_method', 'requi...ueries. Is used if get_initial_qinfos is None.'}}
            Modified var:.. y = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            21:50:15.844106 line       183     if y is not x:
            21:50:15.844239 line       184         memo[d] = y
            21:50:15.844336 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372336960: {'name': 'init_method', 'requi...eries. Is used if get_initial_qinfos is None.'}]}
            21:50:15.844419 line       186     return y
            21:50:15.844523 return     186     return y
            Return value:.. {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
        21:50:15.844638 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'rand', 'help': '...queries. Is used if get_initial_qinfos is None.'}
        Modified var:.. opt_name = 'init_method'
        21:50:15.844998 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...os': [None, None], 'init_method': ['rand', None]}
        21:50:15.845368 line        62     if not opt_name.startswith('--'):
        21:50:15.845703 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--init_method'
        21:50:15.846013 line        64     if opt_name == '--options':
        21:50:15.846357 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--init_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'rand', 'help': '...queries. Is used if get_initial_qinfos is None.'}
            21:50:15.846669 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.846842 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.846923 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.847026 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'rand', 'help': '...nit_method', 'option_strings': ['--init_method']}
            21:50:15.847132 line      1327         if 'default' not in kwargs:
            21:50:15.847239 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.847333 line      1336         if not callable(action_class):
            21:50:15.847439 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--init_method'], d...ed if get_initial_qinfos is None.', metavar=None)
            21:50:15.847535 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.847657 line      1342         if not callable(type_func):
            21:50:15.847774 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.847870 line      1347             try:
            21:50:15.847963 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.848122 line      1352         return self._add_action(action)
            21:50:15.848246 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--init_method'], d...ed if get_initial_qinfos is None.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.848387 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        21:50:15.848725 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.849061 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.849230 line       138     if memo is None:
            21:50:15.849301 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.849369 line       141     d = id(x)
            New var:....... d = 140085372337032
            21:50:15.849459 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.849549 line       143     if y is not _nil:
            21:50:15.849640 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.849709 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.849802 line       149     if copier:
            21:50:15.849897 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337032: {'name': 'progress_load_from_a...ogress_save_to and progress_load_from options.'}}
            Modified var:.. y = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            21:50:15.850027 line       183     if y is not x:
            21:50:15.850166 line       184         memo[d] = y
            21:50:15.850247 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337032: {'name': 'progress_load_from_a...gress_save_to and progress_load_from options.'}]}
            21:50:15.850331 line       186     return y
            21:50:15.850436 return     186     return y
            Return value:.. {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
        21:50:15.850547 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo...rogress_save_to and progress_load_from options.'}
        Modified var:.. opt_name = 'progress_load_from_and_save_to'
        21:50:15.850915 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'progress_load_from_and_save_to': [None, None]}
        21:50:15.851287 line        62     if not opt_name.startswith('--'):
        21:50:15.851626 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_load_from_and_save_to'
        21:50:15.851937 line        64     if opt_name == '--options':
        21:50:15.852280 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_load_from_and_save_to',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...rogress_save_to and progress_load_from options.'}
            21:50:15.852592 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.852766 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.852848 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.852952 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...n_strings': ['--progress_load_from_and_save_to']}
            21:50:15.853043 line      1327         if 'default' not in kwargs:
            21:50:15.853165 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.853257 line      1336         if not callable(action_class):
            21:50:15.853363 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_load_fr...o and progress_load_from options.', metavar=None)
            21:50:15.853459 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.853582 line      1342         if not callable(type_func):
            21:50:15.853702 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.853799 line      1347             try:
            21:50:15.853894 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.854044 line      1352         return self._add_action(action)
            21:50:15.854179 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_load_fr...o and progress_load_from options.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.854337 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        21:50:15.854674 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.855012 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.855179 line       138     if memo is None:
            21:50:15.855252 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.855319 line       141     d = id(x)
            New var:....... d = 140085372337104
            21:50:15.855407 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.855496 line       143     if y is not _nil:
            21:50:15.855585 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.855655 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.855746 line       149     if copier:
            21:50:15.855841 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337104: {'name': 'progress_load_from',...(from possibly a previous run) from this file.'}}
            Modified var:.. y = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            21:50:15.855970 line       183     if y is not x:
            21:50:15.856105 line       184         memo[d] = y
            21:50:15.856187 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337104: {'name': 'progress_load_from',...from possibly a previous run) from this file.'}]}
            21:50:15.856270 line       186     return y
            21:50:15.856371 return     186     return y
            Return value:.. {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
        21:50:15.856479 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo... (from possibly a previous run) from this file.'}
        Modified var:.. opt_name = 'progress_load_from'
        21:50:15.856839 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'progress_load_from': [None, None]}
        21:50:15.857207 line        62     if not opt_name.startswith('--'):
        21:50:15.857545 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_load_from'
        21:50:15.857854 line        64     if opt_name == '--options':
        21:50:15.858199 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_load_from',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo... (from possibly a previous run) from this file.'}
            21:50:15.858511 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.858682 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.858763 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.858865 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Lo...rom', 'option_strings': ['--progress_load_from']}
            21:50:15.858955 line      1327         if 'default' not in kwargs:
            21:50:15.859058 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.859163 line      1336         if not callable(action_class):
            21:50:15.859272 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_load_fr...y a previous run) from this file.', metavar=None)
            21:50:15.859368 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.859488 line      1342         if not callable(type_func):
            21:50:15.859605 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.859700 line      1347             try:
            21:50:15.859794 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.859941 line      1352         return self._add_action(action)
            21:50:15.860058 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_load_fr...y a previous run) from this file.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.860210 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        21:50:15.860548 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.860883 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.861036 line       138     if memo is None:
            21:50:15.861115 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.861183 line       141     d = id(x)
            New var:....... d = 140085372337176
            21:50:15.861270 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.861358 line       143     if y is not _nil:
            21:50:15.861448 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.861517 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.861609 line       149     if copier:
            21:50:15.861705 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337176: {'name': 'progress_save_to', '...t': None, 'help': 'Save progress to this file.'}}
            Modified var:.. y = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            21:50:15.861832 line       183     if y is not x:
            21:50:15.861953 line       184         memo[d] = y
            21:50:15.862030 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337176: {'name': 'progress_save_to', '...': None, 'help': 'Save progress to this file.'}]}
            21:50:15.862128 line       186     return y
            21:50:15.862231 return     186     return y
            Return value:.. {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
        21:50:15.862339 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Save progress to this file.'}
        Modified var:.. opt_name = 'progress_save_to'
        21:50:15.862700 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_to': [None, None]}
        21:50:15.863058 line        62     if not opt_name.startswith('--'):
        21:50:15.863404 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_save_to'
        21:50:15.863714 line        64     if opt_name == '--options':
        21:50:15.864048 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_save_to',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Save progress to this file.'}
            21:50:15.864382 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.864551 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.864630 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.864729 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Sa...ve_to', 'option_strings': ['--progress_save_to']}
            21:50:15.864817 line      1327         if 'default' not in kwargs:
            21:50:15.864919 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.865005 line      1336         if not callable(action_class):
            21:50:15.865123 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_save_to...help='Save progress to this file.', metavar=None)
            21:50:15.865219 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.865339 line      1342         if not callable(type_func):
            21:50:15.865454 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.865546 line      1347             try:
            21:50:15.865638 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.865783 line      1352         return self._add_action(action)
            21:50:15.865901 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_save_to...help='Save progress to this file.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.866036 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        21:50:15.866383 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.866717 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.866871 line       138     if memo is None:
            21:50:15.866940 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.867007 line       141     d = id(x)
            New var:....... d = 140085372337248
            21:50:15.867104 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.867198 line       143     if y is not _nil:
            21:50:15.867290 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.867360 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.867452 line       149     if copier:
            21:50:15.867547 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337248: {'name': 'progress_save_every'..._save_every iterations.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            21:50:15.867686 line       183     if y is not x:
            21:50:15.867807 line       184         memo[d] = y
            21:50:15.867885 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337248: {'name': 'progress_save_every'...save_every iterations.', 'type': <class 'int'>}]}
            21:50:15.867968 line       186     return y
            21:50:15.868088 return     186     return y
            Return value:.. {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
        21:50:15.868209 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 5, 'help': 'Save ...s_save_every iterations.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'progress_save_every'
        21:50:15.868567 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_every': [5, None]}
        21:50:15.868921 line        62     if not opt_name.startswith('--'):
        21:50:15.869269 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_save_every'
        21:50:15.869579 line        64     if opt_name == '--options':
        21:50:15.869910 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_save_every',)
            Starting var:.. kwargs = {'required': False, 'default': 5, 'help': 'Save ...s_save_every iterations.', 'type': <class 'int'>}
            21:50:15.870230 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.870401 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.870481 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.870583 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 5, 'help': 'Save ...ry', 'option_strings': ['--progress_save_every']}
            21:50:15.870673 line      1327         if 'default' not in kwargs:
            21:50:15.870776 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.870863 line      1336         if not callable(action_class):
            21:50:15.870967 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_save_ev...y progress_save_every iterations.', metavar=None)
            21:50:15.871067 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.871205 line      1342         if not callable(type_func):
            21:50:15.871324 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.871420 line      1347             try:
            21:50:15.871513 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.871661 line      1352         return self._add_action(action)
            21:50:15.871780 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_save_ev...y progress_save_every iterations.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.871917 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        21:50:15.872269 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.872607 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.872761 line       138     if memo is None:
            21:50:15.872830 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.872897 line       141     d = id(x)
            New var:....... d = 140085372337320
            21:50:15.872984 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.873079 line       143     if y is not _nil:
            21:50:15.873175 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.873245 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.873337 line       149     if copier:
            21:50:15.873430 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372337320: {'name': 'progress_report_on_e...time results are saved.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            21:50:15.873568 line       183     if y is not x:
            21:50:15.873689 line       184         memo[d] = y
            21:50:15.873767 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372337320: {'name': 'progress_report_on_e...ime results are saved.', 'type': <class 'int'>}]}
            21:50:15.873849 line       186     return y
            21:50:15.873951 return     186     return y
            Return value:.. {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
        21:50:15.874060 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': True, 'help': 'If... time results are saved.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'progress_report_on_each_save'
        21:50:15.874449 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'progress_report_on_each_save': [True, None]}
        21:50:15.874803 line        62     if not opt_name.startswith('--'):
        21:50:15.875158 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--progress_report_on_each_save'
        21:50:15.875470 line        64     if opt_name == '--options':
        21:50:15.875801 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--progress_report_on_each_save',)
            Starting var:.. kwargs = {'required': False, 'default': True, 'help': 'If... time results are saved.', 'type': <class 'int'>}
            21:50:15.876120 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.876290 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.876369 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.876471 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': True, 'help': 'If...ion_strings': ['--progress_report_on_each_save']}
            21:50:15.876560 line      1327         if 'default' not in kwargs:
            21:50:15.876662 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.876749 line      1336         if not callable(action_class):
            21:50:15.876851 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--progress_report_...port each time results are saved.', metavar=None)
            21:50:15.876945 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.877074 line      1342         if not callable(type_func):
            21:50:15.877200 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.877295 line      1347             try:
            21:50:15.877389 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.877536 line      1352         return self._add_action(action)
            21:50:15.877653 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--progress_report_...port each time results are saved.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.877788 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        21:50:15.878137 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.878479 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.878633 line       138     if memo is None:
            21:50:15.878700 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.878765 line       141     d = id(x)
            New var:....... d = 140085372442232
            21:50:15.878851 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.878938 line       143     if y is not _nil:
            21:50:15.879026 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.879102 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.879199 line       149     if copier:
            21:50:15.879292 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372442232: {'name': 'acq', 'required': Fa...as a hyphen separated list e.g. ucb-ts-ei-ttei'}}
            Modified var:.. y = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:15.879417 line       183     if y is not x:
            21:50:15.879535 line       184         memo[d] = y
            21:50:15.879612 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372442232: {'name': 'acq', 'required': Fa...s a hyphen separated list e.g. ucb-ts-ei-ttei'}]}
            21:50:15.879693 line       186     return y
            21:50:15.879794 return     186     return y
            Return value:.. {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        21:50:15.879900 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
        Modified var:.. opt_name = 'acq'
        21:50:15.880278 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ch_save': [True, None], 'acq': ['default', None]}
        21:50:15.880635 line        62     if not opt_name.startswith('--'):
        21:50:15.880973 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq'
        21:50:15.881296 line        64     if opt_name == '--options':
        21:50:15.881627 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:15.881941 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.882118 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.882198 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.882299 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...tei', 'dest': 'acq', 'option_strings': ['--acq']}
            21:50:15.882387 line      1327         if 'default' not in kwargs:
            21:50:15.882489 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.882574 line      1336         if not callable(action_class):
            21:50:15.882676 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq'], dest='acq...eparated list e.g. ucb-ts-ei-ttei', metavar=None)
            21:50:15.882768 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.882886 line      1342         if not callable(type_func):
            21:50:15.883004 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.883111 line      1347             try:
            21:50:15.883206 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.883351 line      1352         return self._add_action(action)
            21:50:15.883465 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq'], dest='acq...eparated list e.g. ucb-ts-ei-ttei', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.883600 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        21:50:15.883935 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.884289 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.884443 line       138     if memo is None:
            21:50:15.884511 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.884577 line       141     d = id(x)
            New var:....... d = 140085917183720
            21:50:15.884663 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.884752 line       143     if y is not _nil:
            21:50:15.884840 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.884909 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.884999 line       149     if copier:
            21:50:15.885103 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917183720: {'name': 'acq_probs', 'require...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            21:50:15.885232 line       183     if y is not x:
            21:50:15.885352 line       184         memo[d] = y
            21:50:15.885430 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917183720: {'name': 'acq_probs', 'require...t acquisitions according to how well they do.'}]}
            21:50:15.885515 line       186     return y
            21:50:15.885616 return     186     return y
            Return value:.. {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
        21:50:15.885725 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'adaptive', 'help...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'acq_probs'
        21:50:15.886098 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'acq_probs': ['adaptive', None]}
        21:50:15.886456 line        62     if not opt_name.startswith('--'):
        21:50:15.886793 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_probs'
        21:50:15.887115 line        64     if opt_name == '--options':
        21:50:15.887453 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_probs',)
            Starting var:.. kwargs = {'required': False, 'default': 'adaptive', 'help...ght acquisitions according to how well they do.'}
            21:50:15.887767 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.887938 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.888017 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.888128 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'adaptive', 'help...: 'acq_probs', 'option_strings': ['--acq_probs']}
            21:50:15.888219 line      1327         if 'default' not in kwargs:
            21:50:15.888320 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.888407 line      1336         if not callable(action_class):
            21:50:15.888509 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_probs'], des...ns according to how well they do.', metavar=None)
            21:50:15.888601 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.888721 line      1342         if not callable(type_func):
            21:50:15.888838 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.888932 line      1347             try:
            21:50:15.889026 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.889190 line      1352         return self._add_action(action)
            21:50:15.889309 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_probs'], des...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.889447 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        21:50:15.889782 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.890130 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.890283 line       138     if memo is None:
            21:50:15.890350 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.890415 line       141     d = id(x)
            New var:....... d = 140085916752776
            21:50:15.890501 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.890588 line       143     if y is not _nil:
            21:50:15.890676 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.890744 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.890833 line       149     if copier:
            21:50:15.890925 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752776: {'name': 'acq_opt_method', 're... use when maximising the acquisition function.'}}
            Modified var:.. y = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            21:50:15.891050 line       183     if y is not x:
            21:50:15.891183 line       184         memo[d] = y
            21:50:15.891260 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752776: {'name': 'acq_opt_method', 're...use when maximising the acquisition function.'}]}
            21:50:15.891340 line       186     return y
            21:50:15.891439 return     186     return y
            Return value:.. {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
        21:50:15.891544 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...o use when maximising the acquisition function.'}
        Modified var:.. opt_name = 'acq_opt_method'
        21:50:15.891901 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ive', None], 'acq_opt_method': ['default', None]}
        21:50:15.892270 line        62     if not opt_name.startswith('--'):
        21:50:15.892604 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_opt_method'
        21:50:15.892914 line        64     if opt_name == '--options':
        21:50:15.893259 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_opt_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...o use when maximising the acquisition function.'}
            21:50:15.893571 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.893738 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.893815 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.893915 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'..._method', 'option_strings': ['--acq_opt_method']}
            21:50:15.894003 line      1327         if 'default' not in kwargs:
            21:50:15.894114 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.894202 line      1336         if not callable(action_class):
            21:50:15.894303 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_opt_method']...imising the acquisition function.', metavar=None)
            21:50:15.894395 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.894512 line      1342         if not callable(type_func):
            21:50:15.894626 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.894718 line      1347             try:
            21:50:15.894809 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.894957 line      1352         return self._add_action(action)
            21:50:15.895083 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_opt_method']...imising the acquisition function.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.895226 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        21:50:15.895566 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.895898 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.896050 line       138     if memo is None:
            21:50:15.896130 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.896197 line       141     d = id(x)
            New var:....... d = 140085916752704
            21:50:15.896283 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.896371 line       143     if y is not _nil:
            21:50:15.896460 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.896528 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.896619 line       149     if copier:
            21:50:15.896711 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752704: {'name': 'handle_parallel', 'r...e parallelisations. Should be halluc or naive.'}}
            Modified var:.. y = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            21:50:15.896838 line       183     if y is not x:
            21:50:15.896956 line       184         memo[d] = y
            21:50:15.897033 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752704: {'name': 'handle_parallel', 'r... parallelisations. Should be halluc or naive.'}]}
            21:50:15.897123 line       186     return y
            21:50:15.897224 return     186     return y
            Return value:.. {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
        21:50:15.897329 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'halluc', 'help':...le parallelisations. Should be halluc or naive.'}
        Modified var:.. opt_name = 'handle_parallel'
        21:50:15.897686 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ult', None], 'handle_parallel': ['halluc', None]}
        21:50:15.898040 line        62     if not opt_name.startswith('--'):
        21:50:15.898388 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--handle_parallel'
        21:50:15.898702 line        64     if opt_name == '--options':
        21:50:15.899034 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--handle_parallel',)
            Starting var:.. kwargs = {'required': False, 'default': 'halluc', 'help':...le parallelisations. Should be halluc or naive.'}
            21:50:15.899358 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.899529 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.899610 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.899711 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'halluc', 'help':...rallel', 'option_strings': ['--handle_parallel']}
            21:50:15.899799 line      1327         if 'default' not in kwargs:
            21:50:15.899900 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.899986 line      1336         if not callable(action_class):
            21:50:15.900098 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--handle_parallel'...tions. Should be halluc or naive.', metavar=None)
            21:50:15.900193 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.900311 line      1342         if not callable(type_func):
            21:50:15.900425 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.900518 line      1347             try:
            21:50:15.900609 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.900753 line      1352         return self._add_action(action)
            21:50:15.900868 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--handle_parallel'...tions. Should be halluc or naive.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.901002 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        21:50:15.901356 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.901691 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.901842 line       138     if memo is None:
            21:50:15.901911 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.901977 line       141     d = id(x)
            New var:....... d = 140085916752848
            21:50:15.902071 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.902166 line       143     if y is not _nil:
            21:50:15.902257 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.902325 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.902417 line       149     if copier:
            21:50:15.902510 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916752848: {'name': 'acq_opt_max_evals', ...ive uses default value.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            21:50:15.902649 line       183     if y is not x:
            21:50:15.902776 line       184         memo[d] = y
            21:50:15.902854 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916752848: {'name': 'acq_opt_max_evals', ...ve uses default value.', 'type': <class 'int'>}]}
            21:50:15.902936 line       186     return y
            21:50:15.903038 return     186     return y
            Return value:.. {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
        21:50:15.903158 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Numb...tive uses default value.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'acq_opt_max_evals'
        21:50:15.903519 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'halluc', None], 'acq_opt_max_evals': [-1, None]}
        21:50:15.903874 line        62     if not opt_name.startswith('--'):
        21:50:15.904226 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--acq_opt_max_evals'
        21:50:15.904541 line        64     if opt_name == '--options':
        21:50:15.904880 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--acq_opt_max_evals',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Numb...tive uses default value.', 'type': <class 'int'>}
            21:50:15.905205 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.905375 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.905455 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.905556 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Numb...vals', 'option_strings': ['--acq_opt_max_evals']}
            21:50:15.905645 line      1327         if 'default' not in kwargs:
            21:50:15.905748 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.905834 line      1336         if not callable(action_class):
            21:50:15.905936 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--acq_opt_max_eval.... If negative uses default value.', metavar=None)
            21:50:15.906030 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.906161 line      1342         if not callable(type_func):
            21:50:15.906278 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.906371 line      1347             try:
            21:50:15.906462 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.906607 line      1352         return self._add_action(action)
            21:50:15.906724 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--acq_opt_max_eval.... If negative uses default value.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.906862 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        21:50:15.907219 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.907556 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.907709 line       138     if memo is None:
            21:50:15.907778 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.907845 line       141     d = id(x)
            New var:....... d = 140085916803864
            21:50:15.907931 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.908019 line       143     if y is not _nil:
            21:50:15.908122 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.908192 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.908283 line       149     if copier:
            21:50:15.908376 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916803864: {'name': 'gpb_hp_tune_criterio...Other options are post_sampling and post_mean.'}}
            Modified var:.. y = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            21:50:15.908503 line       183     if y is not x:
            21:50:15.908621 line       184         memo[d] = y
            21:50:15.908698 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916803864: {'name': 'gpb_hp_tune_criterio...ther options are post_sampling and post_mean.'}]}
            21:50:15.908779 line       186     return y
            21:50:15.908880 return     186     return y
            Return value:.. {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
        21:50:15.908988 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'ml-post_sampling... Other options are post_sampling and post_mean.'}
        Modified var:.. opt_name = 'gpb_hp_tune_criterion'
        21:50:15.909358 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...b_hp_tune_criterion': ['ml-post_sampling', None]}
        21:50:15.909713 line        62     if not opt_name.startswith('--'):
        21:50:15.910048 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_hp_tune_criterion'
        21:50:15.910375 line        64     if opt_name == '--options':
        21:50:15.910713 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_hp_tune_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'ml-post_sampling... Other options are post_sampling and post_mean.'}
            21:50:15.911028 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.911215 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.911297 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.911397 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'ml-post_sampling...', 'option_strings': ['--gpb_hp_tune_criterion']}
            21:50:15.911486 line      1327         if 'default' not in kwargs:
            21:50:15.911587 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.911673 line      1336         if not callable(action_class):
            21:50:15.911776 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_hp_tune_crit... are post_sampling and post_mean.', metavar=None)
            21:50:15.911869 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.911988 line      1342         if not callable(type_func):
            21:50:15.912113 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.912207 line      1347             try:
            21:50:15.912299 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.912445 line      1352         return self._add_action(action)
            21:50:15.912563 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_hp_tune_crit... are post_sampling and post_mean.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.912700 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        21:50:15.913041 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.913396 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.913551 line       138     if memo is None:
            21:50:15.913620 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.913686 line       141     d = id(x)
            New var:....... d = 140085916804296
            21:50:15.913773 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.913862 line       143     if y is not _nil:
            21:50:15.913951 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.914020 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.914126 line       149     if copier:
            21:50:15.914221 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804296: {'name': 'gpb_hp_tune_probs', ...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            21:50:15.914348 line       183     if y is not x:
            21:50:15.914468 line       184         memo[d] = y
            21:50:15.914547 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804296: {'name': 'gpb_hp_tune_probs', ...t acquisitions according to how well they do.'}]}
            21:50:15.914644 line       186     return y
            21:50:15.914753 return     186     return y
            Return value:.. {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
        21:50:15.914863 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '0.3-0.7', 'help'...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'gpb_hp_tune_probs'
        21:50:15.915240 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...', None], 'gpb_hp_tune_probs': ['0.3-0.7', None]}
        21:50:15.915600 line        62     if not opt_name.startswith('--'):
        21:50:15.915941 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_hp_tune_probs'
        21:50:15.916273 line        64     if opt_name == '--options':
        21:50:15.916615 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_hp_tune_probs',)
            Starting var:.. kwargs = {'required': False, 'default': '0.3-0.7', 'help'...ght acquisitions according to how well they do.'}
            21:50:15.916931 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.917116 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.917198 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.917301 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '0.3-0.7', 'help'...robs', 'option_strings': ['--gpb_hp_tune_probs']}
            21:50:15.917391 line      1327         if 'default' not in kwargs:
            21:50:15.917493 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.917580 line      1336         if not callable(action_class):
            21:50:15.917683 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_hp_tune_prob...ns according to how well they do.', metavar=None)
            21:50:15.917777 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.917898 line      1342         if not callable(type_func):
            21:50:15.918015 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.918120 line      1347             try:
            21:50:15.918216 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.918364 line      1352         return self._add_action(action)
            21:50:15.918481 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_hp_tune_prob...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.918620 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        21:50:15.918966 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.919326 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.919481 line       138     if memo is None:
            21:50:15.919550 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.919616 line       141     d = id(x)
            New var:....... d = 140085916804368
            21:50:15.919701 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.919789 line       143     if y is not _nil:
            21:50:15.919877 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.919945 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.920036 line       149     if copier:
            21:50:15.920142 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804368: {'name': 'gpb_ml_hp_tune_opt',...r to use when maximising the tuning criterion.'}}
            Modified var:.. y = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            21:50:15.920270 line       183     if y is not x:
            21:50:15.920389 line       184         memo[d] = y
            21:50:15.920466 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804368: {'name': 'gpb_ml_hp_tune_opt',... to use when maximising the tuning criterion.'}]}
            21:50:15.920546 line       186     return y
            21:50:15.920646 return     186     return y
            Return value:.. {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
        21:50:15.920751 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
        Modified var:.. opt_name = 'gpb_ml_hp_tune_opt'
        21:50:15.921126 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'gpb_ml_hp_tune_opt': ['default', None]}
        21:50:15.921488 line        62     if not opt_name.startswith('--'):
        21:50:15.921829 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_ml_hp_tune_opt'
        21:50:15.922158 line        64     if opt_name == '--options':
        21:50:15.922494 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_ml_hp_tune_opt',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            21:50:15.922810 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.922981 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.923061 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.923181 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...opt', 'option_strings': ['--gpb_ml_hp_tune_opt']}
            21:50:15.923271 line      1327         if 'default' not in kwargs:
            21:50:15.923374 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.923461 line      1336         if not callable(action_class):
            21:50:15.923564 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_ml_hp_tune_o... maximising the tuning criterion.', metavar=None)
            21:50:15.923657 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.923776 line      1342         if not callable(type_func):
            21:50:15.923892 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.923986 line      1347             try:
            21:50:15.924082 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.924234 line      1352         return self._add_action(action)
            21:50:15.924350 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_ml_hp_tune_o... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.924485 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        21:50:15.924824 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.925179 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.925333 line       138     if memo is None:
            21:50:15.925402 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.925467 line       141     d = id(x)
            New var:....... d = 140085916804440
            21:50:15.925553 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.925640 line       143     if y is not _nil:
            21:50:15.925730 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.925797 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.925887 line       149     if copier:
            21:50:15.925979 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804440: {'name': 'gpb_post_hp_tune_met...ing the tuning criterion. Other option is nuts'}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            21:50:15.926115 line       183     if y is not x:
            21:50:15.926239 line       184         memo[d] = y
            21:50:15.926317 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804440: {'name': 'gpb_post_hp_tune_met...ng the tuning criterion. Other option is nuts'}]}
            21:50:15.926398 line       186     return y
            21:50:15.926502 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
        21:50:15.926608 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...sing the tuning criterion. Other option is nuts'}
        Modified var:.. opt_name = 'gpb_post_hp_tune_method'
        21:50:15.926972 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'gpb_post_hp_tune_method': ['slice', None]}
        21:50:15.927340 line        62     if not opt_name.startswith('--'):
        21:50:15.927679 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_method'
        21:50:15.927993 line        64     if opt_name == '--options':
        21:50:15.928348 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...sing the tuning criterion. Other option is nuts'}
            21:50:15.928669 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.928839 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.928918 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.929018 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'slice', 'help': ... 'option_strings': ['--gpb_post_hp_tune_method']}
            21:50:15.929119 line      1327         if 'default' not in kwargs:
            21:50:15.929221 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.929308 line      1336         if not callable(action_class):
            21:50:15.929410 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...g criterion. Other option is nuts', metavar=None)
            21:50:15.929503 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.929623 line      1342         if not callable(type_func):
            21:50:15.929739 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.929832 line      1347             try:
            21:50:15.929925 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.930077 line      1352         return self._add_action(action)
            21:50:15.930215 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...g criterion. Other option is nuts', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.930357 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.930718 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.931059 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.931229 line       138     if memo is None:
            21:50:15.931298 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.931365 line       141     d = id(x)
            New var:....... d = 140085916804512
            21:50:15.931452 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.931541 line       143     if y is not _nil:
            21:50:15.931631 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.931700 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.931806 line       149     if copier:
            21:50:15.931909 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804512: {'name': 'gpb_post_hp_tune_bur...ignore during sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.932061 line       183     if y is not x:
            21:50:15.932214 line       184         memo[d] = y
            21:50:15.932292 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804512: {'name': 'gpb_post_hp_tune_bur...gnore during sampling.', 'type': <class 'int'>}]}
            21:50:15.932375 line       186     return y
            21:50:15.932476 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
        21:50:15.932583 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'gpb_post_hp_tune_burn'
        21:50:15.932948 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ice', None], 'gpb_post_hp_tune_burn': [-1, None]}
        21:50:15.933319 line        62     if not opt_name.startswith('--'):
        21:50:15.933664 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_burn'
        21:50:15.933981 line        64     if opt_name == '--options':
        21:50:15.934366 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_burn',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            21:50:15.934700 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.934869 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.934950 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.935051 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...', 'option_strings': ['--gpb_post_hp_tune_burn']}
            21:50:15.935154 line      1327         if 'default' not in kwargs:
            21:50:15.935259 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.935347 line      1336         if not callable(action_class):
            21:50:15.935450 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore during sampling.', metavar=None)
            21:50:15.935544 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.935665 line      1342         if not callable(type_func):
            21:50:15.935782 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.935876 line      1347             try:
            21:50:15.935968 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.936120 line      1352         return self._add_action(action)
            21:50:15.936240 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore during sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.936377 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        21:50:15.936723 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.937078 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.937243 line       138     if memo is None:
            21:50:15.937313 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.937380 line       141     d = id(x)
            New var:....... d = 140085916804584
            21:50:15.937467 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.937556 line       143     if y is not _nil:
            21:50:15.937645 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.937714 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.937804 line       149     if copier:
            21:50:15.937896 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804584: {'name': 'gpb_post_hp_tune_off...ignore between samples.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            21:50:15.938036 line       183     if y is not x:
            21:50:15.938168 line       184         memo[d] = y
            21:50:15.938247 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804584: {'name': 'gpb_post_hp_tune_off...gnore between samples.', 'type': <class 'int'>}]}
            21:50:15.938329 line       186     return y
            21:50:15.938430 return     186     return y
            Return value:.. {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
        21:50:15.938538 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'gpb_post_hp_tune_offset'
        21:50:15.938946 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...-1, None], 'gpb_post_hp_tune_offset': [25, None]}
        21:50:15.939439 line        62     if not opt_name.startswith('--'):
        21:50:15.939786 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_post_hp_tune_offset'
        21:50:15.940115 line        64     if opt_name == '--options':
        21:50:15.940460 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_post_hp_tune_offset',)
            Starting var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            21:50:15.940778 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.940948 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.941028 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.941143 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... 'option_strings': ['--gpb_post_hp_tune_offset']}
            21:50:15.941234 line      1327         if 'default' not in kwargs:
            21:50:15.941337 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.941423 line      1336         if not callable(action_class):
            21:50:15.941526 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore between samples.', metavar=None)
            21:50:15.941620 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.941740 line      1342         if not callable(type_func):
            21:50:15.941856 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.941949 line      1347             try:
            21:50:15.942040 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.942196 line      1352         return self._add_action(action)
            21:50:15.942314 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_post_hp_tune...amples to ignore between samples.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.942449 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        21:50:15.942793 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.943148 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.943306 line       138     if memo is None:
            21:50:15.943376 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.943442 line       141     d = id(x)
            New var:....... d = 140085916804656
            21:50:15.943529 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.943617 line       143     if y is not _nil:
            21:50:15.943705 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.943774 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.943864 line       149     if copier:
            21:50:15.943956 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804656: {'name': 'rand_exp_sampling_re...t in rand_exp_sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:15.944106 line       183     if y is not x:
            21:50:15.944233 line       184         memo[d] = y
            21:50:15.944311 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804656: {'name': 'rand_exp_sampling_re... in rand_exp_sampling.', 'type': <class 'int'>}]}
            21:50:15.944394 line       186     return y
            21:50:15.944496 return     186     return y
            Return value:.. {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
        21:50:15.944605 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W...ot in rand_exp_sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'rand_exp_sampling_replace'
        21:50:15.944972 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'rand_exp_sampling_replace': [False, None]}
        21:50:15.945341 line        62     if not opt_name.startswith('--'):
        21:50:15.945687 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--rand_exp_sampling_replace'
        21:50:15.946003 line        64     if opt_name == '--options':
        21:50:15.946361 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--rand_exp_sampling_replace',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:15.946678 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.946849 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.946929 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.947029 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W...option_strings': ['--rand_exp_sampling_replace']}
            21:50:15.947132 line      1327         if 'default' not in kwargs:
            21:50:15.947239 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.947327 line      1336         if not callable(action_class):
            21:50:15.947430 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--rand_exp_samplin...lues or not in rand_exp_sampling.', metavar=None)
            21:50:15.947525 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.947644 line      1342         if not callable(type_func):
            21:50:15.947760 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.947853 line      1347             try:
            21:50:15.947944 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.948097 line      1352         return self._add_action(action)
            21:50:15.948218 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--rand_exp_samplin...lues or not in rand_exp_sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.948355 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        21:50:15.948697 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.949036 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.949203 line       138     if memo is None:
            21:50:15.949271 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.949336 line       141     d = id(x)
            New var:....... d = 140085916804728
            21:50:15.949423 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.949510 line       143     if y is not _nil:
            21:50:15.949599 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.949666 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.949756 line       149     if copier:
            21:50:15.949849 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804728: {'name': 'mf_strategy', 'requi...lity strategy to use. Should be one of {boca}.'}}
            Modified var:.. y = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            21:50:15.949974 line       183     if y is not x:
            21:50:15.950106 line       184         memo[d] = y
            21:50:15.950184 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804728: {'name': 'mf_strategy', 'requi...ity strategy to use. Should be one of {boca}.'}]}
            21:50:15.950264 line       186     return y
            21:50:15.950362 return     186     return y
            Return value:.. {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
        21:50:15.950465 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'boca', 'help': '...elity strategy to use. Should be one of {boca}.'}
        Modified var:.. opt_name = 'mf_strategy'
        21:50:15.950832 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e': [False, None], 'mf_strategy': ['boca', None]}
        21:50:15.951201 line        62     if not opt_name.startswith('--'):
        21:50:15.951540 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mf_strategy'
        21:50:15.951854 line        64     if opt_name == '--options':
        21:50:15.952206 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mf_strategy',)
            Starting var:.. kwargs = {'required': False, 'default': 'boca', 'help': '...elity strategy to use. Should be one of {boca}.'}
            21:50:15.952524 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.952691 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.952770 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.952870 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'boca', 'help': '...f_strategy', 'option_strings': ['--mf_strategy']}
            21:50:15.952958 line      1327         if 'default' not in kwargs:
            21:50:15.953058 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.953157 line      1336         if not callable(action_class):
            21:50:15.953260 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mf_strategy'], d... to use. Should be one of {boca}.', metavar=None)
            21:50:15.953353 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.953470 line      1342         if not callable(type_func):
            21:50:15.953585 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.953678 line      1347             try:
            21:50:15.953769 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.953913 line      1352         return self._add_action(action)
            21:50:15.954028 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mf_strategy'], d... to use. Should be one of {boca}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.954173 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        21:50:15.954513 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.954855 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.955006 line       138     if memo is None:
            21:50:15.955082 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.955158 line       141     d = id(x)
            New var:....... d = 140085916804800
            21:50:15.955245 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.955334 line       143     if y is not _nil:
            21:50:15.955422 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.955490 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.955581 line       149     if copier:
            21:50:15.955673 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804800: {'name': 'gpb_prior_mean', 're...elp': 'The prior mean of the GP for the model.'}}
            Modified var:.. y = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            21:50:15.955799 line       183     if y is not x:
            21:50:15.955915 line       184         memo[d] = y
            21:50:15.955991 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804800: {'name': 'gpb_prior_mean', 're...lp': 'The prior mean of the GP for the model.'}]}
            21:50:15.956079 line       186     return y
            21:50:15.956183 return     186     return y
            Return value:.. {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
        21:50:15.956289 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'The prior mean of the GP for the model.'}
        Modified var:.. opt_name = 'gpb_prior_mean'
        21:50:15.956656 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['boca', None], 'gpb_prior_mean': [None, None]}
        21:50:15.957012 line        62     if not opt_name.startswith('--'):
        21:50:15.957360 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--gpb_prior_mean'
        21:50:15.957679 line        64     if opt_name == '--options':
        21:50:15.958015 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--gpb_prior_mean',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'The prior mean of the GP for the model.'}
            21:50:15.958348 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.958516 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.958595 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.958695 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...or_mean', 'option_strings': ['--gpb_prior_mean']}
            21:50:15.958782 line      1327         if 'default' not in kwargs:
            21:50:15.958883 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.958969 line      1336         if not callable(action_class):
            21:50:15.959079 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--gpb_prior_mean']...ior mean of the GP for the model.', metavar=None)
            21:50:15.959182 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.959302 line      1342         if not callable(type_func):
            21:50:15.959418 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.959511 line      1347             try:
            21:50:15.959603 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.959748 line      1352         return self._add_action(action)
            21:50:15.959864 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--gpb_prior_mean']...ior mean of the GP for the model.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.959996 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        21:50:15.960346 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.960687 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.960839 line       138     if memo is None:
            21:50:15.960906 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.960971 line       141     d = id(x)
            New var:....... d = 140085916804872
            21:50:15.961057 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.961161 line       143     if y is not _nil:
            21:50:15.961250 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.961319 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.961409 line       149     if copier:
            21:50:15.961502 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804872: {'name': 'shrink_kernel_with_t...hat we don't get stuck.", 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            21:50:15.961639 line       183     if y is not x:
            21:50:15.961757 line       184         memo[d] = y
            21:50:15.961835 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804872: {'name': 'shrink_kernel_with_t...at we don't get stuck.", 'type': <class 'int'>}]}
            21:50:15.961917 line       186     return y
            21:50:15.962019 return     186     return y
            Return value:.. {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
        21:50:15.962141 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': "If Tr...that we don't get stuck.", 'type': <class 'int'>}
        Modified var:.. opt_name = 'shrink_kernel_with_time'
        21:50:15.962507 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one, None], 'shrink_kernel_with_time': [0, None]}
        21:50:15.962869 line        62     if not opt_name.startswith('--'):
        21:50:15.963220 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--shrink_kernel_with_time'
        21:50:15.963537 line        64     if opt_name == '--options':
        21:50:15.963875 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--shrink_kernel_with_time',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': "If Tr...that we don't get stuck.", 'type': <class 'int'>}
            21:50:15.964210 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.964379 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.964459 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.964559 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': "If Tr... 'option_strings': ['--shrink_kernel_with_time']}
            21:50:15.964649 line      1327         if 'default' not in kwargs:
            21:50:15.964751 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.964839 line      1336         if not callable(action_class):
            21:50:15.964941 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--shrink_kernel_wi... time so that we don't get stuck.", metavar=None)
            21:50:15.965036 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.965172 line      1342         if not callable(type_func):
            21:50:15.965289 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.965384 line      1347             try:
            21:50:15.965476 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.965622 line      1352         return self._add_action(action)
            21:50:15.965738 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--shrink_kernel_wi... time so that we don't get stuck.", metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.965873 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        21:50:15.966226 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.966570 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.966725 line       138     if memo is None:
            21:50:15.966795 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.966862 line       141     d = id(x)
            New var:....... d = 140085916804944
            21:50:15.966951 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.967040 line       143     if y is not _nil:
            21:50:15.967151 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.967224 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.967317 line       149     if copier:
            21:50:15.967412 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916804944: {'name': 'perturb_thresh', 're...cal stability issues.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            21:50:15.967552 line       183     if y is not x:
            21:50:15.967676 line       184         memo[d] = y
            21:50:15.967758 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916804944: {'name': 'perturb_thresh', 're...al stability issues.', 'type': <class 'float'>}]}
            21:50:15.967843 line       186     return y
            21:50:15.967949 return     186     return y
            Return value:.. {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
        21:50:15.968071 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.0001, 'help': '...ical stability issues.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'perturb_thresh'
        21:50:15.968449 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...me': [0, None], 'perturb_thresh': [0.0001, None]}
        21:50:15.968811 line        62     if not opt_name.startswith('--'):
        21:50:15.969164 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--perturb_thresh'
        21:50:15.969485 line        64     if opt_name == '--options':
        21:50:15.969825 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--perturb_thresh',)
            Starting var:.. kwargs = {'required': False, 'default': 0.0001, 'help': '...ical stability issues.', 'type': <class 'float'>}
            21:50:15.970162 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.970336 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.970418 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.970521 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.0001, 'help': '..._thresh', 'option_strings': ['--perturb_thresh']}
            21:50:15.970612 line      1327         if 'default' not in kwargs:
            21:50:15.970714 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.970802 line      1336         if not callable(action_class):
            21:50:15.970907 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--perturb_thresh']...avoid numerical stability issues.', metavar=None)
            21:50:15.971002 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.971141 line      1342         if not callable(type_func):
            21:50:15.971261 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.971358 line      1347             try:
            21:50:15.971453 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.971601 line      1352         return self._add_action(action)
            21:50:15.971720 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--perturb_thresh']...avoid numerical stability issues.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.971859 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        21:50:15.972215 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.972561 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.972712 line       138     if memo is None:
            21:50:15.972781 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.972846 line       141     d = id(x)
            New var:....... d = 140085916805016
            21:50:15.972933 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.973021 line       143     if y is not _nil:
            21:50:15.973128 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.973199 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.973290 line       149     if copier:
            21:50:15.973382 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805016: {'name': 'track_every_time_ste...tracks every time step.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            21:50:15.973519 line       183     if y is not x:
            21:50:15.973637 line       184         memo[d] = y
            21:50:15.973714 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805016: {'name': 'track_every_time_ste...racks every time step.', 'type': <class 'int'>}]}
            21:50:15.973795 line       186     return y
            21:50:15.973895 return     186     return y
            Return value:.. {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
        21:50:15.974001 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If 1, it tracks every time step.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'track_every_time_step'
        21:50:15.974382 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari....0001, None], 'track_every_time_step': [0, None]}
        21:50:15.974744 line        62     if not opt_name.startswith('--'):
        21:50:15.975093 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--track_every_time_step'
        21:50:15.975415 line        64     if opt_name == '--options':
        21:50:15.975755 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--track_every_time_step',)
            Starting var:.. kwargs = {'required': False, 'default': 0, 'help': 'If 1, it tracks every time step.', 'type': <class 'int'>}
            21:50:15.976083 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.976259 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.976338 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.976438 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0, 'help': 'If 1,...', 'option_strings': ['--track_every_time_step']}
            21:50:15.976527 line      1327         if 'default' not in kwargs:
            21:50:15.976629 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.976716 line      1336         if not callable(action_class):
            21:50:15.976819 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--track_every_time...'If 1, it tracks every time step.', metavar=None)
            21:50:15.976913 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.977032 line      1342         if not callable(type_func):
            21:50:15.977162 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.977256 line      1347             try:
            21:50:15.977348 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.977494 line      1352         return self._add_action(action)
            21:50:15.977610 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--track_every_time...'If 1, it tracks every time step.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.977745 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        21:50:15.978103 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.978450 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.978619 line       138     if memo is None:
            21:50:15.978704 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.978774 line       141     d = id(x)
            New var:....... d = 140085916805088
            21:50:15.978863 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.978955 line       143     if y is not _nil:
            21:50:15.979047 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.979133 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.979229 line       149     if copier:
            21:50:15.979329 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805088: {'name': 'next_pt_std_thresh',... the bandwidth range'), 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            21:50:15.979491 line       183     if y is not x:
            21:50:15.979619 line       184         memo[d] = y
            21:50:15.979700 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805088: {'name': 'next_pt_std_thresh',...the bandwidth range'), 'type': <class 'float'>}]}
            21:50:15.979787 line       186     return y
            21:50:15.979895 return     186     return y
            Return value:.. {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
        21:50:15.980010 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.005, 'help': ('...e the bandwidth range'), 'type': <class 'float'>}
        Modified var:.. opt_name = 'next_pt_std_thresh'
        21:50:15.980394 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [0, None], 'next_pt_std_thresh': [0.005, None]}
        21:50:15.980758 line        62     if not opt_name.startswith('--'):
        21:50:15.981113 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--next_pt_std_thresh'
        21:50:15.981436 line        64     if opt_name == '--options':
        21:50:15.981777 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--next_pt_std_thresh',)
            Starting var:.. kwargs = {'required': False, 'default': 0.005, 'help': ('...e the bandwidth range'), 'type': <class 'float'>}
            21:50:15.982109 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.982281 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.982362 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.982465 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.005, 'help': ('...esh', 'option_strings': ['--next_pt_std_thresh']}
            21:50:15.982556 line      1327         if 'default' not in kwargs:
            21:50:15.982660 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.982749 line      1336         if not callable(action_class):
            21:50:15.982852 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--next_pt_std_thre... will reduce the bandwidth range'), metavar=None)
            21:50:15.982949 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:15.983080 line      1342         if not callable(type_func):
            21:50:15.983206 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.983304 line      1347             try:
            21:50:15.983399 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.983553 line      1352         return self._add_action(action)
            21:50:15.983675 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--next_pt_std_thre... will reduce the bandwidth range'), metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.983817 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        21:50:15.984173 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.984521 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.984674 line       138     if memo is None:
            21:50:15.984742 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.984808 line       141     d = id(x)
            New var:....... d = 140085916805160
            21:50:15.984894 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.984982 line       143     if y is not _nil:
            21:50:15.985080 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.985156 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.985247 line       149     if copier:
            21:50:15.985340 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916805160: {'name': 'nn_report_results_ev...results more frequently', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            21:50:15.985478 line       183     if y is not x:
            21:50:15.985597 line       184         memo[d] = y
            21:50:15.985675 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916805160: {'name': 'nn_report_results_ev...esults more frequently', 'type': <class 'int'>}]}
            21:50:15.985756 line       186     return y
            21:50:15.985857 return     186     return y
            Return value:.. {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
        21:50:15.985965 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'If NN... results more frequently', 'type': <class 'int'>}
        Modified var:.. opt_name = 'nn_report_results_every'
        21:50:15.986344 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...005, None], 'nn_report_results_every': [1, None]}
        21:50:15.986705 line        62     if not opt_name.startswith('--'):
        21:50:15.987051 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--nn_report_results_every'
        21:50:15.987379 line        64     if opt_name == '--options':
        21:50:15.987719 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--nn_report_results_every',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'If NN... results more frequently', 'type': <class 'int'>}
            21:50:15.988040 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.988228 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.988309 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.988410 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'If NN... 'option_strings': ['--nn_report_results_every']}
            21:50:15.988499 line      1327         if 'default' not in kwargs:
            21:50:15.988602 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.988690 line      1336         if not callable(action_class):
            21:50:15.988793 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--nn_report_result...t, report results more frequently', metavar=None)
            21:50:15.988887 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:15.989007 line      1342         if not callable(type_func):
            21:50:15.989135 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.989230 line      1347             try:
            21:50:15.989321 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.989467 line      1352         return self._add_action(action)
            21:50:15.989586 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--nn_report_result...t, report results more frequently', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.989723 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        21:50:15.990076 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.990425 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.990577 line       138     if memo is None:
            21:50:15.990644 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.990709 line       141     d = id(x)
            New var:....... d = 140085372158312
            21:50:15.990794 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.990882 line       143     if y is not _nil:
            21:50:15.990970 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.991038 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.991144 line       149     if copier:
            21:50:15.991240 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372158312: {'name': 'hp_tune_criterion', ...Other options are post_sampling and post_mean.'}}
            Modified var:.. y = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            21:50:15.991366 line       183     if y is not x:
            21:50:15.991487 line       184         memo[d] = y
            21:50:15.991564 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372158312: {'name': 'hp_tune_criterion', ...ther options are post_sampling and post_mean.'}]}
            21:50:15.991645 line       186     return y
            21:50:15.991745 return     186     return y
            Return value:.. {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
        21:50:15.991851 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'ml', 'help': 'Wh... Other options are post_sampling and post_mean.'}
        Modified var:.. opt_name = 'hp_tune_criterion'
        21:50:15.992234 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...y': [1, None], 'hp_tune_criterion': ['ml', None]}
        21:50:15.992597 line        62     if not opt_name.startswith('--'):
        21:50:15.992940 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_criterion'
        21:50:15.993270 line        64     if opt_name == '--options':
        21:50:15.993612 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'ml', 'help': 'Wh... Other options are post_sampling and post_mean.'}
            21:50:15.993935 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.994118 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:15.994200 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:15.994300 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'ml', 'help': 'Wh...rion', 'option_strings': ['--hp_tune_criterion']}
            21:50:15.994388 line      1327         if 'default' not in kwargs:
            21:50:15.994488 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:15.994574 line      1336         if not callable(action_class):
            21:50:15.994674 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_criterio... are post_sampling and post_mean.', metavar=None)
            21:50:15.994767 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:15.994884 line      1342         if not callable(type_func):
            21:50:15.994999 line      1346         if hasattr(self, "_get_formatter"):
            21:50:15.995102 line      1347             try:
            21:50:15.995196 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:15.995342 line      1352         return self._add_action(action)
            21:50:15.995458 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_criterio... are post_sampling and post_mean.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:15.995597 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        21:50:15.995943 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:15.996299 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:15.996453 line       138     if memo is None:
            21:50:15.996521 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:15.996587 line       141     d = id(x)
            New var:....... d = 140085372158960
            21:50:15.996674 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:15.996762 line       143     if y is not _nil:
            21:50:15.996850 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:15.996918 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:15.997008 line       149     if copier:
            21:50:15.997116 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372158960: {'name': 'hp_tune_probs', 'req...ht acquisitions according to how well they do.'}}
            Modified var:.. y = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            21:50:15.997246 line       183     if y is not x:
            21:50:15.997366 line       184         memo[d] = y
            21:50:15.997444 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372158960: {'name': 'hp_tune_probs', 'req...t acquisitions according to how well they do.'}]}
            21:50:15.997527 line       186     return y
            21:50:15.997629 return     186     return y
            Return value:.. {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
        21:50:15.997738 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'uniform', 'help'...ght acquisitions according to how well they do.'}
        Modified var:.. opt_name = 'hp_tune_probs'
        21:50:15.998120 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['ml', None], 'hp_tune_probs': ['uniform', None]}
        21:50:15.998486 line        62     if not opt_name.startswith('--'):
        21:50:15.998830 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_probs'
        21:50:15.999159 line        64     if opt_name == '--options':
        21:50:15.999501 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_probs',)
            Starting var:.. kwargs = {'required': False, 'default': 'uniform', 'help'...ght acquisitions according to how well they do.'}
            21:50:15.999825 call      1307     def add_argument(self, *args, **kwargs):
            21:50:15.999998 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.000085 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.000196 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'uniform', 'help'...ne_probs', 'option_strings': ['--hp_tune_probs']}
            21:50:16.000287 line      1327         if 'default' not in kwargs:
            21:50:16.000388 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.000475 line      1336         if not callable(action_class):
            21:50:16.000577 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_probs'],...ns according to how well they do.', metavar=None)
            21:50:16.000671 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.000792 line      1342         if not callable(type_func):
            21:50:16.000909 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.001004 line      1347             try:
            21:50:16.001109 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.001259 line      1352         return self._add_action(action)
            21:50:16.001378 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_probs'],...ns according to how well they do.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.001514 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        21:50:16.001859 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.002217 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.002370 line       138     if memo is None:
            21:50:16.002437 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.002502 line       141     d = id(x)
            New var:....... d = 140085916973240
            21:50:16.002586 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.002673 line       143     if y is not _nil:
            21:50:16.002761 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.002829 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.002918 line       149     if copier:
            21:50:16.003010 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973240: {'name': 'ml_hp_tune_opt', 're...r to use when maximising the tuning criterion.'}}
            Modified var:.. y = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            21:50:16.003147 line       183     if y is not x:
            21:50:16.003268 line       184         memo[d] = y
            21:50:16.003344 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973240: {'name': 'ml_hp_tune_opt', 're... to use when maximising the tuning criterion.'}]}
            21:50:16.003428 line       186     return y
            21:50:16.003528 return     186     return y
            Return value:.. {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
        21:50:16.003632 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
        Modified var:.. opt_name = 'ml_hp_tune_opt'
        21:50:16.004000 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...orm', None], 'ml_hp_tune_opt': ['default', None]}
        21:50:16.004377 line        62     if not opt_name.startswith('--'):
        21:50:16.004722 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--ml_hp_tune_opt'
        21:50:16.005043 line        64     if opt_name == '--options':
        21:50:16.005398 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--ml_hp_tune_opt',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            21:50:16.005718 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.005886 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.005965 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.006071 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...une_opt', 'option_strings': ['--ml_hp_tune_opt']}
            21:50:16.006168 line      1327         if 'default' not in kwargs:
            21:50:16.006270 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.006357 line      1336         if not callable(action_class):
            21:50:16.006459 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--ml_hp_tune_opt']... maximising the tuning criterion.', metavar=None)
            21:50:16.006552 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.006670 line      1342         if not callable(type_func):
            21:50:16.006785 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.006878 line      1347             try:
            21:50:16.006968 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.007122 line      1352         return self._add_action(action)
            21:50:16.007242 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--ml_hp_tune_opt']... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.007376 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        21:50:16.007725 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.008074 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.008233 line       138     if memo is None:
            21:50:16.008300 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.008366 line       141     d = id(x)
            New var:....... d = 140085916973456
            21:50:16.008452 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.008539 line       143     if y is not _nil:
            21:50:16.008628 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.008696 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.008786 line       149     if copier:
            21:50:16.008878 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973456: {'name': 'hp_tune_max_evals', ...g the tuning criterion.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:16.009016 line       183     if y is not x:
            21:50:16.009152 line       184         memo[d] = y
            21:50:16.009231 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973456: {'name': 'hp_tune_max_evals', ... the tuning criterion.', 'type': <class 'int'>}]}
            21:50:16.009313 line       186     return y
            21:50:16.009413 return     186     return y
            Return value:.. {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
        21:50:16.009520 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ...ng the tuning criterion.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'hp_tune_max_evals'
        21:50:16.009887 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'hp_tune_max_evals': [-1, None]}
        21:50:16.010264 line        62     if not opt_name.startswith('--'):
        21:50:16.010608 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--hp_tune_max_evals'
        21:50:16.010928 line        64     if opt_name == '--options':
        21:50:16.011281 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--hp_tune_max_evals',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:16.011602 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.011771 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.011854 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.011957 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...vals', 'option_strings': ['--hp_tune_max_evals']}
            21:50:16.012046 line      1327         if 'default' not in kwargs:
            21:50:16.012165 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.012254 line      1336         if not callable(action_class):
            21:50:16.012357 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--hp_tune_max_eval... maximising the tuning criterion.', metavar=None)
            21:50:16.012450 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.012570 line      1342         if not callable(type_func):
            21:50:16.012685 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.012778 line      1347             try:
            21:50:16.012870 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.013015 line      1352         return self._add_action(action)
            21:50:16.013145 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--hp_tune_max_eval... maximising the tuning criterion.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.013282 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        21:50:16.013627 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.013969 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.014133 line       138     if memo is None:
            21:50:16.014201 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.014266 line       141     d = id(x)
            New var:....... d = 140085916973600
            21:50:16.014351 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.014438 line       143     if y is not _nil:
            21:50:16.014526 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.014594 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.014684 line       149     if copier:
            21:50:16.014776 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916973600: {'name': 'handle_non_psd_kerne...elp': 'How to handle kernels that are non-psd.'}}
            Modified var:.. y = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            21:50:16.014901 line       183     if y is not x:
            21:50:16.015018 line       184         memo[d] = y
            21:50:16.015106 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916973600: {'name': 'handle_non_psd_kerne...lp': 'How to handle kernels that are non-psd.'}]}
            21:50:16.015192 line       186     return y
            21:50:16.015295 return     186     return y
            Return value:.. {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
        21:50:16.015401 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'guaranteed_psd', 'help': 'How to handle kernels that are non-psd.'}
        Modified var:.. opt_name = 'handle_non_psd_kernels'
        21:50:16.015769 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...andle_non_psd_kernels': ['guaranteed_psd', None]}
        21:50:16.016145 line        62     if not opt_name.startswith('--'):
        21:50:16.016493 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--handle_non_psd_kernels'
        21:50:16.016811 line        64     if opt_name == '--options':
        21:50:16.017161 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--handle_non_psd_kernels',)
            Starting var:.. kwargs = {'required': False, 'default': 'guaranteed_psd', 'help': 'How to handle kernels that are non-psd.'}
            21:50:16.017485 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.017651 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.017729 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.017828 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'guaranteed_psd',..., 'option_strings': ['--handle_non_psd_kernels']}
            21:50:16.017915 line      1327         if 'default' not in kwargs:
            21:50:16.018015 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.018113 line      1336         if not callable(action_class):
            21:50:16.018219 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--handle_non_psd_k... handle kernels that are non-psd.', metavar=None)
            21:50:16.018312 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.018431 line      1342         if not callable(type_func):
            21:50:16.018545 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.018638 line      1347             try:
            21:50:16.018730 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.018875 line      1352         return self._add_action(action)
            21:50:16.018993 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--handle_non_psd_k... handle kernels that are non-psd.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.019142 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        21:50:16.019491 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.019838 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.019991 line       138     if memo is None:
            21:50:16.020058 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.020134 line       141     d = id(x)
            New var:....... d = 140085917009888
            21:50:16.020221 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.020308 line       143     if y is not _nil:
            21:50:16.020396 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.020464 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.020554 line       149     if copier:
            21:50:16.020646 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917009888: {'name': 'mean_func', 'require...ill use this instead of theother options below'}}
            Modified var:.. y = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            21:50:16.020772 line       183     if y is not x:
            21:50:16.020891 line       184         memo[d] = y
            21:50:16.020967 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917009888: {'name': 'mean_func', 'require...ll use this instead of theother options below'}]}
            21:50:16.021048 line       186     return y
            21:50:16.021164 return     186     return y
            Return value:.. {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
        21:50:16.021271 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...will use this instead of theother options below'}
        Modified var:.. opt_name = 'mean_func'
        21:50:16.021640 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...uaranteed_psd', None], 'mean_func': [None, None]}
        21:50:16.022004 line        62     if not opt_name.startswith('--'):
        21:50:16.022361 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func'
        21:50:16.022682 line        64     if opt_name == '--options':
        21:50:16.023024 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func',)
            Starting var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...will use this instead of theother options below'}
            21:50:16.023358 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.023525 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.023604 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.023703 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': None, 'help': 'Th...: 'mean_func', 'option_strings': ['--mean_func']}
            21:50:16.023795 line      1327         if 'default' not in kwargs:
            21:50:16.023896 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.023980 line      1336         if not callable(action_class):
            21:50:16.024094 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func'], des...instead of theother options below', metavar=None)
            21:50:16.024191 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.024309 line      1342         if not callable(type_func):
            21:50:16.024423 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.024515 line      1347             try:
            21:50:16.024606 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.024750 line      1352         return self._add_action(action)
            21:50:16.024865 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func'], des...instead of theother options below', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.024998 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        21:50:16.025356 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.025704 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.025855 line       138     if memo is None:
            21:50:16.025923 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.025989 line       141     d = id(x)
            New var:....... d = 140085372259136
            21:50:16.026081 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.026174 line       143     if y is not _nil:
            21:50:16.026263 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.026331 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.026421 line       149     if copier:
            21:50:16.026514 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085372259136: {'name': 'mean_func_type', 're... If const, specifcy value in mean-func-const.')}}
            Modified var:.. y = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            21:50:16.026661 line       183     if y is not x:
            21:50:16.026782 line       184         memo[d] = y
            21:50:16.026860 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085372259136: {'name': 'mean_func_type', 're...If const, specifcy value in mean-func-const.')}]}
            21:50:16.026943 line       186     return y
            21:50:16.027045 return     186     return y
            Return value:.. {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
        21:50:16.027173 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': (.... If const, specifcy value in mean-func-const.')}
        Modified var:.. opt_name = 'mean_func_type'
        21:50:16.027549 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'mean_func_type': ['tune', None]}
        21:50:16.027915 line        62     if not opt_name.startswith('--'):
        21:50:16.028275 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func_type'
        21:50:16.028599 line        64     if opt_name == '--options':
        21:50:16.028946 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'tune', 'help': (.... If const, specifcy value in mean-func-const.')}
            21:50:16.029279 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.029449 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.029529 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.029631 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tune', 'help': (...nc_type', 'option_strings': ['--mean_func_type']}
            21:50:16.029720 line      1327         if 'default' not in kwargs:
            21:50:16.029822 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.029908 line      1336         if not callable(action_class):
            21:50:16.030010 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func_type']...ecifcy value in mean-func-const.'), metavar=None)
            21:50:16.030116 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.030241 line      1342         if not callable(type_func):
            21:50:16.030358 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.030452 line      1347             try:
            21:50:16.030544 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.030690 line      1352         return self._add_action(action)
            21:50:16.030807 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func_type']...ecifcy value in mean-func-const.'), metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.030944 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        21:50:16.031305 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.031656 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.031812 line       138     if memo is None:
            21:50:16.031881 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.031947 line       141     d = id(x)
            New var:....... d = 140085917009960
            21:50:16.032035 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.032135 line       143     if y is not _nil:
            21:50:16.032226 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.032295 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.032386 line       149     if copier:
            21:50:16.032479 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917009960: {'name': 'mean_func_const', 'r...n_func_type is const.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            21:50:16.032618 line       183     if y is not x:
            21:50:16.032740 line       184         memo[d] = y
            21:50:16.032818 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917009960: {'name': 'mean_func_const', 'r..._func_type is const.', 'type': <class 'float'>}]}
            21:50:16.032901 line       186     return y
            21:50:16.033003 return     186     return y
            Return value:.. {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
        21:50:16.033127 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.0, 'help': 'The...an_func_type is const.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'mean_func_const'
        21:50:16.033504 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['tune', None], 'mean_func_const': [0.0, None]}
        21:50:16.033868 line        62     if not opt_name.startswith('--'):
        21:50:16.034226 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--mean_func_const'
        21:50:16.034552 line        64     if opt_name == '--options':
        21:50:16.034894 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--mean_func_const',)
            Starting var:.. kwargs = {'required': False, 'default': 0.0, 'help': 'The...an_func_type is const.', 'type': <class 'float'>}
            21:50:16.035230 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.035401 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.035482 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.035584 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.0, 'help': 'The..._const', 'option_strings': ['--mean_func_const']}
            21:50:16.035675 line      1327         if 'default' not in kwargs:
            21:50:16.035781 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.035870 line      1336         if not callable(action_class):
            21:50:16.035974 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--mean_func_const'...o use if mean_func_type is const.', metavar=None)
            21:50:16.036076 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:16.036207 line      1342         if not callable(type_func):
            21:50:16.036325 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.036421 line      1347             try:
            21:50:16.036514 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.036662 line      1352         return self._add_action(action)
            21:50:16.036780 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--mean_func_const'...o use if mean_func_type is const.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.036916 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        21:50:16.037285 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.037636 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.037789 line       138     if memo is None:
            21:50:16.037858 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.037923 line       141     d = id(x)
            New var:....... d = 140085917010032
            21:50:16.038009 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.038108 line       143     if y is not _nil:
            21:50:16.038199 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.038268 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.038359 line       149     if copier:
            21:50:16.038452 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010032: {'name': 'noise_var_type', 're...te value in noise_var_label or noise_var_value'}}
            Modified var:.. y = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            21:50:16.038579 line       183     if y is not x:
            21:50:16.038697 line       184         memo[d] = y
            21:50:16.038774 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010032: {'name': 'noise_var_type', 're...e value in noise_var_label or noise_var_value'}]}
            21:50:16.038855 line       186     return y
            21:50:16.038957 return     186     return y
            Return value:.. {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
        21:50:16.039073 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': '...ate value in noise_var_label or noise_var_value'}
        Modified var:.. opt_name = 'noise_var_type'
        21:50:16.039463 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0.0, None], 'noise_var_type': ['tune', None]}
        21:50:16.039833 line        62     if not opt_name.startswith('--'):
        21:50:16.040194 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_type'
        21:50:16.040521 line        64     if opt_name == '--options':
        21:50:16.040866 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'tune', 'help': '...ate value in noise_var_label or noise_var_value'}
            21:50:16.041202 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.041372 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.041452 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.041554 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'tune', 'help': '...ar_type', 'option_strings': ['--noise_var_type']}
            21:50:16.041642 line      1327         if 'default' not in kwargs:
            21:50:16.041744 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.041830 line      1336         if not callable(action_class):
            21:50:16.041933 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_type']...oise_var_label or noise_var_value', metavar=None)
            21:50:16.042026 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.042161 line      1342         if not callable(type_func):
            21:50:16.042279 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.042374 line      1347             try:
            21:50:16.042466 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.042613 line      1352         return self._add_action(action)
            21:50:16.042731 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_type']...oise_var_label or noise_var_value', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.042868 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:16.043233 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.043584 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.043739 line       138     if memo is None:
            21:50:16.043810 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.043882 line       141     d = id(x)
            New var:....... d = 140085917010104
            21:50:16.043972 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.044067 line       143     if y is not _nil:
            21:50:16.044165 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.044237 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.044331 line       149     if copier:
            21:50:16.044430 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010104: {'name': 'noise_var_label', 'r...se as noise variance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.044570 line       183     if y is not x:
            21:50:16.044698 line       184         memo[d] = y
            21:50:16.044778 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010104: {'name': 'noise_var_label', 'r...e as noise variance.', 'type': <class 'float'>}]}
            21:50:16.044862 line       186     return y
            21:50:16.044966 return     186     return y
            Return value:.. {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:16.045087 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.05, 'help': 'Th...use as noise variance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'noise_var_label'
        21:50:16.045469 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... ['tune', None], 'noise_var_label': [0.05, None]}
        21:50:16.045838 line        62     if not opt_name.startswith('--'):
        21:50:16.046204 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_label'
        21:50:16.046531 line        64     if opt_name == '--options':
        21:50:16.046875 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_label',)
            Starting var:.. kwargs = {'required': False, 'default': 0.05, 'help': 'Th...use as noise variance.', 'type': <class 'float'>}
            21:50:16.047216 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.047390 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.047470 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.047573 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.05, 'help': 'Th..._label', 'option_strings': ['--noise_var_label']}
            21:50:16.047664 line      1327         if 'default' not in kwargs:
            21:50:16.047767 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.047856 line      1336         if not callable(action_class):
            21:50:16.047963 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_label'...ariance to use as noise variance.', metavar=None)
            21:50:16.048059 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:16.048196 line      1342         if not callable(type_func):
            21:50:16.048316 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.048412 line      1347             try:
            21:50:16.048506 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.048655 line      1352         return self._add_action(action)
            21:50:16.048774 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_label'...ariance to use as noise variance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.048914 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:16.049279 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.049631 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.049787 line       138     if memo is None:
            21:50:16.049858 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.049927 line       141     d = id(x)
            New var:....... d = 140085917010176
            21:50:16.050016 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.050119 line       143     if y is not _nil:
            21:50:16.050213 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.050284 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.050377 line       149     if copier:
            21:50:16.050472 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010176: {'name': 'noise_var_value', 'r...se as noise variance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.050612 line       183     if y is not x:
            21:50:16.050736 line       184         memo[d] = y
            21:50:16.050818 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010176: {'name': 'noise_var_value', 'r...e as noise variance.', 'type': <class 'float'>}]}
            21:50:16.050903 line       186     return y
            21:50:16.051008 return     186     return y
            Return value:.. {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
        21:50:16.051136 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 0.1, 'help': 'The...use as noise variance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'noise_var_value'
        21:50:16.051512 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...l': [0.05, None], 'noise_var_value': [0.1, None]}
        21:50:16.051886 line        62     if not opt_name.startswith('--'):
        21:50:16.052250 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--noise_var_value'
        21:50:16.052577 line        64     if opt_name == '--options':
        21:50:16.052926 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--noise_var_value',)
            Starting var:.. kwargs = {'required': False, 'default': 0.1, 'help': 'The...use as noise variance.', 'type': <class 'float'>}
            21:50:16.053266 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.053439 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.053521 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.053625 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 0.1, 'help': 'The..._value', 'option_strings': ['--noise_var_value']}
            21:50:16.053717 line      1327         if 'default' not in kwargs:
            21:50:16.053821 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.053910 line      1336         if not callable(action_class):
            21:50:16.054013 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--noise_var_value'...) value to use as noise variance.', metavar=None)
            21:50:16.054120 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:16.054248 line      1342         if not callable(type_func):
            21:50:16.054367 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.054463 line      1347             try:
            21:50:16.054557 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.054707 line      1352         return self._add_action(action)
            21:50:16.054827 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--noise_var_value'...) value to use as noise variance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.054970 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        21:50:16.055339 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.055698 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.055852 line       138     if memo is None:
            21:50:16.055921 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.055987 line       141     d = id(x)
            New var:....... d = 140085917010248
            21:50:16.056078 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.056171 line       143     if y is not _nil:
            21:50:16.056264 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.056333 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.056424 line       149     if copier:
            21:50:16.056517 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010248: {'name': 'post_hp_tune_method'...ng the tuning criterion. Other option is nuts.'}}
            Modified var:.. y = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            21:50:16.056643 line       183     if y is not x:
            21:50:16.056764 line       184         memo[d] = y
            21:50:16.056841 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010248: {'name': 'post_hp_tune_method'...g the tuning criterion. Other option is nuts.'}]}
            21:50:16.056923 line       186     return y
            21:50:16.057023 return     186     return y
            Return value:.. {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
        21:50:16.057145 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...ing the tuning criterion. Other option is nuts.'}
        Modified var:.. opt_name = 'post_hp_tune_method'
        21:50:16.057530 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...1, None], 'post_hp_tune_method': ['slice', None]}
        21:50:16.057904 line        62     if not opt_name.startswith('--'):
        21:50:16.058271 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_method'
        21:50:16.058600 line        64     if opt_name == '--options':
        21:50:16.058955 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_method',)
            Starting var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...ing the tuning criterion. Other option is nuts.'}
            21:50:16.059300 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.059472 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.059552 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.059654 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'slice', 'help': ...od', 'option_strings': ['--post_hp_tune_method']}
            21:50:16.059745 line      1327         if 'default' not in kwargs:
            21:50:16.059847 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.059934 line      1336         if not callable(action_class):
            21:50:16.060035 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_met... criterion. Other option is nuts.', metavar=None)
            21:50:16.060144 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.060267 line      1342         if not callable(type_func):
            21:50:16.060384 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.060478 line      1347             try:
            21:50:16.060571 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.060718 line      1352         return self._add_action(action)
            21:50:16.060834 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_met... criterion. Other option is nuts.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.060968 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        21:50:16.061330 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.061682 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.061834 line       138     if memo is None:
            21:50:16.061902 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.061967 line       141     d = id(x)
            New var:....... d = 140085917010320
            21:50:16.062054 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.062153 line       143     if y is not _nil:
            21:50:16.062243 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.062310 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.062400 line       149     if copier:
            21:50:16.062492 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010320: {'name': 'post_hp_tune_burn', ...ignore during sampling.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.062631 line       183     if y is not x:
            21:50:16.062749 line       184         memo[d] = y
            21:50:16.062826 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010320: {'name': 'post_hp_tune_burn', ...gnore during sampling.', 'type': <class 'int'>}]}
            21:50:16.062906 line       186     return y
            21:50:16.063007 return     186     return y
            Return value:.. {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
        21:50:16.063130 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'post_hp_tune_burn'
        21:50:16.063505 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['slice', None], 'post_hp_tune_burn': [-1, None]}
        21:50:16.063873 line        62     if not opt_name.startswith('--'):
        21:50:16.064239 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_burn'
        21:50:16.064566 line        64     if opt_name == '--options':
        21:50:16.064915 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_burn',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.065252 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.065424 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.065503 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.065604 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'How ...burn', 'option_strings': ['--post_hp_tune_burn']}
            21:50:16.065693 line      1327         if 'default' not in kwargs:
            21:50:16.065794 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.065881 line      1336         if not callable(action_class):
            21:50:16.065983 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_bur...amples to ignore during sampling.', metavar=None)
            21:50:16.066085 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.066211 line      1342         if not callable(type_func):
            21:50:16.066327 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.066421 line      1347             try:
            21:50:16.066513 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.066659 line      1352         return self._add_action(action)
            21:50:16.066776 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_bur...amples to ignore during sampling.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.066911 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        21:50:16.067274 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.067626 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.067778 line       138     if memo is None:
            21:50:16.067847 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.067913 line       141     d = id(x)
            New var:....... d = 140085917010392
            21:50:16.067998 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.068094 line       143     if y is not _nil:
            21:50:16.068185 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.068254 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.068345 line       149     if copier:
            21:50:16.068443 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085917010392: {'name': 'post_hp_tune_offset'...ignore between samples.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            21:50:16.068582 line       183     if y is not x:
            21:50:16.068701 line       184         memo[d] = y
            21:50:16.068779 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085917010392: {'name': 'post_hp_tune_offset'...gnore between samples.', 'type': <class 'int'>}]}
            21:50:16.068860 line       186     return y
            21:50:16.068961 return     186     return y
            Return value:.. {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
        21:50:16.069077 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'post_hp_tune_offset'
        21:50:16.069459 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [-1, None], 'post_hp_tune_offset': [25, None]}
        21:50:16.069829 line        62     if not opt_name.startswith('--'):
        21:50:16.070191 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--post_hp_tune_offset'
        21:50:16.070519 line        64     if opt_name == '--options':
        21:50:16.070867 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--post_hp_tune_offset',)
            Starting var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            21:50:16.071204 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.071374 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.071455 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.071556 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 25, 'help': 'How ...et', 'option_strings': ['--post_hp_tune_offset']}
            21:50:16.071646 line      1327         if 'default' not in kwargs:
            21:50:16.071747 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.071834 line      1336         if not callable(action_class):
            21:50:16.071937 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--post_hp_tune_off...amples to ignore between samples.', metavar=None)
            21:50:16.072031 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.072166 line      1342         if not callable(type_func):
            21:50:16.072283 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.072376 line      1347             try:
            21:50:16.072471 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.072651 line      1352         return self._add_action(action)
            21:50:16.072769 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--post_hp_tune_off...amples to ignore between samples.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.072905 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        21:50:16.073270 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.073622 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.073773 line       138     if memo is None:
            21:50:16.073840 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.073905 line       141     d = id(x)
            New var:....... d = 140085916723528
            21:50:16.073990 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.074081 line       143     if y is not _nil:
            21:50:16.074174 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.074242 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.074332 line       149     if copier:
            21:50:16.074424 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723528: {'name': 'dom_euc_kernel_type'..., 'help': 'Kernel type for euclidean domains. '}}
            Modified var:.. y = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            21:50:16.074550 line       183     if y is not x:
            21:50:16.074668 line       184         memo[d] = y
            21:50:16.074744 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723528: {'name': 'dom_euc_kernel_type'... 'help': 'Kernel type for euclidean domains. '}]}
            21:50:16.074823 line       186     return y
            21:50:16.074921 return     186     return y
            Return value:.. {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
        21:50:16.075026 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for euclidean domains. '}
        Modified var:.. opt_name = 'dom_euc_kernel_type'
        21:50:16.075414 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_kernel_type': ['default', None]}
        21:50:16.075783 line        62     if not opt_name.startswith('--'):
        21:50:16.076146 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_kernel_type'
        21:50:16.076474 line        64     if opt_name == '--options':
        21:50:16.076820 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for euclidean domains. '}
            21:50:16.077154 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.077325 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.077404 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.077503 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...pe', 'option_strings': ['--dom_euc_kernel_type']}
            21:50:16.077590 line      1327         if 'default' not in kwargs:
            21:50:16.077691 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.077776 line      1336         if not callable(action_class):
            21:50:16.077877 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_kernel_t...rnel type for euclidean domains. ', metavar=None)
            21:50:16.077969 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.078099 line      1342         if not callable(type_func):
            21:50:16.078218 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.078311 line      1347             try:
            21:50:16.078402 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.078547 line      1352         return self._add_action(action)
            21:50:16.078664 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_kernel_t...rnel type for euclidean domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.078798 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.079162 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.079514 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.079667 line       138     if memo is None:
            21:50:16.079736 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.079802 line       141     d = id(x)
            New var:....... d = 140085916723600
            21:50:16.079888 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.079976 line       143     if y is not _nil:
            21:50:16.080070 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.080144 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.080237 line       149     if copier:
            21:50:16.080331 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723600: {'name': 'dom_euc_use_same_ban... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.080468 line       183     if y is not x:
            21:50:16.080591 line       184         memo[d] = y
            21:50:16.080669 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723600: {'name': 'dom_euc_use_same_ban...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:16.080751 line       186     return y
            21:50:16.080853 return     186     return y
            Return value:.. {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.080961 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_use_same_bandwidth'
        21:50:16.081356 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_euc_use_same_bandwidth': [False, None]}
        21:50:16.081729 line        62     if not opt_name.startswith('--'):
        21:50:16.082087 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_use_same_bandwidth'
        21:50:16.082418 line        64     if opt_name == '--options':
        21:50:16.082767 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.083108 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.083280 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.083360 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.083461 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...ption_strings': ['--dom_euc_use_same_bandwidth']}
            21:50:16.083551 line      1327         if 'default' not in kwargs:
            21:50:16.083653 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.083740 line      1336         if not callable(action_class):
            21:50:16.083843 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_use_same...e is se or matern. Default=False.', metavar=None)
            21:50:16.083939 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.084059 line      1342         if not callable(type_func):
            21:50:16.084189 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.084285 line      1347             try:
            21:50:16.084378 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.084524 line      1352         return self._add_action(action)
            21:50:16.084641 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_use_same...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.084781 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:16.085146 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.085499 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.085651 line       138     if memo is None:
            21:50:16.085718 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.085782 line       141     d = id(x)
            New var:....... d = 140085916723672
            21:50:16.085867 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.085954 line       143     if y is not _nil:
            21:50:16.086041 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.086118 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.086211 line       149     if copier:
            21:50:16.086304 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723672: {'name': 'dom_euc_matern_nu', ...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.086429 line       183     if y is not x:
            21:50:16.086547 line       184         memo[d] = y
            21:50:16.086623 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723672: {'name': 'dom_euc_matern_nu', ...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.086703 line       186     return y
            21:50:16.086801 return     186     return y
            Return value:.. {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:16.086905 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_euc_matern_nu'
        21:50:16.087298 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_euc_matern_nu': ['default', None]}
        21:50:16.087671 line        62     if not opt_name.startswith('--'):
        21:50:16.088021 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_matern_nu'
        21:50:16.088358 line        64     if opt_name == '--options':
        21:50:16.088705 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.089035 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.089218 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.089298 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.089397 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...n_nu', 'option_strings': ['--dom_euc_matern_nu']}
            21:50:16.089485 line      1327         if 'default' not in kwargs:
            21:50:16.089586 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.089671 line      1336         if not callable(action_class):
            21:50:16.089773 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_matern_n...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.089866 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.089986 line      1342         if not callable(type_func):
            21:50:16.090115 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.090211 line      1347             try:
            21:50:16.090304 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.090449 line      1352         return self._add_action(action)
            21:50:16.090566 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_matern_n...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.090699 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.091053 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.091422 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.091576 line       138     if memo is None:
            21:50:16.091645 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.091711 line       141     d = id(x)
            New var:....... d = 140085916723744
            21:50:16.091796 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.091883 line       143     if y is not _nil:
            21:50:16.091972 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.092040 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.092141 line       149     if copier:
            21:50:16.092235 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723744: {'name': 'dom_euc_poly_order',...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.092375 line       183     if y is not x:
            21:50:16.092494 line       184         memo[d] = y
            21:50:16.092575 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723744: {'name': 'dom_euc_poly_order',... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:16.092657 line       186     return y
            21:50:16.092758 return     186     return y
            Return value:.. {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.092867 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_poly_order'
        21:50:16.093261 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_euc_poly_order': [1, None]}
        21:50:16.093635 line        62     if not opt_name.startswith('--'):
        21:50:16.093986 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_poly_order'
        21:50:16.094327 line        64     if opt_name == '--options':
        21:50:16.094677 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.095006 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.095185 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.095265 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.095366 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...der', 'option_strings': ['--dom_euc_poly_order']}
            21:50:16.095457 line      1327         if 'default' not in kwargs:
            21:50:16.095559 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.095646 line      1336         if not callable(action_class):
            21:50:16.095749 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:16.095843 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.095963 line      1342         if not callable(type_func):
            21:50:16.096088 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.096189 line      1347             try:
            21:50:16.096282 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.096428 line      1352         return self._add_action(action)
            21:50:16.096545 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.096680 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:16.097036 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.097403 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.097555 line       138     if memo is None:
            21:50:16.097624 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.097689 line       141     d = id(x)
            New var:....... d = 140085916723816
            21:50:16.097776 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.097864 line       143     if y is not _nil:
            21:50:16.097953 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.098022 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.098123 line       149     if copier:
            21:50:16.098218 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723816: {'name': 'dom_euc_use_additive...to use an additive GP. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.098357 line       183     if y is not x:
            21:50:16.098477 line       184         memo[d] = y
            21:50:16.098555 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723816: {'name': 'dom_euc_use_additive...o use an additive GP. ', 'type': <class 'int'>}]}
            21:50:16.098638 line       186     return y
            21:50:16.098738 return     186     return y
            Return value:.. {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:16.098846 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_use_additive_gp'
        21:50:16.099240 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_use_additive_gp': [False, None]}
        21:50:16.099614 line        62     if not opt_name.startswith('--'):
        21:50:16.099966 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_use_additive_gp'
        21:50:16.100306 line        64     if opt_name == '--options':
        21:50:16.100654 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_use_additive_gp',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.100984 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.101167 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.101248 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.101349 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W... 'option_strings': ['--dom_euc_use_additive_gp']}
            21:50:16.101438 line      1327         if 'default' not in kwargs:
            21:50:16.101539 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.101625 line      1336         if not callable(action_class):
            21:50:16.101727 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_use_addi...er or not to use an additive GP. ', metavar=None)
            21:50:16.101820 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.101939 line      1342         if not callable(type_func):
            21:50:16.102054 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.102163 line      1347             try:
            21:50:16.102256 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.102402 line      1352         return self._add_action(action)
            21:50:16.102518 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_use_addi...er or not to use an additive GP. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.102653 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:16.103007 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.103376 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.103528 line       138     if memo is None:
            21:50:16.103596 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.103662 line       141     d = id(x)
            New var:....... d = 140085916723888
            21:50:16.103748 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.103835 line       143     if y is not _nil:
            21:50:16.103924 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.103991 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.104090 line       149     if copier:
            21:50:16.104185 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723888: {'name': 'dom_euc_add_max_grou...the additive grouping. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.104324 line       183     if y is not x:
            21:50:16.104443 line       184         memo[d] = y
            21:50:16.104520 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723888: {'name': 'dom_euc_add_max_grou...he additive grouping. ', 'type': <class 'int'>}]}
            21:50:16.104601 line       186     return y
            21:50:16.104706 return     186     return y
            Return value:.. {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:16.104814 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_add_max_group_size'
        21:50:16.105210 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_add_max_group_size': [6, None]}
        21:50:16.105583 line        62     if not opt_name.startswith('--'):
        21:50:16.105940 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_max_group_size'
        21:50:16.106282 line        64     if opt_name == '--options':
        21:50:16.106633 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_max_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.106962 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.107142 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.107223 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.107323 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m...ption_strings': ['--dom_euc_add_max_group_size']}
            21:50:16.107413 line      1327         if 'default' not in kwargs:
            21:50:16.107515 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.107602 line      1336         if not callable(action_class):
            21:50:16.107704 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_max_...groups in the additive grouping. ', metavar=None)
            21:50:16.107798 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.107919 line      1342         if not callable(type_func):
            21:50:16.108035 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.108144 line      1347             try:
            21:50:16.108237 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.108383 line      1352         return self._add_action(action)
            21:50:16.108500 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_max_...groups in the additive grouping. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.108636 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:16.108990 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.109359 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.109512 line       138     if memo is None:
            21:50:16.109579 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.109644 line       141     d = id(x)
            New var:....... d = 140085916723960
            21:50:16.109729 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.109817 line       143     if y is not _nil:
            21:50:16.109904 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.109972 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.110062 line       149     if copier:
            21:50:16.110165 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916723960: {'name': 'dom_euc_add_grouping...ng algorithm, should be one of {randomised_ml}'}}
            Modified var:.. y = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.110291 line       183     if y is not x:
            21:50:16.110408 line       184         memo[d] = y
            21:50:16.110484 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916723960: {'name': 'dom_euc_add_grouping...g algorithm, should be one of {randomised_ml}'}]}
            21:50:16.110565 line       186     return y
            21:50:16.110665 return     186     return y
            Return value:.. {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:16.110770 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
        Modified var:.. opt_name = 'dom_euc_add_grouping_criterion'
        21:50:16.111162 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
        21:50:16.111536 line        62     if not opt_name.startswith('--'):
        21:50:16.111889 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_grouping_criterion'
        21:50:16.112232 line        64     if opt_name == '--options':
        21:50:16.112583 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_grouping_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.112913 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.113088 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.113170 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.113271 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...n_strings': ['--dom_euc_add_grouping_criterion']}
            21:50:16.113363 line      1327         if 'default' not in kwargs:
            21:50:16.113464 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.113551 line      1336         if not callable(action_class):
            21:50:16.113653 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_grou... should be one of {randomised_ml}', metavar=None)
            21:50:16.113746 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.113865 line      1342         if not callable(type_func):
            21:50:16.113979 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.114080 line      1347             try:
            21:50:16.114180 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.114327 line      1352         return self._add_action(action)
            21:50:16.114443 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_grou... should be one of {randomised_ml}', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.114579 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:16.114932 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.115298 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.115451 line       138     if memo is None:
            21:50:16.115520 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.115585 line       141     d = id(x)
            New var:....... d = 140085916724032
            21:50:16.115672 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.115760 line       143     if y is not _nil:
            21:50:16.115848 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.115915 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.116006 line       149     if copier:
            21:50:16.116109 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724032: {'name': 'dom_euc_num_groups_p... to try per group size.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.116249 line       183     if y is not x:
            21:50:16.116368 line       184         memo[d] = y
            21:50:16.116446 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724032: {'name': 'dom_euc_num_groups_p...to try per group size.', 'type': <class 'int'>}]}
            21:50:16.116528 line       186     return y
            21:50:16.116630 return     186     return y
            Return value:.. {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:16.116741 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_num_groups_per_group_size'
        21:50:16.117133 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_euc_num_groups_per_group_size': [-1, None]}
        21:50:16.117508 line        62     if not opt_name.startswith('--'):
        21:50:16.117863 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_num_groups_per_group_size'
        21:50:16.118206 line        64     if opt_name == '--options':
        21:50:16.118558 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_num_groups_per_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            21:50:16.118887 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.119057 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.119146 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.119250 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...trings': ['--dom_euc_num_groups_per_group_size']}
            21:50:16.119339 line      1327         if 'default' not in kwargs:
            21:50:16.119441 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.119528 line      1336         if not callable(action_class):
            21:50:16.119631 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_num_grou... of groups to try per group size.', metavar=None)
            21:50:16.119724 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.119844 line      1342         if not callable(type_func):
            21:50:16.119959 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.120053 line      1347             try:
            21:50:16.120159 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.120307 line      1352         return self._add_action(action)
            21:50:16.120424 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_num_grou... of groups to try per group size.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.120560 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:16.120919 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.121285 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.121442 line       138     if memo is None:
            21:50:16.121510 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.121576 line       141     d = id(x)
            New var:....... d = 140085916724104
            21:50:16.121662 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.121749 line       143     if y is not _nil:
            21:50:16.121837 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.121905 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.121996 line       149     if copier:
            21:50:16.122097 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724104: {'name': 'dom_euc_add_group_si...he group size, should be one of {max,sampled}.'}}
            Modified var:.. y = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.122225 line       183     if y is not x:
            21:50:16.122343 line       184         memo[d] = y
            21:50:16.122420 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724104: {'name': 'dom_euc_add_group_si...e group size, should be one of {max,sampled}.'}]}
            21:50:16.122500 line       186     return y
            21:50:16.122600 return     186     return y
            Return value:.. {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:16.122706 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
        Modified var:.. opt_name = 'dom_euc_add_group_size_criterion'
        21:50:16.123099 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...euc_add_group_size_criterion': ['sampled', None]}
        21:50:16.123474 line        62     if not opt_name.startswith('--'):
        21:50:16.123827 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_add_group_size_criterion'
        21:50:16.124168 line        64     if opt_name == '--options':
        21:50:16.124525 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_add_group_size_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            21:50:16.124861 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.125029 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.125118 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.125220 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...strings': ['--dom_euc_add_group_size_criterion']}
            21:50:16.125308 line      1327         if 'default' not in kwargs:
            21:50:16.125414 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.125501 line      1336         if not callable(action_class):
            21:50:16.125603 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_add_grou..., should be one of {max,sampled}.', metavar=None)
            21:50:16.125696 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.125815 line      1342         if not callable(type_func):
            21:50:16.125930 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.126024 line      1347             try:
            21:50:16.126130 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.126280 line      1352         return self._add_action(action)
            21:50:16.126397 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_add_grou..., should be one of {max,sampled}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.126532 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.126890 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.127260 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.127414 line       138     if memo is None:
            21:50:16.127482 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.127549 line       141     d = id(x)
            New var:....... d = 140085916724176
            21:50:16.127634 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.127721 line       143     if y is not _nil:
            21:50:16.127809 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.127876 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.127966 line       149     if copier:
            21:50:16.128058 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724176: {'name': 'dom_euc_esp_order', ...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.128207 line       183     if y is not x:
            21:50:16.128327 line       184         memo[d] = y
            21:50:16.128404 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724176: {'name': 'dom_euc_esp_order', ...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:16.128485 line       186     return y
            21:50:16.128585 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.128693 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_euc_esp_order'
        21:50:16.129084 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_euc_esp_order': [-1, None]}
        21:50:16.129464 line        62     if not opt_name.startswith('--'):
        21:50:16.129821 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_order'
        21:50:16.130167 line        64     if opt_name == '--options':
        21:50:16.130519 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.130854 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.131021 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.131109 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.131212 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde...rder', 'option_strings': ['--dom_euc_esp_order']}
            21:50:16.131300 line      1327         if 'default' not in kwargs:
            21:50:16.131402 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.131489 line      1336         if not callable(action_class):
            21:50:16.131592 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_orde..., help='Order of the esp kernel. ', metavar=None)
            21:50:16.131686 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.131805 line      1342         if not callable(type_func):
            21:50:16.131920 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.132013 line      1347             try:
            21:50:16.132117 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.132266 line      1352         return self._add_action(action)
            21:50:16.132383 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_orde..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.132517 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:16.132874 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.133245 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.133402 line       138     if memo is None:
            21:50:16.133470 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.133535 line       141     d = id(x)
            New var:....... d = 140085916724248
            21:50:16.133621 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.133708 line       143     if y is not _nil:
            21:50:16.133796 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.133862 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.133951 line       149     if copier:
            21:50:16.134043 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724248: {'name': 'dom_euc_esp_kernel_t...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.134178 line       183     if y is not x:
            21:50:16.134298 line       184         memo[d] = y
            21:50:16.134374 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724248: {'name': 'dom_euc_esp_kernel_t...e of kernel. This depends on the application.'}]}
            21:50:16.134454 line       186     return y
            21:50:16.134553 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:16.134658 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_euc_esp_kernel_type'
        21:50:16.135035 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_esp_kernel_type': ['se', None]}
        21:50:16.135426 line        62     if not opt_name.startswith('--'):
        21:50:16.135783 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_kernel_type'
        21:50:16.136127 line        64     if opt_name == '--options':
        21:50:16.136483 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:16.136816 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.136984 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.137069 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.137176 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp... 'option_strings': ['--dom_euc_esp_kernel_type']}
            21:50:16.137266 line      1327         if 'default' not in kwargs:
            21:50:16.137368 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.137454 line      1336         if not callable(action_class):
            21:50:16.137559 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_kern... This depends on the application.', metavar=None)
            21:50:16.137653 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.137772 line      1342         if not callable(type_func):
            21:50:16.137885 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.137978 line      1347             try:
            21:50:16.138076 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.138229 line      1352         return self._add_action(action)
            21:50:16.138346 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_kern... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.138481 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:16.138838 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.139206 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.139361 line       138     if memo is None:
            21:50:16.139428 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.139494 line       141     d = id(x)
            New var:....... d = 140085916724320
            21:50:16.139580 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.139667 line       143     if y is not _nil:
            21:50:16.139755 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.139823 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.139912 line       149     if copier:
            21:50:16.140004 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724320: {'name': 'dom_euc_esp_matern_n...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.140136 line       183     if y is not x:
            21:50:16.140259 line       184         memo[d] = y
            21:50:16.140336 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724320: {'name': 'dom_euc_esp_matern_n...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.140415 line       186     return y
            21:50:16.140514 return     186     return y
            Return value:.. {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:16.140619 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_euc_esp_matern_nu'
        21:50:16.141000 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_euc_esp_matern_nu': ['default', None]}
        21:50:16.141395 line        62     if not opt_name.startswith('--'):
        21:50:16.141749 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_euc_esp_matern_nu'
        21:50:16.142088 line        64     if opt_name == '--options':
        21:50:16.142448 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_euc_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.142780 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.142949 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.143028 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.143138 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...', 'option_strings': ['--dom_euc_esp_matern_nu']}
            21:50:16.143228 line      1327         if 'default' not in kwargs:
            21:50:16.143329 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.143416 line      1336         if not callable(action_class):
            21:50:16.143517 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_euc_esp_mate...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.143611 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.143730 line      1342         if not callable(type_func):
            21:50:16.143844 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.143937 line      1347             try:
            21:50:16.144028 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.144189 line      1352         return self._add_action(action)
            21:50:16.144308 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_euc_esp_mate...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.144443 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        21:50:16.144802 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.145171 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.145323 line       138     if memo is None:
            21:50:16.145390 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.145455 line       141     d = id(x)
            New var:....... d = 140085916724392
            21:50:16.145545 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.145632 line       143     if y is not _nil:
            21:50:16.145719 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.145786 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.145876 line       149     if copier:
            21:50:16.145968 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724392: {'name': 'dom_int_kernel_type'...', 'help': 'Kernel type for integral domains. '}}
            Modified var:.. y = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            21:50:16.146100 line       183     if y is not x:
            21:50:16.146223 line       184         memo[d] = y
            21:50:16.146300 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724392: {'name': 'dom_int_kernel_type'..., 'help': 'Kernel type for integral domains. '}]}
            21:50:16.146380 line       186     return y
            21:50:16.146479 return     186     return y
            Return value:.. {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
        21:50:16.146585 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for integral domains. '}
        Modified var:.. opt_name = 'dom_int_kernel_type'
        21:50:16.146962 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_kernel_type': ['default', None]}
        21:50:16.147351 line        62     if not opt_name.startswith('--'):
        21:50:16.147706 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_kernel_type'
        21:50:16.148037 line        64     if opt_name == '--options':
        21:50:16.148406 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for integral domains. '}
            21:50:16.148742 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.148908 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.148986 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.149094 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...pe', 'option_strings': ['--dom_int_kernel_type']}
            21:50:16.149183 line      1327         if 'default' not in kwargs:
            21:50:16.149283 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.149369 line      1336         if not callable(action_class):
            21:50:16.149470 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_kernel_t...ernel type for integral domains. ', metavar=None)
            21:50:16.149566 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.149685 line      1342         if not callable(type_func):
            21:50:16.149800 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.149892 line      1347             try:
            21:50:16.149983 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.150136 line      1352         return self._add_action(action)
            21:50:16.150257 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_kernel_t...ernel type for integral domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.150394 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.150750 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.151119 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.151273 line       138     if memo is None:
            21:50:16.151341 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.151407 line       141     d = id(x)
            New var:....... d = 140085916724464
            21:50:16.151494 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.151581 line       143     if y is not _nil:
            21:50:16.151671 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.151741 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.151832 line       149     if copier:
            21:50:16.151924 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724464: {'name': 'dom_int_use_same_ban... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.152067 line       183     if y is not x:
            21:50:16.152194 line       184         memo[d] = y
            21:50:16.152274 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724464: {'name': 'dom_int_use_same_ban...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:16.152356 line       186     return y
            21:50:16.152459 return     186     return y
            Return value:.. {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.152569 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_use_same_bandwidth'
        21:50:16.152951 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_int_use_same_bandwidth': [False, None]}
        21:50:16.153347 line        62     if not opt_name.startswith('--'):
        21:50:16.153708 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_use_same_bandwidth'
        21:50:16.154044 line        64     if opt_name == '--options':
        21:50:16.154411 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.154745 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.154914 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.154994 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.155106 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...ption_strings': ['--dom_int_use_same_bandwidth']}
            21:50:16.155198 line      1327         if 'default' not in kwargs:
            21:50:16.155302 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.155390 line      1336         if not callable(action_class):
            21:50:16.155492 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_use_same...e is se or matern. Default=False.', metavar=None)
            21:50:16.155587 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.155709 line      1342         if not callable(type_func):
            21:50:16.155826 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.155920 line      1347             try:
            21:50:16.156012 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.156172 line      1352         return self._add_action(action)
            21:50:16.156291 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_use_same...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.156427 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:16.156792 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.157165 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.157318 line       138     if memo is None:
            21:50:16.157387 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.157453 line       141     d = id(x)
            New var:....... d = 140085916724536
            21:50:16.157539 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.157627 line       143     if y is not _nil:
            21:50:16.157719 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.157787 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.157878 line       149     if copier:
            21:50:16.157970 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724536: {'name': 'dom_int_matern_nu', ...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.158103 line       183     if y is not x:
            21:50:16.158227 line       184         memo[d] = y
            21:50:16.158304 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724536: {'name': 'dom_int_matern_nu', ...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.158384 line       186     return y
            21:50:16.158484 return     186     return y
            Return value:.. {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
        21:50:16.158588 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_int_matern_nu'
        21:50:16.158969 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_int_matern_nu': ['default', None]}
        21:50:16.159369 line        62     if not opt_name.startswith('--'):
        21:50:16.159732 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_matern_nu'
        21:50:16.160072 line        64     if opt_name == '--options':
        21:50:16.160434 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.160769 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.160936 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.161016 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.161127 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...n_nu', 'option_strings': ['--dom_int_matern_nu']}
            21:50:16.161218 line      1327         if 'default' not in kwargs:
            21:50:16.161320 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.161407 line      1336         if not callable(action_class):
            21:50:16.161509 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_matern_n...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.161604 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.161727 line      1342         if not callable(type_func):
            21:50:16.161842 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.161936 line      1347             try:
            21:50:16.162033 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.162200 line      1352         return self._add_action(action)
            21:50:16.162320 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_matern_n...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.162456 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.162815 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.163186 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.163339 line       138     if memo is None:
            21:50:16.163406 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.163472 line       141     d = id(x)
            New var:....... d = 140085916724608
            21:50:16.163558 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.163645 line       143     if y is not _nil:
            21:50:16.163732 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.163800 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.163891 line       149     if copier:
            21:50:16.163982 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724608: {'name': 'dom_int_poly_order',...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.164126 line       183     if y is not x:
            21:50:16.164251 line       184         memo[d] = y
            21:50:16.164329 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724608: {'name': 'dom_int_poly_order',... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:16.164410 line       186     return y
            21:50:16.164510 return     186     return y
            Return value:.. {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.164618 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_poly_order'
        21:50:16.164997 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_int_poly_order': [1, None]}
        21:50:16.165392 line        62     if not opt_name.startswith('--'):
        21:50:16.165760 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_poly_order'
        21:50:16.166107 line        64     if opt_name == '--options':
        21:50:16.166463 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.166800 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.166969 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.167048 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.167160 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...der', 'option_strings': ['--dom_int_poly_order']}
            21:50:16.167251 line      1327         if 'default' not in kwargs:
            21:50:16.167353 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.167440 line      1336         if not callable(action_class):
            21:50:16.167542 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:16.167635 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.167753 line      1342         if not callable(type_func):
            21:50:16.167867 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.167960 line      1347             try:
            21:50:16.168051 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.168212 line      1352         return self._add_action(action)
            21:50:16.168330 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_poly_ord...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.168466 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:16.168823 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.169197 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.169351 line       138     if memo is None:
            21:50:16.169420 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.169486 line       141     d = id(x)
            New var:....... d = 140085916724680
            21:50:16.169573 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.169661 line       143     if y is not _nil:
            21:50:16.169749 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.169817 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.169906 line       149     if copier:
            21:50:16.170003 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724680: {'name': 'dom_int_use_additive...to use an additive GP. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.170147 line       183     if y is not x:
            21:50:16.170272 line       184         memo[d] = y
            21:50:16.170351 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724680: {'name': 'dom_int_use_additive...o use an additive GP. ', 'type': <class 'int'>}]}
            21:50:16.170433 line       186     return y
            21:50:16.170533 return     186     return y
            Return value:.. {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
        21:50:16.170641 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_use_additive_gp'
        21:50:16.171024 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_use_additive_gp': [False, None]}
        21:50:16.171421 line        62     if not opt_name.startswith('--'):
        21:50:16.171782 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_use_additive_gp'
        21:50:16.172127 line        64     if opt_name == '--options':
        21:50:16.172485 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_use_additive_gp',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.172819 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.172988 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.173073 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.173178 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'W... 'option_strings': ['--dom_int_use_additive_gp']}
            21:50:16.173269 line      1327         if 'default' not in kwargs:
            21:50:16.173371 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.173457 line      1336         if not callable(action_class):
            21:50:16.173559 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_use_addi...er or not to use an additive GP. ', metavar=None)
            21:50:16.173653 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.173771 line      1342         if not callable(type_func):
            21:50:16.173885 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.173977 line      1347             try:
            21:50:16.174079 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.174233 line      1352         return self._add_action(action)
            21:50:16.174352 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_use_addi...er or not to use an additive GP. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.174488 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:16.174845 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.175217 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.175370 line       138     if memo is None:
            21:50:16.175438 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.175503 line       141     d = id(x)
            New var:....... d = 140085916724752
            21:50:16.175589 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.175677 line       143     if y is not _nil:
            21:50:16.175766 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.175834 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.175923 line       149     if copier:
            21:50:16.176015 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724752: {'name': 'dom_int_add_max_grou...the additive grouping. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.176162 line       183     if y is not x:
            21:50:16.176284 line       184         memo[d] = y
            21:50:16.176361 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724752: {'name': 'dom_int_add_max_grou...he additive grouping. ', 'type': <class 'int'>}]}
            21:50:16.176443 line       186     return y
            21:50:16.176543 return     186     return y
            Return value:.. {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
        21:50:16.176651 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_add_max_group_size'
        21:50:16.177030 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_add_max_group_size': [6, None]}
        21:50:16.177425 line        62     if not opt_name.startswith('--'):
        21:50:16.177786 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_max_group_size'
        21:50:16.178130 line        64     if opt_name == '--options':
        21:50:16.178486 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_max_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.178824 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.179021 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.179114 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.179218 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 6, 'help': 'The m...ption_strings': ['--dom_int_add_max_group_size']}
            21:50:16.179309 line      1327         if 'default' not in kwargs:
            21:50:16.179411 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.179499 line      1336         if not callable(action_class):
            21:50:16.179601 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_max_...groups in the additive grouping. ', metavar=None)
            21:50:16.179695 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.179815 line      1342         if not callable(type_func):
            21:50:16.179930 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.180022 line      1347             try:
            21:50:16.180128 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.180277 line      1352         return self._add_action(action)
            21:50:16.180394 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_max_...groups in the additive grouping. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.180529 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:16.180888 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.181268 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.181420 line       138     if memo is None:
            21:50:16.181488 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.181553 line       141     d = id(x)
            New var:....... d = 140085916724824
            21:50:16.181638 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.181726 line       143     if y is not _nil:
            21:50:16.181814 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.181881 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.181971 line       149     if copier:
            21:50:16.182068 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724824: {'name': 'dom_int_add_grouping...ng algorithm, should be one of {randomised_ml}'}}
            Modified var:.. y = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.182200 line       183     if y is not x:
            21:50:16.182323 line       184         memo[d] = y
            21:50:16.182399 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724824: {'name': 'dom_int_add_grouping...g algorithm, should be one of {randomised_ml}'}]}
            21:50:16.182480 line       186     return y
            21:50:16.182579 return     186     return y
            Return value:.. {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
        21:50:16.182684 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
        Modified var:.. opt_name = 'dom_int_add_grouping_criterion'
        21:50:16.183075 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
        21:50:16.183459 line        62     if not opt_name.startswith('--'):
        21:50:16.183820 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_grouping_criterion'
        21:50:16.184168 line        64     if opt_name == '--options':
        21:50:16.184527 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_grouping_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.184861 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.185028 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.185117 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.185219 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'randomised_ml', ...n_strings': ['--dom_int_add_grouping_criterion']}
            21:50:16.185308 line      1327         if 'default' not in kwargs:
            21:50:16.185409 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.185495 line      1336         if not callable(action_class):
            21:50:16.185596 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_grou... should be one of {randomised_ml}', metavar=None)
            21:50:16.185690 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.185809 line      1342         if not callable(type_func):
            21:50:16.185923 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.186017 line      1347             try:
            21:50:16.186124 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.186274 line      1352         return self._add_action(action)
            21:50:16.186394 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_grou... should be one of {randomised_ml}', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.186528 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:16.186890 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.187262 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.187415 line       138     if memo is None:
            21:50:16.187484 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.187551 line       141     d = id(x)
            New var:....... d = 140085916724896
            21:50:16.187637 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.187725 line       143     if y is not _nil:
            21:50:16.187814 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.187883 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.187974 line       149     if copier:
            21:50:16.188072 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724896: {'name': 'dom_int_num_groups_p... to try per group size.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.188216 line       183     if y is not x:
            21:50:16.188338 line       184         memo[d] = y
            21:50:16.188418 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724896: {'name': 'dom_int_num_groups_p...to try per group size.', 'type': <class 'int'>}]}
            21:50:16.188501 line       186     return y
            21:50:16.188602 return     186     return y
            Return value:.. {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
        21:50:16.188708 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_num_groups_per_group_size'
        21:50:16.189107 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_int_num_groups_per_group_size': [-1, None]}
        21:50:16.189488 line        62     if not opt_name.startswith('--'):
        21:50:16.189847 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_num_groups_per_group_size'
        21:50:16.190194 line        64     if opt_name == '--options':
        21:50:16.190550 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_num_groups_per_group_size',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            21:50:16.190885 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.191058 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.191149 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.191250 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'The ...trings': ['--dom_int_num_groups_per_group_size']}
            21:50:16.191341 line      1327         if 'default' not in kwargs:
            21:50:16.191443 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.191530 line      1336         if not callable(action_class):
            21:50:16.191634 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_num_grou... of groups to try per group size.', metavar=None)
            21:50:16.191728 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.191849 line      1342         if not callable(type_func):
            21:50:16.191965 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.192059 line      1347             try:
            21:50:16.192167 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.192315 line      1352         return self._add_action(action)
            21:50:16.192433 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_num_grou... of groups to try per group size.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.192570 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:16.192937 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.193312 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.193466 line       138     if memo is None:
            21:50:16.193535 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.193602 line       141     d = id(x)
            New var:....... d = 140085916724968
            21:50:16.193688 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.193776 line       143     if y is not _nil:
            21:50:16.193865 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.193933 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.194023 line       149     if copier:
            21:50:16.194125 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916724968: {'name': 'dom_int_add_group_si...he group size, should be one of {max,sampled}.'}}
            Modified var:.. y = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.194253 line       183     if y is not x:
            21:50:16.194376 line       184         memo[d] = y
            21:50:16.194454 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916724968: {'name': 'dom_int_add_group_si...e group size, should be one of {max,sampled}.'}]}
            21:50:16.194536 line       186     return y
            21:50:16.194636 return     186     return y
            Return value:.. {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
        21:50:16.194742 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
        Modified var:.. opt_name = 'dom_int_add_group_size_criterion'
        21:50:16.195141 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...int_add_group_size_criterion': ['sampled', None]}
        21:50:16.195521 line        62     if not opt_name.startswith('--'):
        21:50:16.195879 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_add_group_size_criterion'
        21:50:16.196231 line        64     if opt_name == '--options':
        21:50:16.196589 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_add_group_size_criterion',)
            Starting var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            21:50:16.196925 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.197105 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.197187 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.197287 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'sampled', 'help'...strings': ['--dom_int_add_group_size_criterion']}
            21:50:16.197376 line      1327         if 'default' not in kwargs:
            21:50:16.197478 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.197564 line      1336         if not callable(action_class):
            21:50:16.197666 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_add_grou..., should be one of {max,sampled}.', metavar=None)
            21:50:16.197760 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.197879 line      1342         if not callable(type_func):
            21:50:16.197996 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.198099 line      1347             try:
            21:50:16.198193 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.198339 line      1352         return self._add_action(action)
            21:50:16.198458 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_add_grou..., should be one of {max,sampled}.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.198599 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.198970 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.199352 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.199508 line       138     if memo is None:
            21:50:16.199576 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.199642 line       141     d = id(x)
            New var:....... d = 140085916725040
            21:50:16.199729 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.199817 line       143     if y is not _nil:
            21:50:16.199906 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.199973 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.200072 line       149     if copier:
            21:50:16.200172 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725040: {'name': 'dom_int_esp_order', ...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.200310 line       183     if y is not x:
            21:50:16.200430 line       184         memo[d] = y
            21:50:16.200509 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725040: {'name': 'dom_int_esp_order', ...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:16.200591 line       186     return y
            21:50:16.200692 return     186     return y
            Return value:.. {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.200799 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_int_esp_order'
        21:50:16.201202 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_int_esp_order': [-1, None]}
        21:50:16.201587 line        62     if not opt_name.startswith('--'):
        21:50:16.201949 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_order'
        21:50:16.202301 line        64     if opt_name == '--options':
        21:50:16.202667 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.203009 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.203196 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.203277 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.203380 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde...rder', 'option_strings': ['--dom_int_esp_order']}
            21:50:16.203470 line      1327         if 'default' not in kwargs:
            21:50:16.203573 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.203661 line      1336         if not callable(action_class):
            21:50:16.203764 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_orde..., help='Order of the esp kernel. ', metavar=None)
            21:50:16.203858 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.203977 line      1342         if not callable(type_func):
            21:50:16.204104 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.204200 line      1347             try:
            21:50:16.204291 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.204437 line      1352         return self._add_action(action)
            21:50:16.204553 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_orde..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.204688 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:16.205046 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.205421 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.205574 line       138     if memo is None:
            21:50:16.205642 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.205706 line       141     d = id(x)
            New var:....... d = 140085916725112
            21:50:16.205790 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.205876 line       143     if y is not _nil:
            21:50:16.205963 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.206030 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.206134 line       149     if copier:
            21:50:16.206227 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725112: {'name': 'dom_int_esp_kernel_t...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.206353 line       183     if y is not x:
            21:50:16.206471 line       184         memo[d] = y
            21:50:16.206547 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725112: {'name': 'dom_int_esp_kernel_t...e of kernel. This depends on the application.'}]}
            21:50:16.206627 line       186     return y
            21:50:16.206729 return     186     return y
            Return value:.. {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
        21:50:16.206834 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_int_esp_kernel_type'
        21:50:16.207228 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_esp_kernel_type': ['se', None]}
        21:50:16.207610 line        62     if not opt_name.startswith('--'):
        21:50:16.207972 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_kernel_type'
        21:50:16.208322 line        64     if opt_name == '--options':
        21:50:16.208679 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:16.209016 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.209199 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.209279 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.209378 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp... 'option_strings': ['--dom_int_esp_kernel_type']}
            21:50:16.209465 line      1327         if 'default' not in kwargs:
            21:50:16.209566 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.209651 line      1336         if not callable(action_class):
            21:50:16.209752 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_kern... This depends on the application.', metavar=None)
            21:50:16.209844 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.209962 line      1342         if not callable(type_func):
            21:50:16.210082 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.210180 line      1347             try:
            21:50:16.210273 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.210417 line      1352         return self._add_action(action)
            21:50:16.210534 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_kern... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.210668 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:16.211030 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.211408 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.211560 line       138     if memo is None:
            21:50:16.211627 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.211691 line       141     d = id(x)
            New var:....... d = 140085916725184
            21:50:16.211776 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.211863 line       143     if y is not _nil:
            21:50:16.211950 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.212018 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.212122 line       149     if copier:
            21:50:16.212216 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916725184: {'name': 'dom_int_esp_matern_n...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.212341 line       183     if y is not x:
            21:50:16.212458 line       184         memo[d] = y
            21:50:16.212534 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916725184: {'name': 'dom_int_esp_matern_n...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.212614 line       186     return y
            21:50:16.212714 return     186     return y
            Return value:.. {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
        21:50:16.212818 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_int_esp_matern_nu'
        21:50:16.213210 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_int_esp_matern_nu': ['default', None]}
        21:50:16.213592 line        62     if not opt_name.startswith('--'):
        21:50:16.213950 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_int_esp_matern_nu'
        21:50:16.214301 line        64     if opt_name == '--options':
        21:50:16.214661 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_int_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.214997 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.215177 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.215257 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.215360 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...', 'option_strings': ['--dom_int_esp_matern_nu']}
            21:50:16.215447 line      1327         if 'default' not in kwargs:
            21:50:16.215547 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.215633 line      1336         if not callable(action_class):
            21:50:16.215734 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_int_esp_mate...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.215827 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.215945 line      1342         if not callable(type_func):
            21:50:16.216058 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.216161 line      1347             try:
            21:50:16.216254 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.216399 line      1352         return self._add_action(action)
            21:50:16.216514 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_int_esp_mate...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.216649 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        21:50:16.217010 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.217386 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.217540 line       138     if memo is None:
            21:50:16.217608 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.217673 line       141     d = id(x)
            New var:....... d = 140085916749896
            21:50:16.217759 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.217847 line       143     if y is not _nil:
            21:50:16.217935 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.218003 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.218106 line       149     if copier:
            21:50:16.218200 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916749896: {'name': 'dom_disc_num_kernel_...': 'Kernel type for discrete numeric domains. '}}
            Modified var:.. y = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            21:50:16.218326 line       183     if y is not x:
            21:50:16.218444 line       184         memo[d] = y
            21:50:16.218520 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916749896: {'name': 'dom_disc_num_kernel_...: 'Kernel type for discrete numeric domains. '}]}
            21:50:16.218600 line       186     return y
            21:50:16.218700 return     186     return y
            Return value:.. {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
        21:50:16.218805 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete numeric domains. '}
        Modified var:.. opt_name = 'dom_disc_num_kernel_type'
        21:50:16.219198 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...], 'dom_disc_num_kernel_type': ['default', None]}
        21:50:16.219581 line        62     if not opt_name.startswith('--'):
        21:50:16.219940 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_kernel_type'
        21:50:16.220290 line        64     if opt_name == '--options':
        21:50:16.220648 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete numeric domains. '}
            21:50:16.220985 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.221165 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.221245 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.221345 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...'option_strings': ['--dom_disc_num_kernel_type']}
            21:50:16.221432 line      1327         if 'default' not in kwargs:
            21:50:16.221533 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.221618 line      1336         if not callable(action_class):
            21:50:16.221720 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_ker...pe for discrete numeric domains. ', metavar=None)
            21:50:16.221813 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.221930 line      1342         if not callable(type_func):
            21:50:16.222045 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.222147 line      1347             try:
            21:50:16.222240 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.222385 line      1352         return self._add_action(action)
            21:50:16.222501 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_ker...pe for discrete numeric domains. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.222636 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.222996 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.223382 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.223537 line       138     if memo is None:
            21:50:16.223606 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.223671 line       141     d = id(x)
            New var:....... d = 140085916749968
            21:50:16.223757 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.223844 line       143     if y is not _nil:
            21:50:16.223932 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.223999 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.224102 line       149     if copier:
            21:50:16.224197 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916749968: {'name': 'dom_disc_num_use_sam... matern. Default=False.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.224336 line       183     if y is not x:
            21:50:16.224455 line       184         memo[d] = y
            21:50:16.224532 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916749968: {'name': 'dom_disc_num_use_sam...matern. Default=False.', 'type': <class 'int'>}]}
            21:50:16.224612 line       186     return y
            21:50:16.224714 return     186     return y
            Return value:.. {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
        21:50:16.224822 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_use_same_bandwidth'
        21:50:16.225219 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'dom_disc_num_use_same_bandwidth': [False, None]}
        21:50:16.225600 line        62     if not opt_name.startswith('--'):
        21:50:16.225960 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_use_same_bandwidth'
        21:50:16.226311 line        64     if opt_name == '--options':
        21:50:16.226669 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_use_same_bandwidth',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.227008 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.227190 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.227273 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.227374 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I..._strings': ['--dom_disc_num_use_same_bandwidth']}
            21:50:16.227467 line      1327         if 'default' not in kwargs:
            21:50:16.227570 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.227658 line      1336         if not callable(action_class):
            21:50:16.227761 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_use...e is se or matern. Default=False.', metavar=None)
            21:50:16.227855 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.227974 line      1342         if not callable(type_func):
            21:50:16.228099 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.228194 line      1347             try:
            21:50:16.228285 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.228431 line      1352         return self._add_action(action)
            21:50:16.228547 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_use...e is se or matern. Default=False.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.228683 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        21:50:16.229058 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.229434 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.229587 line       138     if memo is None:
            21:50:16.229654 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.229718 line       141     d = id(x)
            New var:....... d = 140085916750040
            21:50:16.229804 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.229891 line       143     if y is not _nil:
            21:50:16.229978 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.230045 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.230150 line       149     if copier:
            21:50:16.230244 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750040: {'name': 'dom_disc_num_matern_...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            21:50:16.230370 line       183     if y is not x:
            21:50:16.230488 line       184         memo[d] = y
            21:50:16.230564 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750040: {'name': 'dom_disc_num_matern_...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.230643 line       186     return y
            21:50:16.230742 return     186     return y
            Return value:.. {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
        21:50:16.230847 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_disc_num_matern_nu'
        21:50:16.231244 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_disc_num_matern_nu': ['default', None]}
        21:50:16.231624 line        62     if not opt_name.startswith('--'):
        21:50:16.231988 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_matern_nu'
        21:50:16.232344 line        64     if opt_name == '--options':
        21:50:16.232703 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.233046 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.233227 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.233307 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.233408 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'..., 'option_strings': ['--dom_disc_num_matern_nu']}
            21:50:16.233496 line      1327         if 'default' not in kwargs:
            21:50:16.233597 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.233683 line      1336         if not callable(action_class):
            21:50:16.233784 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_mat...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.233878 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.233995 line      1342         if not callable(type_func):
            21:50:16.234120 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.234214 line      1347             try:
            21:50:16.234305 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.234449 line      1352         return self._add_action(action)
            21:50:16.234565 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_mat...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.234699 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.235060 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.235438 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.235595 line       138     if memo is None:
            21:50:16.235665 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.235730 line       141     d = id(x)
            New var:....... d = 140085916750112
            21:50:16.235817 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.235904 line       143     if y is not _nil:
            21:50:16.235993 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.236062 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.236167 line       149     if copier:
            21:50:16.236261 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750112: {'name': 'dom_disc_num_poly_or...t is 1 (linear kernel).', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.236400 line       183     if y is not x:
            21:50:16.236519 line       184         memo[d] = y
            21:50:16.236596 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750112: {'name': 'dom_disc_num_poly_or... is 1 (linear kernel).', 'type': <class 'int'>}]}
            21:50:16.236678 line       186     return y
            21:50:16.236779 return     186     return y
            Return value:.. {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
        21:50:16.236888 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_poly_order'
        21:50:16.237284 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'dom_disc_num_poly_order': [1, None]}
        21:50:16.237667 line        62     if not opt_name.startswith('--'):
        21:50:16.238033 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_poly_order'
        21:50:16.238387 line        64     if opt_name == '--options':
        21:50:16.238768 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_poly_order',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.239134 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.239304 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.239384 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.239485 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'Order... 'option_strings': ['--dom_disc_num_poly_order']}
            21:50:16.239575 line      1327         if 'default' not in kwargs:
            21:50:16.239679 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.239767 line      1336         if not callable(action_class):
            21:50:16.239869 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_pol...ns. Default is 1 (linear kernel).', metavar=None)
            21:50:16.239962 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.240087 line      1342         if not callable(type_func):
            21:50:16.240208 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.240302 line      1347             try:
            21:50:16.240394 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.240540 line      1352         return self._add_action(action)
            21:50:16.240738 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_pol...ns. Default is 1 (linear kernel).', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.240879 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.241263 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.241629 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.241781 line       138     if memo is None:
            21:50:16.241849 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.241914 line       141     d = id(x)
            New var:....... d = 140085916750184
            21:50:16.242000 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.242101 line       143     if y is not _nil:
            21:50:16.242192 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.242261 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.242351 line       149     if copier:
            21:50:16.242443 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750184: {'name': 'dom_disc_num_esp_ord...der of the esp kernel. ', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.242580 line       183     if y is not x:
            21:50:16.242699 line       184         memo[d] = y
            21:50:16.242776 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750184: {'name': 'dom_disc_num_esp_ord...er of the esp kernel. ', 'type': <class 'int'>}]}
            21:50:16.242858 line       186     return y
            21:50:16.242957 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
        21:50:16.243068 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_num_esp_order'
        21:50:16.243467 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... [1, None], 'dom_disc_num_esp_order': [-1, None]}
        21:50:16.243849 line        62     if not opt_name.startswith('--'):
        21:50:16.244227 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_order'
        21:50:16.244567 line        64     if opt_name == '--options':
        21:50:16.244931 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_order',)
            Starting var:.. kwargs = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.245283 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.245451 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.245531 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.245631 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': -1, 'help': 'Orde..., 'option_strings': ['--dom_disc_num_esp_order']}
            21:50:16.245720 line      1327         if 'default' not in kwargs:
            21:50:16.245823 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.245909 line      1336         if not callable(action_class):
            21:50:16.246011 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp..., help='Order of the esp kernel. ', metavar=None)
            21:50:16.246112 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.246234 line      1342         if not callable(type_func):
            21:50:16.246350 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.246443 line      1347             try:
            21:50:16.246534 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.246679 line      1352         return self._add_action(action)
            21:50:16.246797 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp..., help='Order of the esp kernel. ', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.246931 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        21:50:16.247310 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.247674 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.247825 line       138     if memo is None:
            21:50:16.247892 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.247960 line       141     d = id(x)
            New var:....... d = 140085916750256
            21:50:16.248047 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.248149 line       143     if y is not _nil:
            21:50:16.248239 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.248307 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.248397 line       149     if copier:
            21:50:16.248489 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750256: {'name': 'dom_disc_num_esp_ker...pe of kernel. This depends on the application.'}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            21:50:16.248614 line       183     if y is not x:
            21:50:16.248731 line       184         memo[d] = y
            21:50:16.248806 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750256: {'name': 'dom_disc_num_esp_ker...e of kernel. This depends on the application.'}]}
            21:50:16.248885 line       186     return y
            21:50:16.248983 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
        21:50:16.249096 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
        Modified var:.. opt_name = 'dom_disc_num_esp_kernel_type'
        21:50:16.249484 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'dom_disc_num_esp_kernel_type': ['se', None]}
        21:50:16.249868 line        62     if not opt_name.startswith('--'):
        21:50:16.250248 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_kernel_type'
        21:50:16.250587 line        64     if opt_name == '--options':
        21:50:16.250948 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            21:50:16.251299 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.251469 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.251549 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.251649 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'se', 'help': 'Sp...ion_strings': ['--dom_disc_num_esp_kernel_type']}
            21:50:16.251738 line      1327         if 'default' not in kwargs:
            21:50:16.251839 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.251925 line      1336         if not callable(action_class):
            21:50:16.252031 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp... This depends on the application.', metavar=None)
            21:50:16.252135 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.252255 line      1342         if not callable(type_func):
            21:50:16.252371 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.252463 line      1347             try:
            21:50:16.252554 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.252700 line      1352         return self._add_action(action)
            21:50:16.252814 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp... This depends on the application.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.252948 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        21:50:16.253330 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.253694 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.253847 line       138     if memo is None:
            21:50:16.253915 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.253981 line       141     d = id(x)
            New var:....... d = 140085916750328
            21:50:16.254075 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.254169 line       143     if y is not _nil:
            21:50:16.254258 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.254326 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.254417 line       149     if copier:
            21:50:16.254509 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750328: {'name': 'dom_disc_num_esp_mat...alue for matern kernel. If negative, will fit.'}}
            Modified var:.. y = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            21:50:16.254635 line       183     if y is not x:
            21:50:16.254752 line       184         memo[d] = y
            21:50:16.254827 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750328: {'name': 'dom_disc_num_esp_mat...lue for matern kernel. If negative, will fit.'}]}
            21:50:16.254908 line       186     return y
            21:50:16.255006 return     186     return y
            Return value:.. {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
        21:50:16.255122 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
        Modified var:.. opt_name = 'dom_disc_num_esp_matern_nu'
        21:50:16.255509 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_disc_num_esp_matern_nu': ['default', None]}
        21:50:16.255896 line        62     if not opt_name.startswith('--'):
        21:50:16.256274 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_num_esp_matern_nu'
        21:50:16.256614 line        64     if opt_name == '--options':
        21:50:16.256977 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_num_esp_matern_nu',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            21:50:16.257328 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.257497 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.257576 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.257677 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...ption_strings': ['--dom_disc_num_esp_matern_nu']}
            21:50:16.257765 line      1327         if 'default' not in kwargs:
            21:50:16.257865 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.257952 line      1336         if not callable(action_class):
            21:50:16.258052 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_num_esp...rn kernel. If negative, will fit.', metavar=None)
            21:50:16.258157 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.258276 line      1342         if not callable(type_func):
            21:50:16.258391 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.258484 line      1347             try:
            21:50:16.258575 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.258720 line      1352         return self._add_action(action)
            21:50:16.258837 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_num_esp...rn kernel. If negative, will fit.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.258970 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        21:50:16.259351 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.259713 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.259864 line       138     if memo is None:
            21:50:16.259930 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.259994 line       141     d = id(x)
            New var:....... d = 140085916750400
            21:50:16.260087 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.260183 line       143     if y is not _nil:
            21:50:16.260271 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.260338 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.260428 line       149     if copier:
            21:50:16.260519 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750400: {'name': 'dom_disc_kernel_type...t', 'help': 'Kernel type for discrete domains.'}}
            Modified var:.. y = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            21:50:16.260644 line       183     if y is not x:
            21:50:16.260760 line       184         memo[d] = y
            21:50:16.260836 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750400: {'name': 'dom_disc_kernel_type...', 'help': 'Kernel type for discrete domains.'}]}
            21:50:16.260916 line       186     return y
            21:50:16.261014 return     186     return y
            Return value:.. {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
        21:50:16.261130 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete domains.'}
        Modified var:.. opt_name = 'dom_disc_kernel_type'
        21:50:16.261519 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'dom_disc_kernel_type': ['default', None]}
        21:50:16.261900 line        62     if not opt_name.startswith('--'):
        21:50:16.262279 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_kernel_type'
        21:50:16.262617 line        64     if opt_name == '--options':
        21:50:16.262976 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete domains.'}
            21:50:16.263329 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.263497 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.263575 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.263674 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...e', 'option_strings': ['--dom_disc_kernel_type']}
            21:50:16.263761 line      1327         if 'default' not in kwargs:
            21:50:16.263862 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.263947 line      1336         if not callable(action_class):
            21:50:16.264048 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_kernel_...Kernel type for discrete domains.', metavar=None)
            21:50:16.264151 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.264275 line      1342         if not callable(type_func):
            21:50:16.264390 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.264484 line      1347             try:
            21:50:16.264574 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.264720 line      1352         return self._add_action(action)
            21:50:16.264837 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_kernel_...Kernel type for discrete domains.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.264975 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        21:50:16.265365 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.265730 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.265883 line       138     if memo is None:
            21:50:16.265951 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.266016 line       141     d = id(x)
            New var:....... d = 140085916750472
            21:50:16.266117 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.266207 line       143     if y is not _nil:
            21:50:16.266295 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.266364 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.266456 line       149     if copier:
            21:50:16.266548 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750472: {'name': 'dom_disc_hamming_use... of the hamming kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:16.266687 line       183     if y is not x:
            21:50:16.266805 line       184         memo[d] = y
            21:50:16.266882 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750472: {'name': 'dom_disc_hamming_use...of the hamming kernel.', 'type': <class 'int'>}]}
            21:50:16.266963 line       186     return y
            21:50:16.267071 return     186     return y
            Return value:.. {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
        21:50:16.267185 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...s of the hamming kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'dom_disc_hamming_use_same_weight'
        21:50:16.267575 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...dom_disc_hamming_use_same_weight': [False, None]}
        21:50:16.267957 line        62     if not opt_name.startswith('--'):
        21:50:16.268339 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_disc_hamming_use_same_weight'
        21:50:16.268680 line        64     if opt_name == '--options':
        21:50:16.269049 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_disc_hamming_use_same_weight',)
            Starting var:.. kwargs = {'required': False, 'default': False, 'help': 'I...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:16.269458 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.269631 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.269712 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.269814 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': False, 'help': 'I...strings': ['--dom_disc_hamming_use_same_weight']}
            21:50:16.269904 line      1327         if 'default' not in kwargs:
            21:50:16.270006 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.270101 line      1336         if not callable(action_class):
            21:50:16.270206 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_disc_hamming...dimensions of the hamming kernel.', metavar=None)
            21:50:16.270301 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.270421 line      1342         if not callable(type_func):
            21:50:16.270537 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.270630 line      1347             try:
            21:50:16.270724 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.270871 line      1352         return self._add_action(action)
            21:50:16.270988 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_disc_hamming...dimensions of the hamming kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.271140 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        21:50:16.271507 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.271874 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.272026 line       138     if memo is None:
            21:50:16.272105 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.272172 line       141     d = id(x)
            New var:....... d = 140085916750544
            21:50:16.272259 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.272346 line       143     if y is not _nil:
            21:50:16.272433 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.272504 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.272594 line       149     if copier:
            21:50:16.272687 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750544: {'name': 'dom_nn_kernel_type',...default', 'help': 'Kernel type for NN Domains.'}}
            Modified var:.. y = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            21:50:16.272812 line       183     if y is not x:
            21:50:16.272930 line       184         memo[d] = y
            21:50:16.273006 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750544: {'name': 'dom_nn_kernel_type',...efault', 'help': 'Kernel type for NN Domains.'}]}
            21:50:16.273091 line       186     return y
            21:50:16.273195 return     186     return y
            Return value:.. {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
        21:50:16.273300 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for NN Domains.'}
        Modified var:.. opt_name = 'dom_nn_kernel_type'
        21:50:16.273687 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_nn_kernel_type': ['default', None]}
        21:50:16.274077 line        62     if not opt_name.startswith('--'):
        21:50:16.274447 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--dom_nn_kernel_type'
        21:50:16.274788 line        64     if opt_name == '--options':
        21:50:16.275161 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--dom_nn_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'default', 'help': 'Kernel type for NN Domains.'}
            21:50:16.275505 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.275670 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.275749 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.275848 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'default', 'help'...ype', 'option_strings': ['--dom_nn_kernel_type']}
            21:50:16.275934 line      1327         if 'default' not in kwargs:
            21:50:16.276034 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.276130 line      1336         if not callable(action_class):
            21:50:16.276233 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--dom_nn_kernel_ty...help='Kernel type for NN Domains.', metavar=None)
            21:50:16.276325 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.276443 line      1342         if not callable(type_func):
            21:50:16.276561 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.276655 line      1347             try:
            21:50:16.276746 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.276891 line      1352         return self._add_action(action)
            21:50:16.277007 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--dom_nn_kernel_ty...help='Kernel type for NN Domains.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.277156 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        21:50:16.277523 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.277885 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.278035 line       138     if memo is None:
            21:50:16.278116 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.278182 line       141     d = id(x)
            New var:....... d = 140085916750616
            21:50:16.278267 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.278354 line       143     if y is not _nil:
            21:50:16.278442 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.278510 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.278599 line       149     if copier:
            21:50:16.278690 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750616: {'name': 'otmann_dist_type', '...type of distance. Should be lp, emd or lp-emd.'}}
            Modified var:.. y = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            21:50:16.278816 line       183     if y is not x:
            21:50:16.278933 line       184         memo[d] = y
            21:50:16.279009 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750616: {'name': 'otmann_dist_type', '...ype of distance. Should be lp, emd or lp-emd.'}]}
            21:50:16.279098 line       186     return y
            21:50:16.279199 return     186     return y
            Return value:.. {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
        21:50:16.279303 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'lp-emd', 'help':... type of distance. Should be lp, emd or lp-emd.'}
        Modified var:.. opt_name = 'otmann_dist_type'
        21:50:16.279690 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'otmann_dist_type': ['lp-emd', None]}
        21:50:16.280081 line        62     if not opt_name.startswith('--'):
        21:50:16.280455 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_dist_type'
        21:50:16.280794 line        64     if opt_name == '--options':
        21:50:16.281174 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_dist_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'lp-emd', 'help':... type of distance. Should be lp, emd or lp-emd.'}
            21:50:16.281521 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.281688 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.281767 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.281866 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'lp-emd', 'help':..._type', 'option_strings': ['--otmann_dist_type']}
            21:50:16.281954 line      1327         if 'default' not in kwargs:
            21:50:16.282054 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.282149 line      1336         if not callable(action_class):
            21:50:16.282251 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_dist_type...nce. Should be lp, emd or lp-emd.', metavar=None)
            21:50:16.282344 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.282462 line      1342         if not callable(type_func):
            21:50:16.282576 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.282668 line      1347             try:
            21:50:16.282759 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.282905 line      1352         return self._add_action(action)
            21:50:16.283020 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_dist_type...nce. Should be lp, emd or lp-emd.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.283172 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        21:50:16.283539 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.283903 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.284054 line       138     if memo is None:
            21:50:16.284136 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.284202 line       141     d = id(x)
            New var:....... d = 140085916750688
            21:50:16.284287 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.284376 line       143     if y is not _nil:
            21:50:16.284464 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.284531 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.284620 line       149     if copier:
            21:50:16.284716 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750688: {'name': 'otmann_kernel_type',...d be one of lp, emd, lpemd_sum, or lpemd_prod.'}}
            Modified var:.. y = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:16.284842 line       183     if y is not x:
            21:50:16.284960 line       184         memo[d] = y
            21:50:16.285036 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750688: {'name': 'otmann_kernel_type',... be one of lp, emd, lpemd_sum, or lpemd_prod.'}]}
            21:50:16.285126 line       186     return y
            21:50:16.285228 return     186     return y
            Return value:.. {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        21:50:16.285333 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'lpemd_sum', 'hel...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
        Modified var:.. opt_name = 'otmann_kernel_type'
        21:50:16.285721 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'otmann_kernel_type': ['lpemd_sum', None]}
        21:50:16.286120 line        62     if not opt_name.startswith('--'):
        21:50:16.286487 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_kernel_type'
        21:50:16.286827 line        64     if opt_name == '--options':
        21:50:16.287201 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_kernel_type',)
            Starting var:.. kwargs = {'required': False, 'default': 'lpemd_sum', 'hel...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:16.287546 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.287714 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.287793 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.287893 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'lpemd_sum', 'hel...ype', 'option_strings': ['--otmann_kernel_type']}
            21:50:16.287981 line      1327         if 'default' not in kwargs:
            21:50:16.288091 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.288179 line      1336         if not callable(action_class):
            21:50:16.288281 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_kernel_ty...p, emd, lpemd_sum, or lpemd_prod.', metavar=None)
            21:50:16.288374 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.288493 line      1342         if not callable(type_func):
            21:50:16.288607 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.288700 line      1347             try:
            21:50:16.288794 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.288939 line      1352         return self._add_action(action)
            21:50:16.289054 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_kernel_ty...p, emd, lpemd_sum, or lpemd_prod.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.289205 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        21:50:16.289571 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.289935 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.290101 line       138     if memo is None:
            21:50:16.290171 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.290237 line       141     d = id(x)
            New var:....... d = 140085916750760
            21:50:16.290324 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.290412 line       143     if y is not _nil:
            21:50:16.290500 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.290568 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.290658 line       149     if copier:
            21:50:16.290751 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750760: {'name': 'otmann_choose_mislab... and otmann_struct_coeffs should be non-empty.'}}
            Modified var:.. y = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            21:50:16.290879 line       183     if y is not x:
            21:50:16.290998 line       184         memo[d] = y
            21:50:16.291082 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750760: {'name': 'otmann_choose_mislab...and otmann_struct_coeffs should be non-empty.'}]}
            21:50:16.291168 line       186     return y
            21:50:16.291272 return     186     return y
            Return value:.. {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
        21:50:16.291380 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 'use_given', 'hel...s and otmann_struct_coeffs should be non-empty.'}
        Modified var:.. opt_name = 'otmann_choose_mislabel_struct_coeffs'
        21:50:16.291769 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ose_mislabel_struct_coeffs': ['use_given', None]}
        21:50:16.292170 line        62     if not opt_name.startswith('--'):
        21:50:16.292538 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_choose_mislabel_struct_coeffs'
        21:50:16.292878 line        64     if opt_name == '--options':
        21:50:16.293255 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_choose_mislabel_struct_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': 'use_given', 'hel...s and otmann_struct_coeffs should be non-empty.'}
            21:50:16.293603 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.293773 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.293853 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.293954 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 'use_given', 'hel...ngs': ['--otmann_choose_mislabel_struct_coeffs']}
            21:50:16.294043 line      1327         if 'default' not in kwargs:
            21:50:16.294156 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.294243 line      1336         if not callable(action_class):
            21:50:16.294345 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_choose_mi...truct_coeffs should be non-empty.', metavar=None)
            21:50:16.294439 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.294560 line      1342         if not callable(type_func):
            21:50:16.294677 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.294772 line      1347             try:
            21:50:16.294865 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.295012 line      1352         return self._add_action(action)
            21:50:16.295147 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_choose_mi...truct_coeffs should be non-empty.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.295289 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        21:50:16.295659 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.296027 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.296195 line       138     if memo is None:
            21:50:16.296264 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.296329 line       141     d = id(x)
            New var:....... d = 140085916750832
            21:50:16.296414 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.296501 line       143     if y is not _nil:
            21:50:16.296589 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.296656 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.296746 line       149     if copier:
            21:50:16.296839 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750832: {'name': 'otmann_mislabel_coef...ied as a string. If -1, it means we will tune.'}}
            Modified var:.. y = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            21:50:16.296964 line       183     if y is not x:
            21:50:16.297095 line       184         memo[d] = y
            21:50:16.297173 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750832: {'name': 'otmann_mislabel_coef...ed as a string. If -1, it means we will tune.'}]}
            21:50:16.297254 line       186     return y
            21:50:16.297354 return     186     return y
            Return value:.. {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
        21:50:16.297460 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '1.0-1.0-1.0-1.0'...fied as a string. If -1, it means we will tune.'}
        Modified var:.. opt_name = 'otmann_mislabel_coeffs'
        21:50:16.297851 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_mislabel_coeffs': ['1.0-1.0-1.0-1.0', None]}
        21:50:16.298253 line        62     if not opt_name.startswith('--'):
        21:50:16.298619 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_mislabel_coeffs'
        21:50:16.298959 line        64     if opt_name == '--options':
        21:50:16.299335 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_mislabel_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': '1.0-1.0-1.0-1.0'...fied as a string. If -1, it means we will tune.'}
            21:50:16.299677 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.299844 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.299923 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.300023 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '1.0-1.0-1.0-1.0'..., 'option_strings': ['--otmann_mislabel_coeffs']}
            21:50:16.300121 line      1327         if 'default' not in kwargs:
            21:50:16.300223 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.300310 line      1336         if not callable(action_class):
            21:50:16.300412 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_mislabel_...ng. If -1, it means we will tune.', metavar=None)
            21:50:16.300505 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.300625 line      1342         if not callable(type_func):
            21:50:16.300740 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.300832 line      1347             try:
            21:50:16.300924 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.301083 line      1352         return self._add_action(action)
            21:50:16.301206 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_mislabel_...ng. If -1, it means we will tune.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.301342 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        21:50:16.301708 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.302082 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.302240 line       138     if memo is None:
            21:50:16.302307 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.302372 line       141     d = id(x)
            New var:....... d = 140085916750904
            21:50:16.302457 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.302544 line       143     if y is not _nil:
            21:50:16.302632 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.302699 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.302789 line       149     if copier:
            21:50:16.302881 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750904: {'name': 'otmann_struct_coeffs...ied as a string. If -1, it means we will tune.'}}
            Modified var:.. y = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            21:50:16.303006 line       183     if y is not x:
            21:50:16.303133 line       184         memo[d] = y
            21:50:16.303211 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750904: {'name': 'otmann_struct_coeffs...ed as a string. If -1, it means we will tune.'}]}
            21:50:16.303292 line       186     return y
            21:50:16.303393 return     186     return y
            Return value:.. {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
        21:50:16.303499 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': '0.1-0.25-0.61-1....fied as a string. If -1, it means we will tune.'}
        Modified var:.. opt_name = 'otmann_struct_coeffs'
        21:50:16.303892 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_struct_coeffs': ['0.1-0.25-0.61-1.5', None]}
        21:50:16.304293 line        62     if not opt_name.startswith('--'):
        21:50:16.304659 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_struct_coeffs'
        21:50:16.305001 line        64     if opt_name == '--options':
        21:50:16.305377 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_struct_coeffs',)
            Starting var:.. kwargs = {'required': False, 'default': '0.1-0.25-0.61-1....fied as a string. If -1, it means we will tune.'}
            21:50:16.305721 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.305892 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.305971 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.306076 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': '0.1-0.25-0.61-1....s', 'option_strings': ['--otmann_struct_coeffs']}
            21:50:16.306171 line      1327         if 'default' not in kwargs:
            21:50:16.306273 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.306359 line      1336         if not callable(action_class):
            21:50:16.306460 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_struct_co...ng. If -1, it means we will tune.', metavar=None)
            21:50:16.306553 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <function ArgumentParser.__init__.<locals>.identity at 0x7f67132956a8>
            21:50:16.306672 line      1342         if not callable(type_func):
            21:50:16.306787 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.306880 line      1347             try:
            21:50:16.306971 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.307127 line      1352         return self._add_action(action)
            21:50:16.307250 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_struct_co...ng. If -1, it means we will tune.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.307387 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        21:50:16.307753 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.308136 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.308288 line       138     if memo is None:
            21:50:16.308356 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.308421 line       141     d = id(x)
            New var:....... d = 140085916750976
            21:50:16.308506 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.308594 line       143     if y is not _nil:
            21:50:16.308682 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.308750 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.308840 line       149     if copier:
            21:50:16.308931 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916750976: {'name': 'otmann_lp_power', 'r...istance for the kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.309074 line       183     if y is not x:
            21:50:16.309204 line       184         memo[d] = y
            21:50:16.309282 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916750976: {'name': 'otmann_lp_power', 'r...stance for the kernel.', 'type': <class 'int'>}]}
            21:50:16.309363 line       186     return y
            21:50:16.309464 return     186     return y
            Return value:.. {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
        21:50:16.309569 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'otmann_lp_power'
        21:50:16.309957 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...5-0.61-1.5', None], 'otmann_lp_power': [1, None]}
        21:50:16.310358 line        62     if not opt_name.startswith('--'):
        21:50:16.310727 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_lp_power'
        21:50:16.311079 line        64     if opt_name == '--options':
        21:50:16.311449 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_lp_power',)
            Starting var:.. kwargs = {'required': False, 'default': 1, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.311793 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.311961 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.312041 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.312152 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1, 'help': 'The p..._power', 'option_strings': ['--otmann_lp_power']}
            21:50:16.312243 line      1327         if 'default' not in kwargs:
            21:50:16.312346 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.312433 line      1336         if not callable(action_class):
            21:50:16.312536 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_lp_power'...n the LP distance for the kernel.', metavar=None)
            21:50:16.312629 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.312748 line      1342         if not callable(type_func):
            21:50:16.312864 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.312958 line      1347             try:
            21:50:16.313049 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.313213 line      1352         return self._add_action(action)
            21:50:16.313331 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_lp_power'...n the LP distance for the kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.313472 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        21:50:16.313843 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.314223 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.314376 line       138     if memo is None:
            21:50:16.314444 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.314510 line       141     d = id(x)
            New var:....... d = 140085916751048
            21:50:16.314595 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.314683 line       143     if y is not _nil:
            21:50:16.314771 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.314839 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.314929 line       149     if copier:
            21:50:16.315021 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916751048: {'name': 'otmann_emd_power', '...istance for the kernel.', 'type': <class 'int'>}}
            Modified var:.. y = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.315167 line       183     if y is not x:
            21:50:16.315288 line       184         memo[d] = y
            21:50:16.315365 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916751048: {'name': 'otmann_emd_power', '...stance for the kernel.', 'type': <class 'int'>}]}
            21:50:16.315446 line       186     return y
            21:50:16.315545 return     186     return y
            Return value:.. {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
        21:50:16.315651 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 2, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
        Modified var:.. opt_name = 'otmann_emd_power'
        21:50:16.316041 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...power': [1, None], 'otmann_emd_power': [2, None]}
        21:50:16.316443 line        62     if not opt_name.startswith('--'):
        21:50:16.316812 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_emd_power'
        21:50:16.317168 line        64     if opt_name == '--options':
        21:50:16.317535 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_emd_power',)
            Starting var:.. kwargs = {'required': False, 'default': 2, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.317879 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.318051 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.318141 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.318243 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 2, 'help': 'The p...power', 'option_strings': ['--otmann_emd_power']}
            21:50:16.318333 line      1327         if 'default' not in kwargs:
            21:50:16.318436 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.318524 line      1336         if not callable(action_class):
            21:50:16.318626 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_emd_power... the EMD distance for the kernel.', metavar=None)
            21:50:16.318720 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'int'>
            21:50:16.318841 line      1342         if not callable(type_func):
            21:50:16.318955 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.319049 line      1347             try:
            21:50:16.319157 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.319305 line      1352         return self._add_action(action)
            21:50:16.319421 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_emd_power... the EMD distance for the kernel.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.319558 line        58   for elem in list_of_options:
        Modified var:.. elem = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        21:50:16.319926 line        59     opt_dict = deepcopy(elem)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/copy.py
            Starting var:.. x = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            Starting var:.. memo = None
            Starting var:.. _nil = []
            21:50:16.320310 call       132 def deepcopy(x, memo=None, _nil=[]):
            21:50:16.320464 line       138     if memo is None:
            21:50:16.320534 line       139         memo = {}
            Modified var:.. memo = {}
            21:50:16.320600 line       141     d = id(x)
            New var:....... d = 140085916751120
            21:50:16.320687 line       142     y = memo.get(d, _nil)
            New var:....... y = []
            21:50:16.320776 line       143     if y is not _nil:
            21:50:16.320865 line       146     cls = type(x)
            New var:....... cls = <class 'dict'>
            21:50:16.320935 line       148     copier = _deepcopy_dispatch.get(cls)
            New var:....... copier = <function _deepcopy_dict at 0x7f689ae1e2f0>
            21:50:16.321027 line       149     if copier:
            21:50:16.321130 line       150         y = copier(x, memo)
            Modified var:.. memo = {140085916751120: {'name': 'otmann_non_assignmen... the OTMANN distance.', 'type': <class 'float'>}}
            Modified var:.. y = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:16.321271 line       183     if y is not x:
            21:50:16.321392 line       184         memo[d] = y
            21:50:16.321470 line       185         _keep_alive(x, memo) # Make sure x lives at least as long as d
            Modified var:.. memo = {140085916751120: {'name': 'otmann_non_assignmen...the OTMANN distance.', 'type': <class 'float'>}]}
            21:50:16.321552 line       186     return y
            21:50:16.321658 return     186     return y
            Return value:.. {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        Modified var:.. opt_dict = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
        21:50:16.321767 line        60     opt_name = opt_dict.pop('name')
        Modified var:.. opt_dict = {'required': False, 'default': 1.0, 'help': 'The...r the OTMANN distance.', 'type': <class 'float'>}
        Modified var:.. opt_name = 'otmann_non_assignment_penalty'
        21:50:16.322174 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:16.322567 line        62     if not opt_name.startswith('--'):
        21:50:16.322938 line        63       opt_name = '--' + opt_name
        Modified var:.. opt_name = '--otmann_non_assignment_penalty'
        21:50:16.323296 line        64     if opt_name == '--options':
        21:50:16.323661 line        67     parser.add_argument(opt_name, **opt_dict)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = ('--otmann_non_assignment_penalty',)
            Starting var:.. kwargs = {'required': False, 'default': 1.0, 'help': 'The...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:16.324005 call      1307     def add_argument(self, *args, **kwargs):
            21:50:16.324188 line      1316         chars = self.prefix_chars
            New var:....... chars = '-'
            21:50:16.324269 line      1317         if not args or len(args) == 1 and args[0][0] not in chars:
            21:50:16.324371 line      1324             kwargs = self._get_optional_kwargs(*args, **kwargs)
            Modified var:.. kwargs = {'required': False, 'default': 1.0, 'help': 'The...on_strings': ['--otmann_non_assignment_penalty']}
            21:50:16.324462 line      1327         if 'default' not in kwargs:
            21:50:16.324565 line      1335         action_class = self._pop_action_class(kwargs)
            New var:....... action_class = <class 'argparse._StoreAction'>
            21:50:16.324653 line      1336         if not callable(action_class):
            21:50:16.324757 line      1338         action = action_class(**kwargs)
            New var:....... action = _StoreAction(option_strings=['--otmann_non_assig... penalty for the OTMANN distance.', metavar=None)
            21:50:16.324852 line      1341         type_func = self._registry_get('type', action.type, action.type)
            New var:....... type_func = <class 'float'>
            21:50:16.324972 line      1342         if not callable(type_func):
            21:50:16.325103 line      1346         if hasattr(self, "_get_formatter"):
            21:50:16.325202 line      1347             try:
            21:50:16.325296 line      1348                 self._get_formatter()._format_args(action, None)
            21:50:16.325444 line      1352         return self._add_action(action)
            21:50:16.325564 return    1352         return self._add_action(action)
            Return value:.. _StoreAction(option_strings=['--otmann_non_assig... penalty for the OTMANN distance.', metavar=None)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        21:50:16.325703 line        58   for elem in list_of_options:
        21:50:16.326086 line        68   if cmd_line:
        21:50:16.326438 line        71     args = parser.parse_args(args=[])
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/argparse.py
            Starting var:.. self = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            Starting var:.. args = []
            Starting var:.. namespace = None
            21:50:16.326788 call      1733     def parse_args(self, args=None, namespace=None):
            21:50:16.326953 line      1734         args, argv = self.parse_known_args(args, namespace)
            Modified var:.. args = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
            New var:....... argv = []
            21:50:16.327726 line      1735         if argv:
            21:50:16.327945 line      1738         return args
            21:50:16.328120 return    1738         return args
            Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
        New var:....... args = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        21:50:16.328392 line        72   for key in opt_names_default_parsed:
        New var:....... key = 'moo_strategy'
        21:50:16.328866 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...e], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:16.329329 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_scalarisation'
        21:50:16.329779 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.330284 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_weight_sampler'
        21:50:16.330708 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.331172 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moors_reference_point'
        21:50:16.331595 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.332045 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'moo_gpb_prior_means'
        21:50:16.332481 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.332932 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'max_num_steps'
        21:50:16.333365 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.333814 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'capital_type'
        21:50:16.334254 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.334704 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mode'
        21:50:16.335141 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.335591 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'build_new_model_every'
        21:50:16.336020 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.336480 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'report_model_on_each_build'
        21:50:16.336903 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.337369 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'report_results_every'
        21:50:16.337798 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.338258 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_capital'
        21:50:16.338682 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.339139 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_capital_frac'
        21:50:16.339567 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.340014 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'num_init_evals'
        21:50:16.340451 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.340901 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'prev_evaluations'
        21:50:16.341336 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.341786 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'get_initial_qinfos'
        21:50:16.342217 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.342664 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'init_method'
        21:50:16.343097 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.343552 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_load_from_and_save_to'
        21:50:16.343975 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.344436 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_load_from'
        21:50:16.344861 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.345322 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_save_to'
        21:50:16.345750 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.346212 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_save_every'
        21:50:16.346635 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.347088 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'progress_report_on_each_save'
        21:50:16.347514 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.347962 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq'
        21:50:16.348398 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.348846 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_probs'
        21:50:16.349289 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.349739 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_opt_method'
        21:50:16.350175 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.350625 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'handle_parallel'
        21:50:16.351048 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.351504 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'acq_opt_max_evals'
        21:50:16.351928 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.352392 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_hp_tune_criterion'
        21:50:16.352820 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.353280 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_hp_tune_probs'
        21:50:16.353704 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.354166 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_ml_hp_tune_opt'
        21:50:16.354594 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.355046 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_method'
        21:50:16.355483 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.355933 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_burn'
        21:50:16.356368 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.356815 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_post_hp_tune_offset'
        21:50:16.357248 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.357698 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'rand_exp_sampling_replace'
        21:50:16.358136 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.358585 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mf_strategy'
        21:50:16.359010 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.359474 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'gpb_prior_mean'
        21:50:16.359904 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.360363 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'shrink_kernel_with_time'
        21:50:16.360786 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.361250 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'perturb_thresh'
        21:50:16.361676 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.362135 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'track_every_time_step'
        21:50:16.362560 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.363009 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'next_pt_std_thresh'
        21:50:16.363442 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.363892 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'nn_report_results_every'
        21:50:16.364332 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.364782 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_criterion'
        21:50:16.365219 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.365667 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_probs'
        21:50:16.366097 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.366547 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'ml_hp_tune_opt'
        21:50:16.366972 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.367436 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'hp_tune_max_evals'
        21:50:16.367861 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.368323 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'handle_non_psd_kernels'
        21:50:16.368746 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.369205 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func'
        21:50:16.369636 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.370095 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func_type'
        21:50:16.370522 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.370974 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'mean_func_const'
        21:50:16.371410 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.371861 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_type'
        21:50:16.372296 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.372745 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_label'
        21:50:16.373185 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.373637 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'noise_var_value'
        21:50:16.374060 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.374519 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_method'
        21:50:16.374944 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.375404 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_burn'
        21:50:16.375829 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.376293 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'post_hp_tune_offset'
        21:50:16.376718 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.377183 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_kernel_type'
        21:50:16.377852 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.378676 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_use_same_bandwidth'
        21:50:16.379493 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.379964 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_matern_nu'
        21:50:16.380453 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.380907 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_poly_order'
        21:50:16.381388 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.381850 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_use_additive_gp'
        21:50:16.382313 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.382781 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_max_group_size'
        21:50:16.383249 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.383719 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_grouping_criterion'
        21:50:16.384188 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.384662 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_num_groups_per_group_size'
        21:50:16.385096 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.385546 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_add_group_size_criterion'
        21:50:16.385976 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.386439 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_order'
        21:50:16.386867 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.387334 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_kernel_type'
        21:50:16.387759 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.388221 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_euc_esp_matern_nu'
        21:50:16.388649 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.389115 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_kernel_type'
        21:50:16.389545 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.389994 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_use_same_bandwidth'
        21:50:16.390429 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.390879 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_matern_nu'
        21:50:16.391316 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.391767 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_poly_order'
        21:50:16.392206 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.392658 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_use_additive_gp'
        21:50:16.393087 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.393540 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_max_group_size'
        21:50:16.393969 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.394429 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_grouping_criterion'
        21:50:16.394858 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.395322 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_num_groups_per_group_size'
        21:50:16.395751 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.396216 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_add_group_size_criterion'
        21:50:16.396642 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.397099 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_order'
        21:50:16.397526 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.397978 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_kernel_type'
        21:50:16.398417 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.398870 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_int_esp_matern_nu'
        21:50:16.399308 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.399758 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_kernel_type'
        21:50:16.400192 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.400646 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_use_same_bandwidth'
        21:50:16.401084 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.401539 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_matern_nu'
        21:50:16.401966 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.402429 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_poly_order'
        21:50:16.402854 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.403318 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_order'
        21:50:16.403743 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.404213 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_kernel_type'
        21:50:16.404641 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.405101 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_num_esp_matern_nu'
        21:50:16.405529 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.405977 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_kernel_type'
        21:50:16.406412 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.406861 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_disc_hamming_use_same_weight'
        21:50:16.407299 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.407748 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'dom_nn_kernel_type'
        21:50:16.408184 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.408636 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_dist_type'
        21:50:16.409059 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.409518 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_kernel_type'
        21:50:16.409942 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.410403 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_choose_mislabel_struct_coeffs'
        21:50:16.410827 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.411288 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_mislabel_coeffs'
        21:50:16.411714 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.412173 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_struct_coeffs'
        21:50:16.412600 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.413049 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_lp_power'
        21:50:16.413482 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        21:50:16.413931 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_emd_power'
        21:50:16.414363 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...2], 'otmann_non_assignment_penalty': [1.0, None]}
        21:50:16.414811 line        72   for key in opt_names_default_parsed:
        Modified var:.. key = 'otmann_non_assignment_penalty'
        21:50:16.415294 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
        Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal... 2], 'otmann_non_assignment_penalty': [1.0, 1.0]}
        21:50:16.415746 line        72   for key in opt_names_default_parsed:
        21:50:16.416210 line        74   _print_options(opt_names_default_parsed, descr, reporter)
            Starting var:.. ondp = {'moo_strategy': ['moors', 'moors'], 'moors_scal... 2], 'otmann_non_assignment_penalty': [1.0, 1.0]}
            Starting var:.. desc = 'Algorithm'
            Starting var:.. reporter = None
            21:50:16.416637 call        39 def _print_options(ondp, desc, reporter):
            21:50:16.416820 line        41   if reporter is None:
            21:50:16.416938 line        42     return
            21:50:16.417053 return      42     return
            Return value:.. None
        21:50:16.417207 line        76   if partial_options is not None:
        21:50:16.417635 line        77     if isinstance(partial_options, dict):
        21:50:16.418068 line        80       partial_options_dict = vars(partial_options)
        New var:....... partial_options_dict = {'moo_strategy': 'moors', 'moors_scalarisation':..._power': 2, 'otmann_non_assignment_penalty': 1.0}
        21:50:16.418499 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'moo_strategy'
        New var:....... val = 'moors'
        21:50:16.418972 line        83       setattr(args, key, val)
        21:50:16.419478 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'moors_scalarisation'
        Modified var:.. val = 'tchebychev'
        21:50:16.419931 line        83       setattr(args, key, val)
        21:50:16.420438 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'moors_weight_sampler'
        Modified var:.. val = 'flat_uniform'
        21:50:16.420886 line        83       setattr(args, key, val)
        21:50:16.421392 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'moors_reference_point'
        Modified var:.. val = None
        21:50:16.421840 line        83       setattr(args, key, val)
        21:50:16.422345 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'moo_gpb_prior_means'
        21:50:16.422793 line        83       setattr(args, key, val)
        21:50:16.423278 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'max_num_steps'
        Modified var:.. val = 10000000.0
        21:50:16.423727 line        83       setattr(args, key, val)
        21:50:16.424235 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'capital_type'
        Modified var:.. val = 'return_value'
        21:50:16.424687 line        83       setattr(args, key, val)
        21:50:16.425191 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'mode'
        Modified var:.. val = 'asy'
        21:50:16.425642 line        83       setattr(args, key, val)
        21:50:16.426149 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'build_new_model_every'
        Modified var:.. val = 17
        21:50:16.426602 line        83       setattr(args, key, val)
        21:50:16.427106 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'report_model_on_each_build'
        Modified var:.. val = 0
        21:50:16.427558 line        83       setattr(args, key, val)
        21:50:16.428055 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'report_results_every'
        Modified var:.. val = 2
        21:50:16.428516 line        83       setattr(args, key, val)
        21:50:16.429010 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'init_capital'
        Modified var:.. val = None
        21:50:16.429468 line        83       setattr(args, key, val)
        21:50:16.429962 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'init_capital_frac'
        Modified var:.. val = 0.4
        21:50:16.430441 line        83       setattr(args, key, val)
        21:50:16.430962 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'num_init_evals'
        Modified var:.. val = 2
        21:50:16.431422 line        83       setattr(args, key, val)
        21:50:16.431918 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'prev_evaluations'
        Modified var:.. val = None
        21:50:16.432378 line        83       setattr(args, key, val)
        21:50:16.432873 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'get_initial_qinfos'
        21:50:16.433336 line        83       setattr(args, key, val)
        21:50:16.433812 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'init_method'
        Modified var:.. val = 'rand'
        21:50:16.434273 line        83       setattr(args, key, val)
        21:50:16.434770 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'progress_load_from_and_save_to'
        Modified var:.. val = None
        21:50:16.435231 line        83       setattr(args, key, val)
        21:50:16.435725 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'progress_load_from'
        21:50:16.436188 line        83       setattr(args, key, val)
        21:50:16.436663 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'progress_save_to'
        21:50:16.437120 line        83       setattr(args, key, val)
        21:50:16.437595 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'progress_save_every'
        Modified var:.. val = 5
        21:50:16.438046 line        83       setattr(args, key, val)
        21:50:16.438551 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'progress_report_on_each_save'
        Modified var:.. val = True
        21:50:16.438998 line        83       setattr(args, key, val)
        21:50:16.439505 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'acq'
        Modified var:.. val = 'default'
        21:50:16.439959 line        83       setattr(args, key, val)
        21:50:16.440467 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'acq_probs'
        Modified var:.. val = 'adaptive'
        21:50:16.440921 line        83       setattr(args, key, val)
        21:50:16.441428 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'acq_opt_method'
        Modified var:.. val = 'default'
        21:50:16.441879 line        83       setattr(args, key, val)
        21:50:16.442386 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'handle_parallel'
        Modified var:.. val = 'halluc'
        21:50:16.442837 line        83       setattr(args, key, val)
        21:50:16.443340 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'acq_opt_max_evals'
        Modified var:.. val = -1
        21:50:16.443788 line        83       setattr(args, key, val)
        21:50:16.444291 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_hp_tune_criterion'
        Modified var:.. val = 'ml-post_sampling'
        21:50:16.444741 line        83       setattr(args, key, val)
        21:50:16.445248 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_hp_tune_probs'
        Modified var:.. val = '0.3-0.7'
        21:50:16.445698 line        83       setattr(args, key, val)
        21:50:16.446200 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_ml_hp_tune_opt'
        Modified var:.. val = 'default'
        21:50:16.446649 line        83       setattr(args, key, val)
        21:50:16.447152 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_post_hp_tune_method'
        Modified var:.. val = 'slice'
        21:50:16.447604 line        83       setattr(args, key, val)
        21:50:16.448113 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_post_hp_tune_burn'
        Modified var:.. val = -1
        21:50:16.448566 line        83       setattr(args, key, val)
        21:50:16.449069 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_post_hp_tune_offset'
        Modified var:.. val = 25
        21:50:16.449527 line        83       setattr(args, key, val)
        21:50:16.450021 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'rand_exp_sampling_replace'
        Modified var:.. val = False
        21:50:16.450488 line        83       setattr(args, key, val)
        21:50:16.450984 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'mf_strategy'
        Modified var:.. val = 'boca'
        21:50:16.451444 line        83       setattr(args, key, val)
        21:50:16.451938 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'gpb_prior_mean'
        Modified var:.. val = None
        21:50:16.452401 line        83       setattr(args, key, val)
        21:50:16.452899 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'shrink_kernel_with_time'
        Modified var:.. val = 0
        21:50:16.453358 line        83       setattr(args, key, val)
        21:50:16.453855 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'perturb_thresh'
        Modified var:.. val = 0.0001
        21:50:16.454319 line        83       setattr(args, key, val)
        21:50:16.454814 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'track_every_time_step'
        Modified var:.. val = 0
        21:50:16.455274 line        83       setattr(args, key, val)
        21:50:16.455770 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'next_pt_std_thresh'
        Modified var:.. val = 0.005
        21:50:16.456230 line        83       setattr(args, key, val)
        21:50:16.456725 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'nn_report_results_every'
        Modified var:.. val = 1
        21:50:16.457189 line        83       setattr(args, key, val)
        21:50:16.457685 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'hp_tune_criterion'
        Modified var:.. val = 'ml'
        21:50:16.458145 line        83       setattr(args, key, val)
        21:50:16.458642 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'hp_tune_probs'
        Modified var:.. val = 'uniform'
        21:50:16.459098 line        83       setattr(args, key, val)
        21:50:16.459597 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'ml_hp_tune_opt'
        Modified var:.. val = 'default'
        21:50:16.460051 line        83       setattr(args, key, val)
        21:50:16.460560 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'hp_tune_max_evals'
        Modified var:.. val = -1
        21:50:16.461012 line        83       setattr(args, key, val)
        21:50:16.461515 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'handle_non_psd_kernels'
        Modified var:.. val = 'guaranteed_psd'
        21:50:16.461968 line        83       setattr(args, key, val)
        21:50:16.462506 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'mean_func'
        Modified var:.. val = None
        21:50:16.462954 line        83       setattr(args, key, val)
        21:50:16.463476 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'mean_func_type'
        Modified var:.. val = 'tune'
        21:50:16.463928 line        83       setattr(args, key, val)
        21:50:16.464435 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'mean_func_const'
        Modified var:.. val = 0.0
        21:50:16.464898 line        83       setattr(args, key, val)
        21:50:16.465403 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'noise_var_type'
        Modified var:.. val = 'tune'
        21:50:16.465857 line        83       setattr(args, key, val)
        21:50:16.466366 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'noise_var_label'
        Modified var:.. val = 0.05
        21:50:16.466818 line        83       setattr(args, key, val)
        21:50:16.467324 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'noise_var_value'
        Modified var:.. val = 0.1
        21:50:16.467773 line        83       setattr(args, key, val)
        21:50:16.468279 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'post_hp_tune_method'
        Modified var:.. val = 'slice'
        21:50:16.468729 line        83       setattr(args, key, val)
        21:50:16.469235 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'post_hp_tune_burn'
        Modified var:.. val = -1
        21:50:16.469685 line        83       setattr(args, key, val)
        21:50:16.470190 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'post_hp_tune_offset'
        Modified var:.. val = 25
        21:50:16.470639 line        83       setattr(args, key, val)
        21:50:16.471143 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_kernel_type'
        Modified var:.. val = 'default'
        21:50:16.471597 line        83       setattr(args, key, val)
        21:50:16.472102 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_use_same_bandwidth'
        Modified var:.. val = False
        21:50:16.472552 line        83       setattr(args, key, val)
        21:50:16.473044 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.473503 line        83       setattr(args, key, val)
        21:50:16.473997 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_poly_order'
        Modified var:.. val = 1
        21:50:16.474454 line        83       setattr(args, key, val)
        21:50:16.474949 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_use_additive_gp'
        Modified var:.. val = False
        21:50:16.475411 line        83       setattr(args, key, val)
        21:50:16.475905 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_add_max_group_size'
        Modified var:.. val = 6
        21:50:16.476367 line        83       setattr(args, key, val)
        21:50:16.476866 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_add_grouping_criterion'
        Modified var:.. val = 'randomised_ml'
        21:50:16.477328 line        83       setattr(args, key, val)
        21:50:16.477821 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_num_groups_per_group_size'
        Modified var:.. val = -1
        21:50:16.478285 line        83       setattr(args, key, val)
        21:50:16.478780 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_add_group_size_criterion'
        Modified var:.. val = 'sampled'
        21:50:16.479242 line        83       setattr(args, key, val)
        21:50:16.479740 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_esp_order'
        Modified var:.. val = -1
        21:50:16.480198 line        83       setattr(args, key, val)
        21:50:16.480693 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_esp_kernel_type'
        Modified var:.. val = 'se'
        21:50:16.481156 line        83       setattr(args, key, val)
        21:50:16.481658 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_euc_esp_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.482119 line        83       setattr(args, key, val)
        21:50:16.482617 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_kernel_type'
        21:50:16.483071 line        83       setattr(args, key, val)
        21:50:16.483550 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_use_same_bandwidth'
        Modified var:.. val = False
        21:50:16.483999 line        83       setattr(args, key, val)
        21:50:16.484505 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.484954 line        83       setattr(args, key, val)
        21:50:16.485459 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_poly_order'
        Modified var:.. val = 1
        21:50:16.485907 line        83       setattr(args, key, val)
        21:50:16.486409 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_use_additive_gp'
        Modified var:.. val = False
        21:50:16.486865 line        83       setattr(args, key, val)
        21:50:16.487371 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_add_max_group_size'
        Modified var:.. val = 6
        21:50:16.487820 line        83       setattr(args, key, val)
        21:50:16.488324 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_add_grouping_criterion'
        Modified var:.. val = 'randomised_ml'
        21:50:16.488776 line        83       setattr(args, key, val)
        21:50:16.489281 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_num_groups_per_group_size'
        Modified var:.. val = -1
        21:50:16.489733 line        83       setattr(args, key, val)
        21:50:16.490239 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_add_group_size_criterion'
        Modified var:.. val = 'sampled'
        21:50:16.490694 line        83       setattr(args, key, val)
        21:50:16.491197 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_esp_order'
        Modified var:.. val = -1
        21:50:16.491649 line        83       setattr(args, key, val)
        21:50:16.492151 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_esp_kernel_type'
        Modified var:.. val = 'se'
        21:50:16.492600 line        83       setattr(args, key, val)
        21:50:16.493108 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_int_esp_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.493562 line        83       setattr(args, key, val)
        21:50:16.494057 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_kernel_type'
        21:50:16.494515 line        83       setattr(args, key, val)
        21:50:16.494993 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_use_same_bandwidth'
        Modified var:.. val = False
        21:50:16.495455 line        83       setattr(args, key, val)
        21:50:16.495952 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.496412 line        83       setattr(args, key, val)
        21:50:16.496910 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_poly_order'
        Modified var:.. val = 1
        21:50:16.497374 line        83       setattr(args, key, val)
        21:50:16.497870 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_esp_order'
        Modified var:.. val = -1
        21:50:16.498333 line        83       setattr(args, key, val)
        21:50:16.498827 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_esp_kernel_type'
        Modified var:.. val = 'se'
        21:50:16.499293 line        83       setattr(args, key, val)
        21:50:16.499787 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_num_esp_matern_nu'
        Modified var:.. val = 'default'
        21:50:16.500252 line        83       setattr(args, key, val)
        21:50:16.500747 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_kernel_type'
        21:50:16.501207 line        83       setattr(args, key, val)
        21:50:16.501681 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_disc_hamming_use_same_weight'
        Modified var:.. val = False
        21:50:16.502136 line        83       setattr(args, key, val)
        21:50:16.502630 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'dom_nn_kernel_type'
        Modified var:.. val = 'default'
        21:50:16.503084 line        83       setattr(args, key, val)
        21:50:16.503581 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_dist_type'
        Modified var:.. val = 'lp-emd'
        21:50:16.504028 line        83       setattr(args, key, val)
        21:50:16.504529 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_kernel_type'
        Modified var:.. val = 'lpemd_sum'
        21:50:16.504977 line        83       setattr(args, key, val)
        21:50:16.505483 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_choose_mislabel_struct_coeffs'
        Modified var:.. val = 'use_given'
        21:50:16.505931 line        83       setattr(args, key, val)
        21:50:16.506436 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_mislabel_coeffs'
        Modified var:.. val = '1.0-1.0-1.0-1.0'
        21:50:16.506886 line        83       setattr(args, key, val)
        21:50:16.507390 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_struct_coeffs'
        Modified var:.. val = '0.1-0.25-0.61-1.5'
        21:50:16.507837 line        83       setattr(args, key, val)
        21:50:16.508340 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_lp_power'
        Modified var:.. val = 1
        21:50:16.508788 line        83       setattr(args, key, val)
        21:50:16.509291 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_emd_power'
        Modified var:.. val = 2
        21:50:16.509740 line        83       setattr(args, key, val)
        21:50:16.510242 line        82     for key, val in partial_options_dict.items():
        Modified var:.. key = 'otmann_non_assignment_penalty'
        Modified var:.. val = 1.0
        21:50:16.510697 line        83       setattr(args, key, val)
        21:50:16.511204 line        82     for key, val in partial_options_dict.items():
        21:50:16.511656 line        84   return args
        21:50:16.512111 return      84   return args
        Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
    21:50:16.512677 line       798   if acq is not None:
    21:50:16.513003 line       800   if mode is not None:
    21:50:16.513306 line       802   if mf_strategy is not None:
    21:50:16.513597 line       804   if moo_strategy == 'moors':
    21:50:16.513885 line       805     if moo_strategy_parameters is not None:
    21:50:16.514187 line       815   if isinstance(multi_func_caller.domain, domains.EuclideanDomain) \
    21:50:16.514479 line       824   optimiser = optimiser_constructor(multi_func_caller, worker_manager, is_mf=is_mf,
    21:50:16.514769 line       825                                     options=options, reporter=reporter)
        Starting var:.. self = <dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit object at 0x7f67132aa1d0>
        Starting var:.. multi_func_caller = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
        Starting var:.. worker_manager = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
        Starting var:.. is_mf = False
        Starting var:.. domain_dist_computers = None
        Starting var:.. options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        Starting var:.. reporter = <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
        Starting var:.. __class__ = <class 'dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit'>
        21:50:16.515067 call       636   def __init__(self, multi_func_caller, worker_manager, is_mf=False,
        21:50:16.515386 line       639     if is_mf:
        21:50:16.515548 line       642       all_args = get_all_cp_moo_gp_bandit_args()
            Starting var:.. additional_args = None
            21:50:16.515708 call        62 def get_all_cp_moo_gp_bandit_args(additional_args=None):
            21:50:16.515793 line        64   if additional_args is None:
            21:50:16.515851 line        65     additional_args = []
            Modified var:.. additional_args = []
            21:50:16.515907 line        66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
            21:50:16.515990 return      66   return get_all_cp_gp_bandit_args(additional_args + multiobjective_gp_bandit_args)
            Return value:.. [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        New var:....... all_args = [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
        21:50:16.516213 line       643     options = load_options(all_args, partial_options=options)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/utils/option_handler.py
            Starting var:.. list_of_options = [{'name': 'moo_strategy', 'required': False, 'de... the OTMANN distance.', 'type': <class 'float'>}]
            Starting var:.. descr = 'Algorithm'
            Starting var:.. reporter = None
            Starting var:.. cmd_line = False
            Starting var:.. partial_options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
            21:50:16.516526 call        51 def load_options(list_of_options, descr='Algorithm', reporter=None, cmd_line=False,
            21:50:16.516926 line        56   parser = argparse.ArgumentParser(description=descr)
            New var:....... parser = ArgumentParser(prog='inception_fixrandom.py', us...atter'>, conflict_handler='error', add_help=True)
            21:50:16.517989 line        57   opt_names_default_parsed = {}
            New var:....... opt_names_default_parsed = {}
            21:50:16.518327 line        58   for elem in list_of_options:
            New var:....... elem = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            21:50:16.518643 line        59     opt_dict = deepcopy(elem)
            New var:....... opt_dict = {'name': 'moo_strategy', 'required': False, 'def...trategy. So far, Dragonfly only supports moors.'}
            21:50:16.519023 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'moors', 'help': ...trategy. So far, Dragonfly only supports moors.'}
            New var:....... opt_name = 'moo_strategy'
            21:50:16.519357 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None]}
            21:50:16.519699 line        62     if not opt_name.startswith('--'):
            21:50:16.520020 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--moo_strategy'
            21:50:16.520334 line        64     if opt_name == '--options':
            21:50:16.520654 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.521058 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:16.521371 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'moors_scalarisation', 'required': Fals... for MOORS. Should be "tchebychev" or "linear".'}
            21:50:16.521761 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'tchebychev', 'he... for MOORS. Should be "tchebychev" or "linear".'}
            Modified var:.. opt_name = 'moors_scalarisation'
            21:50:16.522095 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalarisation': ['tchebychev', None]}
            21:50:16.522439 line        62     if not opt_name.startswith('--'):
            21:50:16.522761 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--moors_scalarisation'
            21:50:16.523060 line        64     if opt_name == '--options':
            21:50:16.523393 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.523801 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            21:50:16.524113 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'moors_weight_sampler', 'required': Fal..._uniform', 'help': 'A weight sampler for moors.'}
            21:50:16.524503 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'flat_uniform', 'help': 'A weight sampler for moors.'}
            Modified var:.. opt_name = 'moors_weight_sampler'
            21:50:16.524827 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'moors_weight_sampler': ['flat_uniform', None]}
            21:50:16.525176 line        62     if not opt_name.startswith('--'):
            21:50:16.525498 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--moors_weight_sampler'
            21:50:16.525794 line        64     if opt_name == '--options':
            21:50:16.526126 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.526533 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            21:50:16.526837 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'moors_reference_point', 'required': Fa...ult': None, 'help': 'Reference point for MOORS.'}
            21:50:16.527236 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Reference point for MOORS.'}
            Modified var:.. opt_name = 'moors_reference_point'
            21:50:16.527565 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...m', None], 'moors_reference_point': [None, None]}
            21:50:16.527907 line        62     if not opt_name.startswith('--'):
            21:50:16.528240 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--moors_reference_point'
            21:50:16.528539 line        64     if opt_name == '--options':
            21:50:16.528858 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.529278 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            21:50:16.529586 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'moo_gpb_prior_means', 'required': Fals... mean functions for Multi-objective GP bandits.'}
            21:50:16.529974 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Pr... mean functions for Multi-objective GP bandits.'}
            Modified var:.. opt_name = 'moo_gpb_prior_means'
            21:50:16.530312 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'moo_gpb_prior_means': [None, None]}
            21:50:16.530654 line        62     if not opt_name.startswith('--'):
            21:50:16.530975 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--moo_gpb_prior_means'
            21:50:16.531284 line        64     if opt_name == '--options':
            21:50:16.531605 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.532011 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            21:50:16.532328 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'max_num_steps', 'required': False, 'de...any evaluations, stop.', 'type': <class 'float'>}
            21:50:16.532729 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 10000000.0, 'help...any evaluations, stop.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'max_num_steps'
            21:50:16.533056 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None, None], 'max_num_steps': [10000000.0, None]}
            21:50:16.533414 line        62     if not opt_name.startswith('--'):
            21:50:16.533740 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--max_num_steps'
            21:50:16.534042 line        64     if opt_name == '--options':
            21:50:16.534419 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.534829 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            21:50:16.535146 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'capital_type', 'required': False, 'def...ld be one of return_value, cputime, or realtime'}
            21:50:16.535538 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'return_value', '...ld be one of return_value, cputime, or realtime'}
            Modified var:.. opt_name = 'capital_type'
            21:50:16.535864 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...0, None], 'capital_type': ['return_value', None]}
            21:50:16.536225 line        62     if not opt_name.startswith('--'):
            21:50:16.536550 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--capital_type'
            21:50:16.536854 line        64     if opt_name == '--options':
            21:50:16.537189 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.537598 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            21:50:16.537906 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'mode', 'required': False, 'default': '...synchronous parallelisation, else asynchronous."}
            21:50:16.538312 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'asy', 'help': "I...synchronous parallelisation, else asynchronous."}
            Modified var:.. opt_name = 'mode'
            21:50:16.538640 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': ['return_value', None], 'mode': ['asy', None]}
            21:50:16.538986 line        62     if not opt_name.startswith('--'):
            21:50:16.539322 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--mode'
            21:50:16.539627 line        64     if opt_name == '--options':
            21:50:16.539954 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.540373 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            21:50:16.540680 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'build_new_model_every', 'required': Fa...ry this many iterations.', 'type': <class 'int'>}
            21:50:16.541093 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 17, 'help': 'Upda...ry this many iterations.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'build_new_model_every'
            21:50:16.541427 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...asy', None], 'build_new_model_every': [17, None]}
            21:50:16.541774 line        62     if not opt_name.startswith('--'):
            21:50:16.542114 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--build_new_model_every'
            21:50:16.542420 line        64     if opt_name == '--options':
            21:50:16.542743 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.543159 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            21:50:16.543474 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'report_model_on_each_build', 'required...l each time it is built.', 'type': <class 'int'>}
            21:50:16.543877 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If Tr...l each time it is built.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'report_model_on_each_build'
            21:50:16.544225 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'report_model_on_each_build': [0, None]}
            21:50:16.544577 line        62     if not opt_name.startswith('--'):
            21:50:16.544905 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--report_model_on_each_build'
            21:50:16.545219 line        64     if opt_name == '--options':
            21:50:16.545546 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.545961 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            21:50:16.546283 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'report_results_every', 'required': Fal...ry this many iterations.', 'type': <class 'int'>}
            21:50:16.546696 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 13, 'help': 'Repo...ry this many iterations.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'report_results_every'
            21:50:16.547034 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0, None], 'report_results_every': [13, None]}
            21:50:16.547401 line        62     if not opt_name.startswith('--'):
            21:50:16.547734 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--report_results_every'
            21:50:16.548040 line        64     if opt_name == '--options':
            21:50:16.548381 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.548799 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            21:50:16.549121 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'init_capital', 'required': False, 'def...p': 'The capital to be used for initialisation.'}
            21:50:16.549521 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'The capital to be used for initialisation.'}
            Modified var:.. opt_name = 'init_capital'
            21:50:16.549857 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [13, None], 'init_capital': ['default', None]}
            21:50:16.550220 line        62     if not opt_name.startswith('--'):
            21:50:16.550549 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--init_capital'
            21:50:16.550857 line        64     if opt_name == '--options':
            21:50:16.551193 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.551607 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            21:50:16.551918 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'init_capital_frac', 'required': False,...he total capital to be used for initialisation.'}
            21:50:16.552322 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...he total capital to be used for initialisation.'}
            Modified var:.. opt_name = 'init_capital_frac'
            21:50:16.552654 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...fault', None], 'init_capital_frac': [None, None]}
            21:50:16.553009 line        62     if not opt_name.startswith('--'):
            21:50:16.553353 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--init_capital_frac'
            21:50:16.553660 line        64     if opt_name == '--options':
            21:50:16.553988 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.554412 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            21:50:16.554724 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'num_init_evals', 'required': False, 'd...If <0, will use default.', 'type': <class 'int'>}
            21:50:16.555175 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 20, 'help': 'The ...If <0, will use default.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'num_init_evals'
            21:50:16.555514 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...rac': [None, None], 'num_init_evals': [20, None]}
            21:50:16.555871 line        62     if not opt_name.startswith('--'):
            21:50:16.556218 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--num_init_evals'
            21:50:16.556531 line        64     if opt_name == '--options':
            21:50:16.556861 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.557290 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            21:50:16.557608 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'prev_evaluations', 'required': False, ...ne, 'help': 'Data for any previous evaluations.'}
            21:50:16.558009 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Data for any previous evaluations.'}
            Modified var:.. opt_name = 'prev_evaluations'
            21:50:16.558357 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...s': [20, None], 'prev_evaluations': [None, None]}
            21:50:16.558714 line        62     if not opt_name.startswith('--'):
            21:50:16.559046 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--prev_evaluations'
            21:50:16.559365 line        64     if opt_name == '--options':
            21:50:16.559701 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.560128 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            21:50:16.560446 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'get_initial_qinfos', 'required': False..., 'help': 'A function to obtain initial qinfos.'}
            21:50:16.560848 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'A function to obtain initial qinfos.'}
            Modified var:.. opt_name = 'get_initial_qinfos'
            21:50:16.561191 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'get_initial_qinfos': [None, None]}
            21:50:16.561545 line        62     if not opt_name.startswith('--'):
            21:50:16.561878 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--get_initial_qinfos'
            21:50:16.562197 line        64     if opt_name == '--options':
            21:50:16.562527 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.562942 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            21:50:16.563265 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'init_method', 'required': False, 'defa...queries. Is used if get_initial_qinfos is None.'}
            21:50:16.563665 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'rand', 'help': '...queries. Is used if get_initial_qinfos is None.'}
            Modified var:.. opt_name = 'init_method'
            21:50:16.564000 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...os': [None, None], 'init_method': ['rand', None]}
            21:50:16.564360 line        62     if not opt_name.startswith('--'):
            21:50:16.564691 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--init_method'
            21:50:16.564999 line        64     if opt_name == '--options':
            21:50:16.565341 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.565758 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            21:50:16.566076 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'progress_load_from_and_save_to', 'requ...rogress_save_to and progress_load_from options.'}
            21:50:16.566477 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo...rogress_save_to and progress_load_from options.'}
            Modified var:.. opt_name = 'progress_load_from_and_save_to'
            21:50:16.566840 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., 'progress_load_from_and_save_to': [None, None]}
            21:50:16.567221 line        62     if not opt_name.startswith('--'):
            21:50:16.567554 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--progress_load_from_and_save_to'
            21:50:16.567863 line        64     if opt_name == '--options':
            21:50:16.568202 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.568622 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            21:50:16.568936 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'progress_load_from', 'required': False... (from possibly a previous run) from this file.'}
            21:50:16.569349 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Lo... (from possibly a previous run) from this file.'}
            Modified var:.. opt_name = 'progress_load_from'
            21:50:16.569683 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...[None, None], 'progress_load_from': [None, None]}
            21:50:16.570038 line        62     if not opt_name.startswith('--'):
            21:50:16.570380 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--progress_load_from'
            21:50:16.570689 line        64     if opt_name == '--options':
            21:50:16.571018 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.571446 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            21:50:16.571761 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'progress_save_to', 'required': False, ...lt': None, 'help': 'Save progress to this file.'}
            21:50:16.572175 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Save progress to this file.'}
            Modified var:.. opt_name = 'progress_save_to'
            21:50:16.572510 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_to': [None, None]}
            21:50:16.572862 line        62     if not opt_name.startswith('--'):
            21:50:16.573204 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--progress_save_to'
            21:50:16.573515 line        64     if opt_name == '--options':
            21:50:16.573845 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.574275 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            21:50:16.574593 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'progress_save_every', 'required': Fals...s_save_every iterations.', 'type': <class 'int'>}
            21:50:16.575004 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 5, 'help': 'Save ...s_save_every iterations.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'progress_save_every'
            21:50:16.575354 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'progress_save_every': [5, None]}
            21:50:16.575712 line        62     if not opt_name.startswith('--'):
            21:50:16.576047 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--progress_save_every'
            21:50:16.576368 line        64     if opt_name == '--options':
            21:50:16.576702 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.577130 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            21:50:16.577448 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'progress_report_on_each_save', 'requir... time results are saved.', 'type': <class 'int'>}
            21:50:16.577862 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': True, 'help': 'If... time results are saved.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'progress_report_on_each_save'
            21:50:16.578212 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'progress_report_on_each_save': [True, None]}
            21:50:16.578574 line        62     if not opt_name.startswith('--'):
            21:50:16.578912 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--progress_report_on_each_save'
            21:50:16.579235 line        64     if opt_name == '--options':
            21:50:16.579569 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.579989 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:16.580313 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'acq', 'required': False, 'default': 'd... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            21:50:16.580712 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'... as a hyphen separated list e.g. ucb-ts-ei-ttei'}
            Modified var:.. opt_name = 'acq'
            21:50:16.581049 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ch_save': [True, None], 'acq': ['default', None]}
            21:50:16.581418 line        62     if not opt_name.startswith('--'):
            21:50:16.581752 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--acq'
            21:50:16.582068 line        64     if opt_name == '--options':
            21:50:16.582402 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.582820 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            21:50:16.583144 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'acq_probs', 'required': False, 'defaul...ght acquisitions according to how well they do.'}
            21:50:16.583549 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'adaptive', 'help...ght acquisitions according to how well they do.'}
            Modified var:.. opt_name = 'acq_probs'
            21:50:16.583886 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'acq_probs': ['adaptive', None]}
            21:50:16.584279 line        62     if not opt_name.startswith('--'):
            21:50:16.584633 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--acq_probs'
            21:50:16.584945 line        64     if opt_name == '--options':
            21:50:16.585292 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.585714 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            21:50:16.586030 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'acq_opt_method', 'required': False, 'd...o use when maximising the acquisition function.'}
            21:50:16.586446 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...o use when maximising the acquisition function.'}
            Modified var:.. opt_name = 'acq_opt_method'
            21:50:16.586784 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ive', None], 'acq_opt_method': ['default', None]}
            21:50:16.587154 line        62     if not opt_name.startswith('--'):
            21:50:16.587497 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--acq_opt_method'
            21:50:16.587809 line        64     if opt_name == '--options':
            21:50:16.588159 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.588583 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            21:50:16.588900 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'handle_parallel', 'required': False, '...le parallelisations. Should be halluc or naive.'}
            21:50:16.589315 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'halluc', 'help':...le parallelisations. Should be halluc or naive.'}
            Modified var:.. opt_name = 'handle_parallel'
            21:50:16.589654 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ult', None], 'handle_parallel': ['halluc', None]}
            21:50:16.590012 line        62     if not opt_name.startswith('--'):
            21:50:16.590359 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--handle_parallel'
            21:50:16.590672 line        64     if opt_name == '--options':
            21:50:16.591006 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.591436 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            21:50:16.591753 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'acq_opt_max_evals', 'required': False,...tive uses default value.', 'type': <class 'int'>}
            21:50:16.592173 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Numb...tive uses default value.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'acq_opt_max_evals'
            21:50:16.592512 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'halluc', None], 'acq_opt_max_evals': [-1, None]}
            21:50:16.592869 line        62     if not opt_name.startswith('--'):
            21:50:16.593218 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--acq_opt_max_evals'
            21:50:16.593535 line        64     if opt_name == '--options':
            21:50:16.593867 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.594301 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            21:50:16.594618 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_hp_tune_criterion', 'required': Fa... Other options are post_sampling and post_mean.'}
            21:50:16.595020 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'ml-post_sampling... Other options are post_sampling and post_mean.'}
            Modified var:.. opt_name = 'gpb_hp_tune_criterion'
            21:50:16.595372 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...b_hp_tune_criterion': ['ml-post_sampling', None]}
            21:50:16.595728 line        62     if not opt_name.startswith('--'):
            21:50:16.596076 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_hp_tune_criterion'
            21:50:16.596396 line        64     if opt_name == '--options':
            21:50:16.596733 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.597163 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            21:50:16.597485 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_hp_tune_probs', 'required': False,...ght acquisitions according to how well they do.'}
            21:50:16.597889 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': '0.3-0.7', 'help'...ght acquisitions according to how well they do.'}
            Modified var:.. opt_name = 'gpb_hp_tune_probs'
            21:50:16.598239 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...', None], 'gpb_hp_tune_probs': ['0.3-0.7', None]}
            21:50:16.598598 line        62     if not opt_name.startswith('--'):
            21:50:16.598937 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_hp_tune_probs'
            21:50:16.599267 line        64     if opt_name == '--options':
            21:50:16.599605 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.600030 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            21:50:16.600358 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_ml_hp_tune_opt', 'required': False...er to use when maximising the tuning criterion.'}
            21:50:16.600762 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            Modified var:.. opt_name = 'gpb_ml_hp_tune_opt'
            21:50:16.601112 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'gpb_ml_hp_tune_opt': ['default', None]}
            21:50:16.601475 line        62     if not opt_name.startswith('--'):
            21:50:16.601812 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_ml_hp_tune_opt'
            21:50:16.602137 line        64     if opt_name == '--options':
            21:50:16.602473 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.602895 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            21:50:16.603225 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_method', 'required': ...sing the tuning criterion. Other option is nuts'}
            21:50:16.603630 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...sing the tuning criterion. Other option is nuts'}
            Modified var:.. opt_name = 'gpb_post_hp_tune_method'
            21:50:16.603972 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'gpb_post_hp_tune_method': ['slice', None]}
            21:50:16.604343 line        62     if not opt_name.startswith('--'):
            21:50:16.604685 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_post_hp_tune_method'
            21:50:16.604999 line        64     if opt_name == '--options':
            21:50:16.605346 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.605769 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.606095 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_burn', 'required': Fa... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.606515 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'gpb_post_hp_tune_burn'
            21:50:16.606860 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ice', None], 'gpb_post_hp_tune_burn': [-1, None]}
            21:50:16.607228 line        62     if not opt_name.startswith('--'):
            21:50:16.607567 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_post_hp_tune_burn'
            21:50:16.607884 line        64     if opt_name == '--options':
            21:50:16.608233 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.608656 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            21:50:16.608977 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_post_hp_tune_offset', 'required': ... ignore between samples.', 'type': <class 'int'>}
            21:50:16.609403 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'gpb_post_hp_tune_offset'
            21:50:16.609743 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...-1, None], 'gpb_post_hp_tune_offset': [25, None]}
            21:50:16.610114 line        62     if not opt_name.startswith('--'):
            21:50:16.610452 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_post_hp_tune_offset'
            21:50:16.610766 line        64     if opt_name == '--options':
            21:50:16.611116 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.611544 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:16.611867 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'rand_exp_sampling_replace', 'required'...ot in rand_exp_sampling.', 'type': <class 'int'>}
            21:50:16.612298 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W...ot in rand_exp_sampling.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'rand_exp_sampling_replace'
            21:50:16.612644 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'rand_exp_sampling_replace': [False, None]}
            21:50:16.613007 line        62     if not opt_name.startswith('--'):
            21:50:16.613363 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--rand_exp_sampling_replace'
            21:50:16.613680 line        64     if opt_name == '--options':
            21:50:16.614021 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.614462 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            21:50:16.614789 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'mf_strategy', 'required': False, 'defa...elity strategy to use. Should be one of {boca}.'}
            21:50:16.615211 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'boca', 'help': '...elity strategy to use. Should be one of {boca}.'}
            Modified var:.. opt_name = 'mf_strategy'
            21:50:16.615556 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e': [False, None], 'mf_strategy': ['boca', None]}
            21:50:16.615917 line        62     if not opt_name.startswith('--'):
            21:50:16.616271 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--mf_strategy'
            21:50:16.616588 line        64     if opt_name == '--options':
            21:50:16.616926 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.617364 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            21:50:16.617705 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'gpb_prior_mean', 'required': False, 'd...help': 'The prior mean of the GP for the model.'}
            21:50:16.618130 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'The prior mean of the GP for the model.'}
            Modified var:.. opt_name = 'gpb_prior_mean'
            21:50:16.618492 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['boca', None], 'gpb_prior_mean': [None, None]}
            21:50:16.618869 line        62     if not opt_name.startswith('--'):
            21:50:16.619230 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--gpb_prior_mean'
            21:50:16.619560 line        64     if opt_name == '--options':
            21:50:16.619909 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.620358 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            21:50:16.620694 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'shrink_kernel_with_time', 'required': ...that we don't get stuck.", 'type': <class 'int'>}
            21:50:16.621136 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': "If Tr...that we don't get stuck.", 'type': <class 'int'>}
            Modified var:.. opt_name = 'shrink_kernel_with_time'
            21:50:16.621500 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one, None], 'shrink_kernel_with_time': [0, None]}
            21:50:16.621875 line        62     if not opt_name.startswith('--'):
            21:50:16.622246 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--shrink_kernel_with_time'
            21:50:16.622578 line        64     if opt_name == '--options':
            21:50:16.622929 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.623380 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            21:50:16.623717 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'perturb_thresh', 'required': False, 'd...ical stability issues.', 'type': <class 'float'>}
            21:50:16.624156 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0.0001, 'help': '...ical stability issues.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'perturb_thresh'
            21:50:16.624522 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...me': [0, None], 'perturb_thresh': [0.0001, None]}
            21:50:16.624902 line        62     if not opt_name.startswith('--'):
            21:50:16.625273 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--perturb_thresh'
            21:50:16.625612 line        64     if opt_name == '--options':
            21:50:16.625970 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.626432 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            21:50:16.626779 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'track_every_time_step', 'required': Fa... tracks every time step.', 'type': <class 'int'>}
            21:50:16.627228 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0, 'help': 'If 1, it tracks every time step.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'track_every_time_step'
            21:50:16.627589 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari....0001, None], 'track_every_time_step': [0, None]}
            21:50:16.627969 line        62     if not opt_name.startswith('--'):
            21:50:16.628339 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--track_every_time_step'
            21:50:16.628676 line        64     if opt_name == '--options':
            21:50:16.629034 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.629490 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            21:50:16.629831 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'next_pt_std_thresh', 'required': False...e the bandwidth range'), 'type': <class 'float'>}
            21:50:16.630299 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0.005, 'help': ('...e the bandwidth range'), 'type': <class 'float'>}
            Modified var:.. opt_name = 'next_pt_std_thresh'
            21:50:16.630667 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [0, None], 'next_pt_std_thresh': [0.005, None]}
            21:50:16.631049 line        62     if not opt_name.startswith('--'):
            21:50:16.631423 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--next_pt_std_thresh'
            21:50:16.631768 line        64     if opt_name == '--options':
            21:50:16.632146 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.632601 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            21:50:16.632955 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'nn_report_results_every', 'required': ... results more frequently', 'type': <class 'int'>}
            21:50:16.633415 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'If NN... results more frequently', 'type': <class 'int'>}
            Modified var:.. opt_name = 'nn_report_results_every'
            21:50:16.633790 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...005, None], 'nn_report_results_every': [1, None]}
            21:50:16.634212 line        62     if not opt_name.startswith('--'):
            21:50:16.634608 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--nn_report_results_every'
            21:50:16.634955 line        64     if opt_name == '--options':
            21:50:16.635333 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.635791 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            21:50:16.636155 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'hp_tune_criterion', 'required': False,... Other options are post_sampling and post_mean.'}
            21:50:16.636602 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'ml', 'help': 'Wh... Other options are post_sampling and post_mean.'}
            Modified var:.. opt_name = 'hp_tune_criterion'
            21:50:16.636982 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...y': [1, None], 'hp_tune_criterion': ['ml', None]}
            21:50:16.637393 line        62     if not opt_name.startswith('--'):
            21:50:16.637764 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--hp_tune_criterion'
            21:50:16.638124 line        64     if opt_name == '--options':
            21:50:16.638493 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.638950 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            21:50:16.639309 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'hp_tune_probs', 'required': False, 'de...ght acquisitions according to how well they do.'}
            21:50:16.639779 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'uniform', 'help'...ght acquisitions according to how well they do.'}
            Modified var:.. opt_name = 'hp_tune_probs'
            21:50:16.640189 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['ml', None], 'hp_tune_probs': ['uniform', None]}
            21:50:16.640613 line        62     if not opt_name.startswith('--'):
            21:50:16.640987 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--hp_tune_probs'
            21:50:16.641346 line        64     if opt_name == '--options':
            21:50:16.641720 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.642183 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            21:50:16.642542 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'ml_hp_tune_opt', 'required': False, 'd...er to use when maximising the tuning criterion.'}
            21:50:16.643031 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...er to use when maximising the tuning criterion.'}
            Modified var:.. opt_name = 'ml_hp_tune_opt'
            21:50:16.643424 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...orm', None], 'ml_hp_tune_opt': ['default', None]}
            21:50:16.643874 line        62     if not opt_name.startswith('--'):
            21:50:16.644265 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--ml_hp_tune_opt'
            21:50:16.644652 line        64     if opt_name == '--options':
            21:50:16.645033 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.645541 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:16.645894 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'hp_tune_max_evals', 'required': False,...ng the tuning criterion.', 'type': <class 'int'>}
            21:50:16.646406 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ...ng the tuning criterion.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'hp_tune_max_evals'
            21:50:16.646789 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'hp_tune_max_evals': [-1, None]}
            21:50:16.647250 line        62     if not opt_name.startswith('--'):
            21:50:16.647627 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--hp_tune_max_evals'
            21:50:16.648017 line        64     if opt_name == '--options':
            21:50:16.648405 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.648903 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            21:50:16.649264 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'handle_non_psd_kernels', 'required': F...help': 'How to handle kernels that are non-psd.'}
            21:50:16.649756 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'guaranteed_psd', 'help': 'How to handle kernels that are non-psd.'}
            Modified var:.. opt_name = 'handle_non_psd_kernels'
            21:50:16.650153 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...andle_non_psd_kernels': ['guaranteed_psd', None]}
            21:50:16.650602 line        62     if not opt_name.startswith('--'):
            21:50:16.650978 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--handle_non_psd_kernels'
            21:50:16.651375 line        64     if opt_name == '--options':
            21:50:16.651758 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.652265 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            21:50:16.652661 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'mean_func', 'required': False, 'defaul...will use this instead of theother options below'}
            21:50:16.653092 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': None, 'help': 'Th...will use this instead of theother options below'}
            Modified var:.. opt_name = 'mean_func'
            21:50:16.653517 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...uaranteed_psd', None], 'mean_func': [None, None]}
            21:50:16.653895 line        62     if not opt_name.startswith('--'):
            21:50:16.654326 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--mean_func'
            21:50:16.654662 line        64     if opt_name == '--options':
            21:50:16.655083 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.655538 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            21:50:16.655873 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'mean_func_type', 'required': False, 'd.... If const, specifcy value in mean-func-const.')}
            21:50:16.656322 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': (.... If const, specifcy value in mean-func-const.')}
            Modified var:.. opt_name = 'mean_func_type'
            21:50:16.656676 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: [None, None], 'mean_func_type': ['tune', None]}
            21:50:16.657044 line        62     if not opt_name.startswith('--'):
            21:50:16.657402 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--mean_func_type'
            21:50:16.657728 line        64     if opt_name == '--options':
            21:50:16.658080 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.658516 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            21:50:16.658846 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'mean_func_const', 'required': False, '...an_func_type is const.', 'type': <class 'float'>}
            21:50:16.659305 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0.0, 'help': 'The...an_func_type is const.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'mean_func_const'
            21:50:16.659673 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...: ['tune', None], 'mean_func_const': [0.0, None]}
            21:50:16.660041 line        62     if not opt_name.startswith('--'):
            21:50:16.660397 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--mean_func_const'
            21:50:16.660719 line        64     if opt_name == '--options':
            21:50:16.661069 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.661505 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            21:50:16.661835 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'noise_var_type', 'required': False, 'd...ate value in noise_var_label or noise_var_value'}
            21:50:16.662259 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'tune', 'help': '...ate value in noise_var_label or noise_var_value'}
            Modified var:.. opt_name = 'noise_var_type'
            21:50:16.662609 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [0.0, None], 'noise_var_type': ['tune', None]}
            21:50:16.662975 line        62     if not opt_name.startswith('--'):
            21:50:16.663331 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--noise_var_type'
            21:50:16.663657 line        64     if opt_name == '--options':
            21:50:16.664004 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.664444 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.664772 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'noise_var_label', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.665208 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0.05, 'help': 'Th...use as noise variance.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'noise_var_label'
            21:50:16.665562 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... ['tune', None], 'noise_var_label': [0.05, None]}
            21:50:16.665932 line        62     if not opt_name.startswith('--'):
            21:50:16.666290 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--noise_var_label'
            21:50:16.666616 line        64     if opt_name == '--options':
            21:50:16.666964 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.667447 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.667778 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'noise_var_value', 'required': False, '...use as noise variance.', 'type': <class 'float'>}
            21:50:16.668212 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 0.1, 'help': 'The...use as noise variance.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'noise_var_value'
            21:50:16.668568 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...l': [0.05, None], 'noise_var_value': [0.1, None]}
            21:50:16.668939 line        62     if not opt_name.startswith('--'):
            21:50:16.669298 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--noise_var_value'
            21:50:16.669625 line        64     if opt_name == '--options':
            21:50:16.669971 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.670417 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            21:50:16.670751 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'post_hp_tune_method', 'required': Fals...ing the tuning criterion. Other option is nuts.'}
            21:50:16.671176 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'slice', 'help': ...ing the tuning criterion. Other option is nuts.'}
            Modified var:.. opt_name = 'post_hp_tune_method'
            21:50:16.671527 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...1, None], 'post_hp_tune_method': ['slice', None]}
            21:50:16.671899 line        62     if not opt_name.startswith('--'):
            21:50:16.672259 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--post_hp_tune_method'
            21:50:16.672585 line        64     if opt_name == '--options':
            21:50:16.672929 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.673373 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.673705 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'post_hp_tune_burn', 'required': False,... ignore during sampling.', 'type': <class 'int'>}
            21:50:16.674140 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'How ... ignore during sampling.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'post_hp_tune_burn'
            21:50:16.674498 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...['slice', None], 'post_hp_tune_burn': [-1, None]}
            21:50:16.674870 line        62     if not opt_name.startswith('--'):
            21:50:16.675230 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--post_hp_tune_burn'
            21:50:16.675554 line        64     if opt_name == '--options':
            21:50:16.675899 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.676343 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            21:50:16.676678 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'post_hp_tune_offset', 'required': Fals... ignore between samples.', 'type': <class 'int'>}
            21:50:16.677118 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 25, 'help': 'How ... ignore between samples.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'post_hp_tune_offset'
            21:50:16.677476 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...': [-1, None], 'post_hp_tune_offset': [25, None]}
            21:50:16.677846 line        62     if not opt_name.startswith('--'):
            21:50:16.678210 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--post_hp_tune_offset'
            21:50:16.678536 line        64     if opt_name == '--options':
            21:50:16.678881 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.679326 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            21:50:16.679660 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_kernel_type', 'required': Fals...', 'help': 'Kernel type for euclidean domains. '}
            21:50:16.680084 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for euclidean domains. '}
            Modified var:.. opt_name = 'dom_euc_kernel_type'
            21:50:16.680441 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_kernel_type': ['default', None]}
            21:50:16.680810 line        62     if not opt_name.startswith('--'):
            21:50:16.681169 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_kernel_type'
            21:50:16.681494 line        64     if opt_name == '--options':
            21:50:16.681843 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.682284 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.682614 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.683040 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_use_same_bandwidth'
            21:50:16.683404 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_euc_use_same_bandwidth': [False, None]}
            21:50:16.683779 line        62     if not opt_name.startswith('--'):
            21:50:16.684141 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_use_same_bandwidth'
            21:50:16.684470 line        64     if opt_name == '--options':
            21:50:16.684817 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.685260 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.685594 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.686011 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_euc_matern_nu'
            21:50:16.686374 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_euc_matern_nu': ['default', None]}
            21:50:16.686743 line        62     if not opt_name.startswith('--'):
            21:50:16.687099 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_matern_nu'
            21:50:16.687425 line        64     if opt_name == '--options':
            21:50:16.687768 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.688212 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.688544 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.688974 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_poly_order'
            21:50:16.689338 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_euc_poly_order': [1, None]}
            21:50:16.689709 line        62     if not opt_name.startswith('--'):
            21:50:16.690057 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_poly_order'
            21:50:16.690396 line        64     if opt_name == '--options':
            21:50:16.690745 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.691188 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.691522 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.691950 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_use_additive_gp'
            21:50:16.692319 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_euc_use_additive_gp': [False, None]}
            21:50:16.692696 line        62     if not opt_name.startswith('--'):
            21:50:16.693051 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_use_additive_gp'
            21:50:16.693390 line        64     if opt_name == '--options':
            21:50:16.693738 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.694181 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.694520 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.694950 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_add_max_group_size'
            21:50:16.695319 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_add_max_group_size': [6, None]}
            21:50:16.695690 line        62     if not opt_name.startswith('--'):
            21:50:16.696043 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_add_max_group_size'
            21:50:16.696381 line        64     if opt_name == '--options':
            21:50:16.696731 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.697175 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.697513 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.697929 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            Modified var:.. opt_name = 'dom_euc_add_grouping_criterion'
            21:50:16.698296 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
            21:50:16.698669 line        62     if not opt_name.startswith('--'):
            21:50:16.699021 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_add_grouping_criterion'
            21:50:16.699359 line        64     if opt_name == '--options':
            21:50:16.699712 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.700157 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.700495 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.700925 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_num_groups_per_group_size'
            21:50:16.701292 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_euc_num_groups_per_group_size': [-1, None]}
            21:50:16.701667 line        62     if not opt_name.startswith('--'):
            21:50:16.702018 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_num_groups_per_group_size'
            21:50:16.702358 line        64     if opt_name == '--options':
            21:50:16.702713 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.703156 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.703494 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.703915 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            Modified var:.. opt_name = 'dom_euc_add_group_size_criterion'
            21:50:16.704282 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...euc_add_group_size_criterion': ['sampled', None]}
            21:50:16.704659 line        62     if not opt_name.startswith('--'):
            21:50:16.705011 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_add_group_size_criterion'
            21:50:16.705351 line        64     if opt_name == '--options':
            21:50:16.705700 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.706150 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.706489 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.706920 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_euc_esp_order'
            21:50:16.707289 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_euc_esp_order': [-1, None]}
            21:50:16.707667 line        62     if not opt_name.startswith('--'):
            21:50:16.708022 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_esp_order'
            21:50:16.708367 line        64     if opt_name == '--options':
            21:50:16.708720 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.709167 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.709517 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.709943 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            Modified var:.. opt_name = 'dom_euc_esp_kernel_type'
            21:50:16.710316 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_euc_esp_kernel_type': ['se', None]}
            21:50:16.710696 line        62     if not opt_name.startswith('--'):
            21:50:16.711061 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_esp_kernel_type'
            21:50:16.711405 line        64     if opt_name == '--options':
            21:50:16.711764 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.712215 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.712553 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_euc_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.712979 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_euc_esp_matern_nu'
            21:50:16.713352 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_euc_esp_matern_nu': ['default', None]}
            21:50:16.713731 line        62     if not opt_name.startswith('--'):
            21:50:16.714098 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_euc_esp_matern_nu'
            21:50:16.714430 line        64     if opt_name == '--options':
            21:50:16.714783 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.715236 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            21:50:16.715580 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_kernel_type', 'required': Fals...t', 'help': 'Kernel type for integral domains. '}
            21:50:16.716004 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for integral domains. '}
            Modified var:.. opt_name = 'dom_int_kernel_type'
            21:50:16.716379 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_kernel_type': ['default', None]}
            21:50:16.716758 line        62     if not opt_name.startswith('--'):
            21:50:16.717129 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_kernel_type'
            21:50:16.717470 line        64     if opt_name == '--options':
            21:50:16.717826 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.718277 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.718613 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_use_same_bandwidth', 'required...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.719048 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_use_same_bandwidth'
            21:50:16.719421 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_int_use_same_bandwidth': [False, None]}
            21:50:16.719798 line        62     if not opt_name.startswith('--'):
            21:50:16.720165 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_use_same_bandwidth'
            21:50:16.720500 line        64     if opt_name == '--options':
            21:50:16.720854 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.721307 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.721645 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_matern_nu', 'required': False,...value for matern kernel. If negative, will fit.'}
            21:50:16.722072 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_int_matern_nu'
            21:50:16.722435 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e, None], 'dom_int_matern_nu': ['default', None]}
            21:50:16.722810 line        62     if not opt_name.startswith('--'):
            21:50:16.723174 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_matern_nu'
            21:50:16.723509 line        64     if opt_name == '--options':
            21:50:16.723861 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.724310 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.724654 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_poly_order', 'required': False...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.725098 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_poly_order'
            21:50:16.725462 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...default', None], 'dom_int_poly_order': [1, None]}
            21:50:16.725841 line        62     if not opt_name.startswith('--'):
            21:50:16.726212 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_poly_order'
            21:50:16.726546 line        64     if opt_name == '--options':
            21:50:16.726899 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.727352 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.727695 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_use_additive_gp', 'required': ... to use an additive GP. ', 'type': <class 'int'>}
            21:50:16.728135 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'W... to use an additive GP. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_use_additive_gp'
            21:50:16.728499 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... None], 'dom_int_use_additive_gp': [False, None]}
            21:50:16.728877 line        62     if not opt_name.startswith('--'):
            21:50:16.729247 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_use_additive_gp'
            21:50:16.729580 line        64     if opt_name == '--options':
            21:50:16.729933 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.730386 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.730731 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_add_max_group_size', 'required... the additive grouping. ', 'type': <class 'int'>}
            21:50:16.731178 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 6, 'help': 'The m... the additive grouping. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_add_max_group_size'
            21:50:16.731543 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_add_max_group_size': [6, None]}
            21:50:16.731923 line        62     if not opt_name.startswith('--'):
            21:50:16.732293 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_add_max_group_size'
            21:50:16.732630 line        64     if opt_name == '--options':
            21:50:16.732986 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.733441 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.733787 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_add_grouping_criterion', 'requ...ing algorithm, should be one of {randomised_ml}'}
            21:50:16.734225 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'randomised_ml', ...ing algorithm, should be one of {randomised_ml}'}
            Modified var:.. opt_name = 'dom_int_add_grouping_criterion'
            21:50:16.734586 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...add_grouping_criterion': ['randomised_ml', None]}
            21:50:16.734969 line        62     if not opt_name.startswith('--'):
            21:50:16.735341 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_add_grouping_criterion'
            21:50:16.735681 line        64     if opt_name == '--options':
            21:50:16.736035 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.736487 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.736826 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_num_groups_per_group_size', 'r...s to try per group size.', 'type': <class 'int'>}
            21:50:16.737275 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'The ...s to try per group size.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_num_groups_per_group_size'
            21:50:16.737638 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_int_num_groups_per_group_size': [-1, None]}
            21:50:16.738019 line        62     if not opt_name.startswith('--'):
            21:50:16.738390 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_num_groups_per_group_size'
            21:50:16.738730 line        64     if opt_name == '--options':
            21:50:16.739098 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.739545 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.739884 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_add_group_size_criterion', 're...the group size, should be one of {max,sampled}.'}
            21:50:16.740324 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'sampled', 'help'...the group size, should be one of {max,sampled}.'}
            Modified var:.. opt_name = 'dom_int_add_group_size_criterion'
            21:50:16.740687 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...int_add_group_size_criterion': ['sampled', None]}
            21:50:16.741072 line        62     if not opt_name.startswith('--'):
            21:50:16.741434 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_add_group_size_criterion'
            21:50:16.741770 line        64     if opt_name == '--options':
            21:50:16.742136 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.742585 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.742924 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_esp_order', 'required': False,...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.743373 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_int_esp_order'
            21:50:16.743735 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...sampled', None], 'dom_int_esp_order': [-1, None]}
            21:50:16.744125 line        62     if not opt_name.startswith('--'):
            21:50:16.744486 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_esp_order'
            21:50:16.744821 line        64     if opt_name == '--options':
            21:50:16.745188 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.745634 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.745975 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_esp_kernel_type', 'required': ...ype of kernel. This depends on the application.'}
            21:50:16.746413 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            Modified var:.. opt_name = 'dom_int_esp_kernel_type'
            21:50:16.746775 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_int_esp_kernel_type': ['se', None]}
            21:50:16.747165 line        62     if not opt_name.startswith('--'):
            21:50:16.747524 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_esp_kernel_type'
            21:50:16.747864 line        64     if opt_name == '--options':
            21:50:16.748230 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.748674 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.749014 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_int_esp_matern_nu', 'required': Fa...value for matern kernel. If negative, will fit.'}
            21:50:16.749452 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_int_esp_matern_nu'
            21:50:16.749815 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...one], 'dom_int_esp_matern_nu': ['default', None]}
            21:50:16.750205 line        62     if not opt_name.startswith('--'):
            21:50:16.750566 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_int_esp_matern_nu'
            21:50:16.750901 line        64     if opt_name == '--options':
            21:50:16.751269 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.751715 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            21:50:16.752068 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_kernel_type', 'required':...p': 'Kernel type for discrete numeric domains. '}
            21:50:16.752502 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete numeric domains. '}
            Modified var:.. opt_name = 'dom_disc_num_kernel_type'
            21:50:16.752865 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...], 'dom_disc_num_kernel_type': ['default', None]}
            21:50:16.753259 line        62     if not opt_name.startswith('--'):
            21:50:16.753624 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_kernel_type'
            21:50:16.753962 line        64     if opt_name == '--options':
            21:50:16.754333 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.754777 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.755132 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_use_same_bandwidth', 'req...r matern. Default=False.', 'type': <class 'int'>}
            21:50:16.755574 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...r matern. Default=False.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_disc_num_use_same_bandwidth'
            21:50:16.755939 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...'dom_disc_num_use_same_bandwidth': [False, None]}
            21:50:16.756331 line        62     if not opt_name.startswith('--'):
            21:50:16.756696 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_use_same_bandwidth'
            21:50:16.757035 line        64     if opt_name == '--options':
            21:50:16.757407 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.757856 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            21:50:16.758210 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_matern_nu', 'required': F...value for matern kernel. If negative, will fit.'}
            21:50:16.758639 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_disc_num_matern_nu'
            21:50:16.759002 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ne], 'dom_disc_num_matern_nu': ['default', None]}
            21:50:16.759399 line        62     if not opt_name.startswith('--'):
            21:50:16.759766 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_matern_nu'
            21:50:16.760110 line        64     if opt_name == '--options':
            21:50:16.760470 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.760921 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.761280 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_poly_order', 'required': ...lt is 1 (linear kernel).', 'type': <class 'int'>}
            21:50:16.761723 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'Order...lt is 1 (linear kernel).', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_disc_num_poly_order'
            21:50:16.762099 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'dom_disc_num_poly_order': [1, None]}
            21:50:16.762487 line        62     if not opt_name.startswith('--'):
            21:50:16.762855 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_poly_order'
            21:50:16.763209 line        64     if opt_name == '--options':
            21:50:16.763572 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.764023 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.764378 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_order', 'required': F...rder of the esp kernel. ', 'type': <class 'int'>}
            21:50:16.764818 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': -1, 'help': 'Order of the esp kernel. ', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_disc_num_esp_order'
            21:50:16.765198 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... [1, None], 'dom_disc_num_esp_order': [-1, None]}
            21:50:16.765584 line        62     if not opt_name.startswith('--'):
            21:50:16.765946 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_esp_order'
            21:50:16.766294 line        64     if opt_name == '--options':
            21:50:16.766656 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.767125 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            21:50:16.767478 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_kernel_type', 'requir...ype of kernel. This depends on the application.'}
            21:50:16.767909 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'se', 'help': 'Sp...ype of kernel. This depends on the application.'}
            Modified var:.. opt_name = 'dom_disc_num_esp_kernel_type'
            21:50:16.768287 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'dom_disc_num_esp_kernel_type': ['se', None]}
            21:50:16.768676 line        62     if not opt_name.startswith('--'):
            21:50:16.769045 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_esp_kernel_type'
            21:50:16.769399 line        64     if opt_name == '--options':
            21:50:16.769760 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.770220 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            21:50:16.770572 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_num_esp_matern_nu', 'required...value for matern kernel. If negative, will fit.'}
            21:50:16.771004 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help'...value for matern kernel. If negative, will fit.'}
            Modified var:.. opt_name = 'dom_disc_num_esp_matern_nu'
            21:50:16.771381 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari... 'dom_disc_num_esp_matern_nu': ['default', None]}
            21:50:16.771766 line        62     if not opt_name.startswith('--'):
            21:50:16.772142 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_num_esp_matern_nu'
            21:50:16.772483 line        64     if opt_name == '--options':
            21:50:16.772846 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.773304 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            21:50:16.773652 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_kernel_type', 'required': Fal...lt', 'help': 'Kernel type for discrete domains.'}
            21:50:16.774087 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for discrete domains.'}
            Modified var:.. opt_name = 'dom_disc_kernel_type'
            21:50:16.774460 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'dom_disc_kernel_type': ['default', None]}
            21:50:16.774843 line        62     if not opt_name.startswith('--'):
            21:50:16.775296 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_kernel_type'
            21:50:16.775641 line        64     if opt_name == '--options':
            21:50:16.776002 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.776461 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:16.776806 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_disc_hamming_use_same_weight', 're...s of the hamming kernel.', 'type': <class 'int'>}
            21:50:16.777256 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': False, 'help': 'I...s of the hamming kernel.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'dom_disc_hamming_use_same_weight'
            21:50:16.777627 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...dom_disc_hamming_use_same_weight': [False, None]}
            21:50:16.778012 line        62     if not opt_name.startswith('--'):
            21:50:16.778386 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_disc_hamming_use_same_weight'
            21:50:16.778728 line        64     if opt_name == '--options':
            21:50:16.779148 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.779601 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            21:50:16.779952 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'dom_nn_kernel_type', 'required': False...'default', 'help': 'Kernel type for NN Domains.'}
            21:50:16.780393 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'default', 'help': 'Kernel type for NN Domains.'}
            Modified var:.. opt_name = 'dom_nn_kernel_type'
            21:50:16.780759 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari..., None], 'dom_nn_kernel_type': ['default', None]}
            21:50:16.781173 line        62     if not opt_name.startswith('--'):
            21:50:16.781561 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--dom_nn_kernel_type'
            21:50:16.781901 line        64     if opt_name == '--options':
            21:50:16.782276 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.782724 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            21:50:16.783074 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_dist_type', 'required': False, ... type of distance. Should be lp, emd or lp-emd.'}
            21:50:16.783508 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'lp-emd', 'help':... type of distance. Should be lp, emd or lp-emd.'}
            Modified var:.. opt_name = 'otmann_dist_type'
            21:50:16.783876 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...lt', None], 'otmann_dist_type': ['lp-emd', None]}
            21:50:16.784296 line        62     if not opt_name.startswith('--'):
            21:50:16.784683 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_dist_type'
            21:50:16.785023 line        64     if opt_name == '--options':
            21:50:16.785396 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.785850 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:16.786207 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_kernel_type', 'required': False...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            21:50:16.786636 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'lpemd_sum', 'hel...ld be one of lp, emd, lpemd_sum, or lpemd_prod.'}
            Modified var:.. opt_name = 'otmann_kernel_type'
            21:50:16.787003 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...None], 'otmann_kernel_type': ['lpemd_sum', None]}
            21:50:16.787398 line        62     if not opt_name.startswith('--'):
            21:50:16.787763 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_kernel_type'
            21:50:16.788114 line        64     if opt_name == '--options':
            21:50:16.788481 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.788931 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            21:50:16.789291 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_choose_mislabel_struct_coeffs',...s and otmann_struct_coeffs should be non-empty.'}
            21:50:16.789726 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 'use_given', 'hel...s and otmann_struct_coeffs should be non-empty.'}
            Modified var:.. opt_name = 'otmann_choose_mislabel_struct_coeffs'
            21:50:16.790104 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...ose_mislabel_struct_coeffs': ['use_given', None]}
            21:50:16.790494 line        62     if not opt_name.startswith('--'):
            21:50:16.790864 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_choose_mislabel_struct_coeffs'
            21:50:16.791218 line        64     if opt_name == '--options':
            21:50:16.791584 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.792035 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            21:50:16.792397 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_mislabel_coeffs', 'required': F...fied as a string. If -1, it means we will tune.'}
            21:50:16.792828 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': '1.0-1.0-1.0-1.0'...fied as a string. If -1, it means we will tune.'}
            Modified var:.. opt_name = 'otmann_mislabel_coeffs'
            21:50:16.793208 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_mislabel_coeffs': ['1.0-1.0-1.0-1.0', None]}
            21:50:16.793593 line        62     if not opt_name.startswith('--'):
            21:50:16.793959 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_mislabel_coeffs'
            21:50:16.794312 line        64     if opt_name == '--options':
            21:50:16.794678 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.795138 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            21:50:16.795492 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_struct_coeffs', 'required': Fal...fied as a string. If -1, it means we will tune.'}
            21:50:16.795927 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': '0.1-0.25-0.61-1....fied as a string. If -1, it means we will tune.'}
            Modified var:.. opt_name = 'otmann_struct_coeffs'
            21:50:16.796306 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...mann_struct_coeffs': ['0.1-0.25-0.61-1.5', None]}
            21:50:16.796696 line        62     if not opt_name.startswith('--'):
            21:50:16.797072 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_struct_coeffs'
            21:50:16.797420 line        64     if opt_name == '--options':
            21:50:16.797786 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.798245 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.798595 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_lp_power', 'required': False, '...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.799040 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'otmann_lp_power'
            21:50:16.799423 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...5-0.61-1.5', None], 'otmann_lp_power': [1, None]}
            21:50:16.799816 line        62     if not opt_name.startswith('--'):
            21:50:16.800195 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_lp_power'
            21:50:16.800538 line        64     if opt_name == '--options':
            21:50:16.800903 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.801365 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.801715 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_emd_power', 'required': False, ...distance for the kernel.', 'type': <class 'int'>}
            21:50:16.802171 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 2, 'help': 'The p...distance for the kernel.', 'type': <class 'int'>}
            Modified var:.. opt_name = 'otmann_emd_power'
            21:50:16.802545 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...power': [1, None], 'otmann_emd_power': [2, None]}
            21:50:16.802932 line        62     if not opt_name.startswith('--'):
            21:50:16.803313 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_emd_power'
            21:50:16.803657 line        64     if opt_name == '--options':
            21:50:16.804023 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.804483 line        58   for elem in list_of_options:
            Modified var:.. elem = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:16.804835 line        59     opt_dict = deepcopy(elem)
            Modified var:.. opt_dict = {'name': 'otmann_non_assignment_penalty', 'requi...r the OTMANN distance.', 'type': <class 'float'>}
            21:50:16.805290 line        60     opt_name = opt_dict.pop('name')
            Modified var:.. opt_dict = {'required': False, 'default': 1.0, 'help': 'The...r the OTMANN distance.', 'type': <class 'float'>}
            Modified var:.. opt_name = 'otmann_non_assignment_penalty'
            21:50:16.805664 line        61     opt_names_default_parsed[opt_name] = [opt_dict['default'], None]
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', None], 'moors_scalari...e], 'otmann_non_assignment_penalty': [1.0, None]}
            21:50:16.806054 line        62     if not opt_name.startswith('--'):
            21:50:16.806436 line        63       opt_name = '--' + opt_name
            Modified var:.. opt_name = '--otmann_non_assignment_penalty'
            21:50:16.806783 line        64     if opt_name == '--options':
            21:50:16.807161 line        67     parser.add_argument(opt_name, **opt_dict)
            21:50:16.807618 line        58   for elem in list_of_options:
            21:50:16.807972 line        68   if cmd_line:
            21:50:16.808357 line        71     args = parser.parse_args(args=[])
            New var:....... args = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
            21:50:16.809416 line        72   for key in opt_names_default_parsed:
            New var:....... key = 'moo_strategy'
            21:50:16.809874 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...e], 'otmann_non_assignment_penalty': [1.0, None]}
            21:50:16.810336 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'moors_scalarisation'
            21:50:16.810786 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.811264 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'moors_weight_sampler'
            21:50:16.811707 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.812156 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'moors_reference_point'
            21:50:16.812578 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.813020 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'moo_gpb_prior_means'
            21:50:16.813452 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.813899 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'max_num_steps'
            21:50:16.814330 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.814771 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'capital_type'
            21:50:16.815205 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.815650 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'mode'
            21:50:16.816077 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.816525 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'build_new_model_every'
            21:50:16.816946 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.817400 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'report_model_on_each_build'
            21:50:16.817821 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.818273 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'report_results_every'
            21:50:16.818697 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.819152 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'init_capital'
            21:50:16.819573 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.820018 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'init_capital_frac'
            21:50:16.820450 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.820896 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'num_init_evals'
            21:50:16.821327 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.821769 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'prev_evaluations'
            21:50:16.822202 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.822646 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'get_initial_qinfos'
            21:50:16.823071 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.823524 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'init_method'
            21:50:16.823948 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.824401 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'progress_load_from_and_save_to'
            21:50:16.824822 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.825277 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'progress_load_from'
            21:50:16.825703 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.826155 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'progress_save_to'
            21:50:16.826577 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.827018 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'progress_save_every'
            21:50:16.827449 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.827894 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'progress_report_on_each_save'
            21:50:16.828327 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.828769 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'acq'
            21:50:16.829202 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.829648 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'acq_probs'
            21:50:16.830075 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.830524 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'acq_opt_method'
            21:50:16.830947 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.831404 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'handle_parallel'
            21:50:16.831824 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.832277 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'acq_opt_max_evals'
            21:50:16.832698 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.833149 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_hp_tune_criterion'
            21:50:16.833569 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.834012 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_hp_tune_probs'
            21:50:16.834490 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.834936 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_ml_hp_tune_opt'
            21:50:16.835368 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.835811 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_post_hp_tune_method'
            21:50:16.836246 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.836694 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_post_hp_tune_burn'
            21:50:16.837127 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.837571 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_post_hp_tune_offset'
            21:50:16.837992 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.838450 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'rand_exp_sampling_replace'
            21:50:16.838876 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.839331 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'mf_strategy'
            21:50:16.839754 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.840208 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'gpb_prior_mean'
            21:50:16.840631 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.841083 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'shrink_kernel_with_time'
            21:50:16.841508 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.841950 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'perturb_thresh'
            21:50:16.842380 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.842826 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'track_every_time_step'
            21:50:16.843264 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.843712 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'next_pt_std_thresh'
            21:50:16.844147 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.844591 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'nn_report_results_every'
            21:50:16.845013 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.845468 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'hp_tune_criterion'
            21:50:16.845889 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.846344 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'hp_tune_probs'
            21:50:16.846769 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.847223 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'ml_hp_tune_opt'
            21:50:16.847647 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.848099 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'hp_tune_max_evals'
            21:50:16.848525 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.848971 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'handle_non_psd_kernels'
            21:50:16.849406 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.849853 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'mean_func'
            21:50:16.850290 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.850734 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'mean_func_type'
            21:50:16.851169 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.851613 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'mean_func_const'
            21:50:16.852037 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.852493 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'noise_var_type'
            21:50:16.852916 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.853370 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'noise_var_label'
            21:50:16.853796 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.854249 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'noise_var_value'
            21:50:16.854674 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.855130 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'post_hp_tune_method'
            21:50:16.855557 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.856004 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'post_hp_tune_burn'
            21:50:16.856442 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.856888 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'post_hp_tune_offset'
            21:50:16.857321 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.857765 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_kernel_type'
            21:50:16.858198 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.858644 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_use_same_bandwidth'
            21:50:16.859072 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.859526 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_matern_nu'
            21:50:16.859952 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.860406 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_poly_order'
            21:50:16.860830 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.861290 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_use_additive_gp'
            21:50:16.861712 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.862164 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_add_max_group_size'
            21:50:16.862588 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.863034 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_add_grouping_criterion'
            21:50:16.863464 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.863908 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_num_groups_per_group_size'
            21:50:16.864343 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.864789 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_add_group_size_criterion'
            21:50:16.865222 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.865666 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_esp_order'
            21:50:16.866100 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.866547 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_esp_kernel_type'
            21:50:16.866969 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.867425 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_euc_esp_matern_nu'
            21:50:16.867849 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.868303 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_kernel_type'
            21:50:16.868727 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.869182 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_use_same_bandwidth'
            21:50:16.869605 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.870049 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_matern_nu'
            21:50:16.870495 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.870941 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_poly_order'
            21:50:16.871375 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.871820 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_use_additive_gp'
            21:50:16.872251 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.872697 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_add_max_group_size'
            21:50:16.873130 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.873576 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_add_grouping_criterion'
            21:50:16.873998 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.874453 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_num_groups_per_group_size'
            21:50:16.874876 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.875332 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_add_group_size_criterion'
            21:50:16.875759 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.876215 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_esp_order'
            21:50:16.876639 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.877093 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_esp_kernel_type'
            21:50:16.877519 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.877963 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_int_esp_matern_nu'
            21:50:16.878396 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.878840 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_kernel_type'
            21:50:16.879275 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.879723 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_use_same_bandwidth'
            21:50:16.880153 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.880600 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_matern_nu'
            21:50:16.881024 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.881478 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_poly_order'
            21:50:16.881901 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.882355 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_esp_order'
            21:50:16.882780 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.883238 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_esp_kernel_type'
            21:50:16.883662 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.884131 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_num_esp_matern_nu'
            21:50:16.884584 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.885030 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_kernel_type'
            21:50:16.885464 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.885908 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_disc_hamming_use_same_weight'
            21:50:16.886341 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.886785 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'dom_nn_kernel_type'
            21:50:16.887216 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.887660 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_dist_type'
            21:50:16.888091 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.888542 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_kernel_type'
            21:50:16.888964 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.889418 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_choose_mislabel_struct_coeffs'
            21:50:16.889838 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.890288 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_mislabel_coeffs'
            21:50:16.890711 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.891167 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_struct_coeffs'
            21:50:16.891591 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.892037 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_lp_power'
            21:50:16.892470 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            21:50:16.892918 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_emd_power'
            21:50:16.893351 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal...2], 'otmann_non_assignment_penalty': [1.0, None]}
            21:50:16.893795 line        72   for key in opt_names_default_parsed:
            Modified var:.. key = 'otmann_non_assignment_penalty'
            21:50:16.894253 line        73     opt_names_default_parsed[key][1] = getattr(args, key)
            Modified var:.. opt_names_default_parsed = {'moo_strategy': ['moors', 'moors'], 'moors_scal... 2], 'otmann_non_assignment_penalty': [1.0, 1.0]}
            21:50:16.894701 line        72   for key in opt_names_default_parsed:
            21:50:16.895158 line        74   _print_options(opt_names_default_parsed, descr, reporter)
            21:50:16.895585 line        76   if partial_options is not None:
            21:50:16.896007 line        77     if isinstance(partial_options, dict):
            21:50:16.896439 line        80       partial_options_dict = vars(partial_options)
            New var:....... partial_options_dict = {'moo_strategy': 'moors', 'moors_scalarisation':..._power': 2, 'otmann_non_assignment_penalty': 1.0}
            21:50:16.896866 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'moo_strategy'
            New var:....... val = 'moors'
            21:50:16.897348 line        83       setattr(args, key, val)
            21:50:16.897843 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'moors_scalarisation'
            Modified var:.. val = 'tchebychev'
            21:50:16.898300 line        83       setattr(args, key, val)
            21:50:16.898794 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'moors_weight_sampler'
            Modified var:.. val = 'flat_uniform'
            21:50:16.899252 line        83       setattr(args, key, val)
            21:50:16.899744 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'moors_reference_point'
            Modified var:.. val = None
            21:50:16.900201 line        83       setattr(args, key, val)
            21:50:16.900694 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'moo_gpb_prior_means'
            21:50:16.901147 line        83       setattr(args, key, val)
            21:50:16.901619 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'max_num_steps'
            Modified var:.. val = 10000000.0
            21:50:16.902070 line        83       setattr(args, key, val)
            21:50:16.902566 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'capital_type'
            Modified var:.. val = 'return_value'
            21:50:16.903013 line        83       setattr(args, key, val)
            21:50:16.903515 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'mode'
            Modified var:.. val = 'asy'
            21:50:16.903965 line        83       setattr(args, key, val)
            21:50:16.904465 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'build_new_model_every'
            Modified var:.. val = 17
            21:50:16.904915 line        83       setattr(args, key, val)
            21:50:16.905416 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'report_model_on_each_build'
            Modified var:.. val = 0
            21:50:16.905863 line        83       setattr(args, key, val)
            21:50:16.906365 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'report_results_every'
            Modified var:.. val = 2
            21:50:16.906811 line        83       setattr(args, key, val)
            21:50:16.907316 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'init_capital'
            Modified var:.. val = None
            21:50:16.907763 line        83       setattr(args, key, val)
            21:50:16.908263 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'init_capital_frac'
            Modified var:.. val = 0.4
            21:50:16.908708 line        83       setattr(args, key, val)
            21:50:16.909212 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'num_init_evals'
            Modified var:.. val = 2
            21:50:16.909663 line        83       setattr(args, key, val)
            21:50:16.910166 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'prev_evaluations'
            Modified var:.. val = None
            21:50:16.910615 line        83       setattr(args, key, val)
            21:50:16.911117 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'get_initial_qinfos'
            21:50:16.911566 line        83       setattr(args, key, val)
            21:50:16.912041 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'init_method'
            Modified var:.. val = 'rand'
            21:50:16.912498 line        83       setattr(args, key, val)
            21:50:16.912993 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'progress_load_from_and_save_to'
            Modified var:.. val = None
            21:50:16.913450 line        83       setattr(args, key, val)
            21:50:16.913946 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'progress_load_from'
            21:50:16.914401 line        83       setattr(args, key, val)
            21:50:16.914872 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'progress_save_to'
            21:50:16.915335 line        83       setattr(args, key, val)
            21:50:16.915823 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'progress_save_every'
            Modified var:.. val = 5
            21:50:16.916279 line        83       setattr(args, key, val)
            21:50:16.916770 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'progress_report_on_each_save'
            Modified var:.. val = True
            21:50:16.917225 line        83       setattr(args, key, val)
            21:50:16.917715 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'acq'
            Modified var:.. val = 'default'
            21:50:16.918171 line        83       setattr(args, key, val)
            21:50:16.918666 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'acq_probs'
            Modified var:.. val = 'adaptive'
            21:50:16.919121 line        83       setattr(args, key, val)
            21:50:16.919612 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'acq_opt_method'
            Modified var:.. val = 'default'
            21:50:16.920060 line        83       setattr(args, key, val)
            21:50:16.920561 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'handle_parallel'
            Modified var:.. val = 'halluc'
            21:50:16.921009 line        83       setattr(args, key, val)
            21:50:16.921513 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'acq_opt_max_evals'
            Modified var:.. val = -1
            21:50:16.921960 line        83       setattr(args, key, val)
            21:50:16.922463 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_hp_tune_criterion'
            Modified var:.. val = 'ml-post_sampling'
            21:50:16.922910 line        83       setattr(args, key, val)
            21:50:16.923411 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_hp_tune_probs'
            Modified var:.. val = '0.3-0.7'
            21:50:16.923858 line        83       setattr(args, key, val)
            21:50:16.924363 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_ml_hp_tune_opt'
            Modified var:.. val = 'default'
            21:50:16.924810 line        83       setattr(args, key, val)
            21:50:16.925312 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_post_hp_tune_method'
            Modified var:.. val = 'slice'
            21:50:16.925758 line        83       setattr(args, key, val)
            21:50:16.926261 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_post_hp_tune_burn'
            Modified var:.. val = -1
            21:50:16.926707 line        83       setattr(args, key, val)
            21:50:16.927213 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_post_hp_tune_offset'
            Modified var:.. val = 25
            21:50:16.927659 line        83       setattr(args, key, val)
            21:50:16.928157 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'rand_exp_sampling_replace'
            Modified var:.. val = False
            21:50:16.928606 line        83       setattr(args, key, val)
            21:50:16.929105 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'mf_strategy'
            Modified var:.. val = 'boca'
            21:50:16.929551 line        83       setattr(args, key, val)
            21:50:16.930043 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'gpb_prior_mean'
            Modified var:.. val = None
            21:50:16.930500 line        83       setattr(args, key, val)
            21:50:16.930993 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'shrink_kernel_with_time'
            Modified var:.. val = 0
            21:50:16.931450 line        83       setattr(args, key, val)
            21:50:16.931944 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'perturb_thresh'
            Modified var:.. val = 0.0001
            21:50:16.932400 line        83       setattr(args, key, val)
            21:50:16.932893 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'track_every_time_step'
            Modified var:.. val = 0
            21:50:16.933352 line        83       setattr(args, key, val)
            21:50:16.933848 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'next_pt_std_thresh'
            Modified var:.. val = 0.005
            21:50:16.934309 line        83       setattr(args, key, val)
            21:50:16.934799 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'nn_report_results_every'
            Modified var:.. val = 1
            21:50:16.935254 line        83       setattr(args, key, val)
            21:50:16.935746 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'hp_tune_criterion'
            Modified var:.. val = 'ml'
            21:50:16.936204 line        83       setattr(args, key, val)
            21:50:16.936699 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'hp_tune_probs'
            Modified var:.. val = 'uniform'
            21:50:16.937155 line        83       setattr(args, key, val)
            21:50:16.937649 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'ml_hp_tune_opt'
            Modified var:.. val = 'default'
            21:50:16.938101 line        83       setattr(args, key, val)
            21:50:16.938597 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'hp_tune_max_evals'
            Modified var:.. val = -1
            21:50:16.939045 line        83       setattr(args, key, val)
            21:50:16.939553 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'handle_non_psd_kernels'
            Modified var:.. val = 'guaranteed_psd'
            21:50:16.940001 line        83       setattr(args, key, val)
            21:50:16.940500 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'mean_func'
            Modified var:.. val = None
            21:50:16.940947 line        83       setattr(args, key, val)
            21:50:16.941451 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'mean_func_type'
            Modified var:.. val = 'tune'
            21:50:16.941900 line        83       setattr(args, key, val)
            21:50:16.942410 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'mean_func_const'
            Modified var:.. val = 0.0
            21:50:16.942857 line        83       setattr(args, key, val)
            21:50:16.943360 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'noise_var_type'
            Modified var:.. val = 'tune'
            21:50:16.943807 line        83       setattr(args, key, val)
            21:50:16.944307 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'noise_var_label'
            Modified var:.. val = 0.05
            21:50:16.944755 line        83       setattr(args, key, val)
            21:50:16.945258 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'noise_var_value'
            Modified var:.. val = 0.1
            21:50:16.945709 line        83       setattr(args, key, val)
            21:50:16.946208 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'post_hp_tune_method'
            Modified var:.. val = 'slice'
            21:50:16.946659 line        83       setattr(args, key, val)
            21:50:16.947161 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'post_hp_tune_burn'
            Modified var:.. val = -1
            21:50:16.947608 line        83       setattr(args, key, val)
            21:50:16.948109 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'post_hp_tune_offset'
            Modified var:.. val = 25
            21:50:16.948557 line        83       setattr(args, key, val)
            21:50:16.949047 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_kernel_type'
            Modified var:.. val = 'default'
            21:50:16.949503 line        83       setattr(args, key, val)
            21:50:16.949995 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_use_same_bandwidth'
            Modified var:.. val = False
            21:50:16.950450 line        83       setattr(args, key, val)
            21:50:16.950945 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.951402 line        83       setattr(args, key, val)
            21:50:16.951895 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_poly_order'
            Modified var:.. val = 1
            21:50:16.952354 line        83       setattr(args, key, val)
            21:50:16.952847 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_use_additive_gp'
            Modified var:.. val = False
            21:50:16.953302 line        83       setattr(args, key, val)
            21:50:16.953791 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_add_max_group_size'
            Modified var:.. val = 6
            21:50:16.954248 line        83       setattr(args, key, val)
            21:50:16.954741 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_add_grouping_criterion'
            Modified var:.. val = 'randomised_ml'
            21:50:16.955197 line        83       setattr(args, key, val)
            21:50:16.955692 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_num_groups_per_group_size'
            Modified var:.. val = -1
            21:50:16.956146 line        83       setattr(args, key, val)
            21:50:16.956640 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_add_group_size_criterion'
            Modified var:.. val = 'sampled'
            21:50:16.957101 line        83       setattr(args, key, val)
            21:50:16.957594 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_esp_order'
            Modified var:.. val = -1
            21:50:16.958042 line        83       setattr(args, key, val)
            21:50:16.958542 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_esp_kernel_type'
            Modified var:.. val = 'se'
            21:50:16.958990 line        83       setattr(args, key, val)
            21:50:16.959490 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_euc_esp_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.959936 line        83       setattr(args, key, val)
            21:50:16.960440 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_kernel_type'
            21:50:16.960888 line        83       setattr(args, key, val)
            21:50:16.961372 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_use_same_bandwidth'
            Modified var:.. val = False
            21:50:16.961817 line        83       setattr(args, key, val)
            21:50:16.962321 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.962770 line        83       setattr(args, key, val)
            21:50:16.963274 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_poly_order'
            Modified var:.. val = 1
            21:50:16.963720 line        83       setattr(args, key, val)
            21:50:16.964221 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_use_additive_gp'
            Modified var:.. val = False
            21:50:16.964671 line        83       setattr(args, key, val)
            21:50:16.965172 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_add_max_group_size'
            Modified var:.. val = 6
            21:50:16.965618 line        83       setattr(args, key, val)
            21:50:16.966120 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_add_grouping_criterion'
            Modified var:.. val = 'randomised_ml'
            21:50:16.966567 line        83       setattr(args, key, val)
            21:50:16.967058 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_num_groups_per_group_size'
            Modified var:.. val = -1
            21:50:16.967513 line        83       setattr(args, key, val)
            21:50:16.968005 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_add_group_size_criterion'
            Modified var:.. val = 'sampled'
            21:50:16.968461 line        83       setattr(args, key, val)
            21:50:16.968953 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_esp_order'
            Modified var:.. val = -1
            21:50:16.969411 line        83       setattr(args, key, val)
            21:50:16.969904 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_esp_kernel_type'
            Modified var:.. val = 'se'
            21:50:16.970360 line        83       setattr(args, key, val)
            21:50:16.970848 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_int_esp_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.971302 line        83       setattr(args, key, val)
            21:50:16.971798 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_kernel_type'
            21:50:16.972258 line        83       setattr(args, key, val)
            21:50:16.972735 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_use_same_bandwidth'
            Modified var:.. val = False
            21:50:16.973191 line        83       setattr(args, key, val)
            21:50:16.973685 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.974155 line        83       setattr(args, key, val)
            21:50:16.974671 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_poly_order'
            Modified var:.. val = 1
            21:50:16.975126 line        83       setattr(args, key, val)
            21:50:16.975618 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_esp_order'
            Modified var:.. val = -1
            21:50:16.976068 line        83       setattr(args, key, val)
            21:50:16.976564 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_esp_kernel_type'
            Modified var:.. val = 'se'
            21:50:16.977013 line        83       setattr(args, key, val)
            21:50:16.977512 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_num_esp_matern_nu'
            Modified var:.. val = 'default'
            21:50:16.977957 line        83       setattr(args, key, val)
            21:50:16.978462 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_kernel_type'
            21:50:16.978908 line        83       setattr(args, key, val)
            21:50:16.979390 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_disc_hamming_use_same_weight'
            Modified var:.. val = False
            21:50:16.979837 line        83       setattr(args, key, val)
            21:50:16.980366 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'dom_nn_kernel_type'
            Modified var:.. val = 'default'
            21:50:16.980826 line        83       setattr(args, key, val)
            21:50:16.981331 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_dist_type'
            Modified var:.. val = 'lp-emd'
            21:50:16.981778 line        83       setattr(args, key, val)
            21:50:16.982279 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_kernel_type'
            Modified var:.. val = 'lpemd_sum'
            21:50:16.982726 line        83       setattr(args, key, val)
            21:50:16.983251 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_choose_mislabel_struct_coeffs'
            Modified var:.. val = 'use_given'
            21:50:16.983718 line        83       setattr(args, key, val)
            21:50:16.984243 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_mislabel_coeffs'
            Modified var:.. val = '1.0-1.0-1.0-1.0'
            21:50:16.984710 line        83       setattr(args, key, val)
            21:50:16.985213 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_struct_coeffs'
            Modified var:.. val = '0.1-0.25-0.61-1.5'
            21:50:16.985660 line        83       setattr(args, key, val)
            21:50:16.986159 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_lp_power'
            Modified var:.. val = 1
            21:50:16.986608 line        83       setattr(args, key, val)
            21:50:16.987111 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_emd_power'
            Modified var:.. val = 2
            21:50:16.987558 line        83       setattr(args, key, val)
            21:50:16.988050 line        82     for key, val in partial_options_dict.items():
            Modified var:.. key = 'otmann_non_assignment_penalty'
            Modified var:.. val = 1.0
            21:50:16.988502 line        83       setattr(args, key, val)
            21:50:16.988992 line        82     for key, val in partial_options_dict.items():
            21:50:16.989447 line        84   return args
            21:50:16.989891 return      84   return args
            Return value:.. Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
        21:50:16.990457 line       644     self.domain_dist_computers = domain_dist_computers
        21:50:16.990775 line       645     super(CPMultiObjectiveGPBandit, self).__init__(multi_func_caller, worker_manager,
        21:50:16.991068 line       646                                           is_mf=is_mf, options=options, reporter=reporter)
            Starting var:.. self = <dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit object at 0x7f67132aa1d0>
            Starting var:.. multi_func_caller = <dragonfly.exd.experiment_caller.CPMultiFunctionCaller object at 0x7f682a84d978>
            Starting var:.. worker_manager = <dragonfly.exd.worker_manager.SyntheticWorkerManager object at 0x7f671328df60>
            Starting var:.. is_mf = False
            Starting var:.. options = Namespace(acq='default', acq_opt_max_evals=-1, a...rink_kernel_with_time=0, track_every_time_step=0)
            Starting var:.. reporter = <dragonfly.utils.reporters.BasicReporter object at 0x7f6713280cc0>
            Starting var:.. __class__ = <class 'dragonfly.opt.multiobjective_gp_bandit.MultiObjectiveGPBandit'>
            21:50:16.991359 call       112   def __init__(self, multi_func_caller, worker_manager, is_mf=False,
            21:50:16.991655 line       115     self._is_mf = is_mf
            21:50:16.991815 line       116     if is_mf:
            21:50:16.991970 line       118     if is_mf and not multi_func_caller.is_mf():
            21:50:16.992132 line       120     super(MultiObjectiveGPBandit, self).__init__(multi_func_caller, worker_manager,
            21:50:16.992289 line       121                                                  None, options=options, reporter=reporter)
            21:50:17.007499 return     121                                                  None, options=options, reporter=reporter)
            Return value:.. None
        21:50:17.007712 return     646                                           is_mf=is_mf, options=options, reporter=reporter)
        Return value:.. None
    New var:....... optimiser = <dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit object at 0x7f67132aa1d0>
    21:50:17.008029 line       826   return optimiser.optimise(max_capital)
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_optimiser.py
        Starting var:.. self = <dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit object at 0x7f67132aa1d0>
        Starting var:.. max_capital = 5
        21:50:17.008408 call       208   def optimise(self, max_capital):
        21:50:17.008607 line       211     ret = self.run_experiments(max_capital)
            Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/exd_core.py
            Starting var:.. self = <dragonfly.opt.multiobjective_gp_bandit.CPMultiObjectiveGPBandit object at 0x7f67132aa1d0>
            Starting var:.. max_capital = 5
            21:50:17.008674 call       704   def run_experiments(self, max_capital):
            21:50:17.008913 line       706     self.add_capital(max_capital)
            21:50:17.008985 line       707     self.run_experiment_initialise()
            21:51:55.668321 line       710     while not self._terminate_now():
            21:51:55.668865 line       712       self._main_loop_pre()
            21:53:44.101617 line       713       if self.step_idx - self.last_report_at >= self.options.report_results_every:
            21:53:44.101761 line       714         self._report_curr_results()
            21:53:44.101909 line       716       if self.is_asynchronous():
            21:53:44.101993 line       717         self._asynchronous_run_experiment_routine()
            21:54:34.806163 line       721       if self.step_idx - self.last_model_build_at >= self.options.build_new_model_every:
            21:54:34.806563 line       723       if self.step_idx - self.last_progress_saved_at >= self.options.progress_save_every:
            21:54:34.806771 line       726       self._main_loop_post()
            21:54:34.806997 line       710     while not self._terminate_now():
            21:54:34.807261 line       712       self._main_loop_pre()
            21:54:34.811939 line       713       if self.step_idx - self.last_report_at >= self.options.report_results_every:
            21:54:34.812230 line       716       if self.is_asynchronous():
            21:54:34.812440 line       717         self._asynchronous_run_experiment_routine()
            21:55:19.977717 line       721       if self.step_idx - self.last_model_build_at >= self.options.build_new_model_every:
            21:55:19.978184 line       723       if self.step_idx - self.last_progress_saved_at >= self.options.progress_save_every:
            21:55:19.978420 line       724         self._save_progress_to_file()
            21:55:19.978623 line       726       self._main_loop_post()
            21:55:19.978787 line       710     while not self._terminate_now():
            21:55:19.978956 line       712       self._main_loop_pre()
            21:55:19.982851 line       713       if self.step_idx - self.last_report_at >= self.options.report_results_every:
            21:55:19.983126 line       714         self._report_curr_results()
            21:55:19.983452 line       716       if self.is_asynchronous():
            21:55:19.983658 line       717         self._asynchronous_run_experiment_routine()
            21:56:14.223094 line       721       if self.step_idx - self.last_model_build_at >= self.options.build_new_model_every:
            21:56:14.223487 line       723       if self.step_idx - self.last_progress_saved_at >= self.options.progress_save_every:
            21:56:14.223733 line       726       self._main_loop_post()
            21:56:14.223920 line       710     while not self._terminate_now():
            21:56:14.224083 line       712       self._main_loop_pre()
            21:56:14.228265 line       713       if self.step_idx - self.last_report_at >= self.options.report_results_every:
            21:56:14.228543 line       716       if self.is_asynchronous():
            21:56:14.228775 line       717         self._asynchronous_run_experiment_routine()
            21:57:09.095978 line       721       if self.step_idx - self.last_model_build_at >= self.options.build_new_model_every:
            21:57:09.096407 line       723       if self.step_idx - self.last_progress_saved_at >= self.options.progress_save_every:
            21:57:09.096633 line       726       self._main_loop_post()
            21:57:09.096834 line       710     while not self._terminate_now():
            21:57:09.097075 line       729     self._run_experiment_wrap_up()
            21:57:09.100536 line       730     return self._get_final_return_quantities()
            21:57:09.100803 return     730     return self._get_final_return_quantities()
            Return value:.. ([[0.5, 0.05936073139309883], [0.5, 0.0593607313...39309883]], query_worker_ids=[0, 0, 0, 0, 0, 0]))
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_optimiser.py
        New var:....... ret = ([[0.5, 0.05936073139309883], [0.5, 0.0593607313...39309883]], query_worker_ids=[0, 0, 0, 0, 0, 0]))
        21:57:09.102993 line       212     return ret
        21:57:09.105149 return     212     return ret
        Return value:.. ([[0.5, 0.05936073139309883], [0.5, 0.0593607313...39309883]], query_worker_ids=[0, 0, 0, 0, 0, 0]))
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/opt/multiobjective_gp_bandit.py
    21:57:09.108613 return     826   return optimiser.optimise(max_capital)
    Return value:.. ([[0.5, 0.05936073139309883], [0.5, 0.0593607313...39309883]], query_worker_ids=[0, 0, 0, 0, 0, 0]))
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
New var:....... pareto_values = [[0.5, 0.05936073139309883], [0.5, 0.05936073139...0.05936073139309883], [0.5, 0.05936073139309883]]
New var:....... pareto_points = [[[True, False, False, True, False], [4, 64, 0.0...alse, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]]
New var:....... history = Namespace(curr_pareto_points=[[[[True, False, Fa...139309883]], query_worker_ids=[0, 0, 0, 0, 0, 0])
21:57:09.111455 line       102   if domain.get_type() == 'euclidean' and config is None:
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/domains.py
    Starting var:.. self = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
    21:57:09.113908 call       406   def get_type(self):
    21:57:09.114286 line       408     return 'cartesian_product'
    21:57:09.114481 return     408     return 'cartesian_product'
    Return value:.. 'cartesian_product'
Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
21:57:09.114731 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
21:57:09.116933 line       108                      pt in pareto_points]
    Starting var:.. .0 = <list_iterator object at 0x7f6619b26f28>
    Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
    21:57:09.118929 call       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.119387 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.119645 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.119882 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.120423 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.120705 line       367   if has_fidel:
        21:57:09.121051 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
        21:57:09.121349 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.121716 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.122012 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.122537 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.122780 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.122985 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.123292 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.123674 line       351       elif isinstance(raw_dim, list):
            21:57:09.123916 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, False, True, False]]
            21:57:09.124182 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.124460 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.124809 line       351       elif isinstance(raw_dim, list):
            21:57:09.125046 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
            21:57:09.125305 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.125609 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, False, False, True, False, 4, 64, 0.01, 2, 4, 2, 0, 10, 2]
            21:57:09.125877 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.126198 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.126509 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
            21:57:09.126786 line       361   return x_orig_order
            21:57:09.127130 return     361   return x_orig_order
            Return value:.. [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
        New var:....... raw_dom_point = [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
        21:57:09.127502 line       373   if has_fidel:
        21:57:09.127891 line       379     return raw_dom_point
        21:57:09.128210 return     379     return raw_dom_point
        Return value:.. [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    New var:....... pt = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
    21:57:09.128607 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.129004 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.129267 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.129736 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.129988 line       367   if has_fidel:
        21:57:09.130345 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
        21:57:09.130599 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.130953 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.131257 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.131710 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.131931 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.132158 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.132432 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.132788 line       351       elif isinstance(raw_dim, list):
            21:57:09.133011 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, False, False, False]]
            21:57:09.133267 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.133527 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.134107 line       351       elif isinstance(raw_dim, list):
            21:57:09.134320 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
            21:57:09.134531 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.134780 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, False, False, False, False, 16, 16, 9e-05, 2, 2, 4, 0, 4, 0]
            21:57:09.134997 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.135285 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.135546 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
            21:57:09.135772 line       361   return x_orig_order
            21:57:09.136042 return     361   return x_orig_order
            Return value:.. [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
        New var:....... raw_dom_point = [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
        21:57:09.136367 line       373   if has_fidel:
        21:57:09.136682 line       379     return raw_dom_point
        21:57:09.136937 return     379     return raw_dom_point
        Return value:.. [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
    21:57:09.137299 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.137654 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.137869 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.138244 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.138454 line       367   if has_fidel:
        21:57:09.138708 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
        21:57:09.138914 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.139203 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.139432 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.139779 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.139959 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.140150 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.140376 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.140658 line       351       elif isinstance(raw_dim, list):
            21:57:09.140839 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, True, False, False]]
            21:57:09.141033 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.141286 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.141570 line       351       elif isinstance(raw_dim, list):
            21:57:09.141753 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
            21:57:09.141951 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.142207 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, False, True, False, False, 6, 512, 0.01, 2, 3, 8, 8, 2, 2]
            21:57:09.142413 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.142662 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.142905 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
            21:57:09.143140 line       361   return x_orig_order
            21:57:09.143413 return     361   return x_orig_order
            Return value:.. [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
        New var:....... raw_dom_point = [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
        21:57:09.143702 line       373   if has_fidel:
        21:57:09.143999 line       379     return raw_dom_point
        21:57:09.144260 return     379     return raw_dom_point
        Return value:.. [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
    21:57:09.144595 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.144913 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.145146 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.145506 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.145716 line       367   if has_fidel:
        21:57:09.145976 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
        21:57:09.146211 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.146492 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.146720 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.147081 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.147276 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.147447 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.147671 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.147955 line       351       elif isinstance(raw_dim, list):
            21:57:09.148158 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, True, True, False, True]]
            21:57:09.148359 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.148600 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.148874 line       351       elif isinstance(raw_dim, list):
            21:57:09.149052 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
            21:57:09.149271 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.149512 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, True, True, False, True, 16, 512, 9e-05, 2, 3, 2, 0, 2, 2]
            21:57:09.149711 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.149956 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.150213 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
            21:57:09.150422 line       361   return x_orig_order
            21:57:09.150685 return     361   return x_orig_order
            Return value:.. [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
        New var:....... raw_dom_point = [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
        21:57:09.150965 line       373   if has_fidel:
        21:57:09.151271 line       379     return raw_dom_point
        21:57:09.151507 return     379     return raw_dom_point
        Return value:.. [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
    21:57:09.151812 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.152141 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.152353 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.152698 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.152899 line       367   if has_fidel:
        21:57:09.153169 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
        21:57:09.153373 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.153636 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.153855 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.154210 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.154387 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.154570 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.154789 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.155079 line       351       elif isinstance(raw_dim, list):
            21:57:09.155271 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, True, True, False, True]]
            21:57:09.155472 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.155703 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.155978 line       351       elif isinstance(raw_dim, list):
            21:57:09.156181 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
            21:57:09.156384 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.156619 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, True, True, False, True, 6, 256, 0.003, 2, 4, 6, 6, 6, 0]
            21:57:09.156821 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.157077 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.157329 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
            21:57:09.157538 line       361   return x_orig_order
            21:57:09.157791 return     361   return x_orig_order
            Return value:.. [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
        New var:....... raw_dom_point = [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
        21:57:09.158087 line       373   if has_fidel:
        21:57:09.158389 line       379     return raw_dom_point
        21:57:09.158626 return     379     return raw_dom_point
        Return value:.. [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
    21:57:09.158935 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.159270 line       108                      pt in pareto_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.159493 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.159829 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.160026 line       367   if has_fidel:
        21:57:09.160289 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
        21:57:09.160487 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.160745 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.160958 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.161322 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.161496 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.161657 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.161867 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.162152 line       351       elif isinstance(raw_dim, list):
            21:57:09.162328 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, True, False, True]]
            21:57:09.162512 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.162732 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.162998 line       351       elif isinstance(raw_dim, list):
            21:57:09.163191 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
            21:57:09.163383 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.163606 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, False, True, False, True, 12, 64, 0.0004, 2, 4, 2, 4, 6, 2]
            21:57:09.163799 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.164034 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.164292 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
            21:57:09.164515 line       361   return x_orig_order
            21:57:09.164762 return     361   return x_orig_order
            Return value:.. [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
        New var:....... raw_dom_point = [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
        21:57:09.165036 line       373   if has_fidel:
        21:57:09.165339 line       379     return raw_dom_point
        21:57:09.165573 return     379     return raw_dom_point
        Return value:.. [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
    21:57:09.165876 line       107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    21:57:09.166200 return     107     pareto_points = [get_raw_from_processed_via_config(pt, config) for
    Return value:.. [[4, 64, 0.01, 2, 4, 2, 0, True, False, False, T..., 4, 2, 4, True, False, True, False, 6, True, 2]]
Modified var:.. pareto_points = [[4, 64, 0.01, 2, 4, 2, 0, True, False, False, T..., 4, 2, 4, True, False, True, False, 6, True, 2]]
21:57:09.166541 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
21:57:09.168282 line       110                                 for pt in history.query_points]
    Starting var:.. .0 = <list_iterator object at 0x7f6619b26f28>
    Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
    21:57:09.169852 call       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.170192 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.170395 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.170575 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.170910 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.171125 line       367   if has_fidel:
        21:57:09.171374 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
        21:57:09.171570 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.171824 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.172033 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.172378 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.172550 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.172709 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.172917 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.173203 line       351       elif isinstance(raw_dim, list):
            21:57:09.173376 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, False, True, False]]
            21:57:09.173558 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.173774 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.174037 line       351       elif isinstance(raw_dim, list):
            21:57:09.174230 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
            21:57:09.174419 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.174638 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, False, False, True, False, 4, 64, 0.01, 2, 4, 2, 0, 10, 2]
            21:57:09.174848 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.175099 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.175351 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
            21:57:09.175559 line       361   return x_orig_order
            21:57:09.175805 return     361   return x_orig_order
            Return value:.. [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
        New var:....... raw_dom_point = [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
        21:57:09.176094 line       373   if has_fidel:
        21:57:09.176387 line       379     return raw_dom_point
        21:57:09.176619 return     379     return raw_dom_point
        Return value:.. [4, 64, 0.01, 2, 4, 2, 0, True, False, False, True, 10, False, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    New var:....... pt = [[True, False, False, True, False], [4, 64, 0.01, 2, 4, 2, 0, 10, 2]]
    21:57:09.176918 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.177241 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.177448 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.177784 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.177983 line       367   if has_fidel:
        21:57:09.178251 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
        21:57:09.178452 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.178712 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.178927 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.179290 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.179468 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.179631 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.179843 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.180131 line       351       elif isinstance(raw_dim, list):
            21:57:09.180432 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, False, False, False]]
            21:57:09.180843 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.181331 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.181606 line       351       elif isinstance(raw_dim, list):
            21:57:09.181781 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
            21:57:09.181973 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.182219 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, False, False, False, False, 16, 16, 9e-05, 2, 2, 4, 0, 4, 0]
            21:57:09.182412 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.182645 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.182871 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
            21:57:09.183081 line       361   return x_orig_order
            21:57:09.183331 return     361   return x_orig_order
            Return value:.. [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
        New var:....... raw_dom_point = [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
        21:57:09.183594 line       373   if has_fidel:
        21:57:09.183870 line       379     return raw_dom_point
        21:57:09.184104 return     379     return raw_dom_point
        Return value:.. [16, 16, 9e-05, 2, 2, 4, 0, False, False, False, False, 4, False, 0]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, False, False, False, False], [16, 16, 9e-05, 2, 2, 4, 0, 4, 0]]
    21:57:09.184405 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.184697 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.184895 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.185244 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.185440 line       367   if has_fidel:
        21:57:09.185682 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
        21:57:09.185874 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.186149 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.186361 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.186681 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.186848 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.187004 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.187230 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.187497 line       351       elif isinstance(raw_dim, list):
            21:57:09.187665 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, True, False, False]]
            21:57:09.187845 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.188058 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.188339 line       351       elif isinstance(raw_dim, list):
            21:57:09.188511 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
            21:57:09.188695 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.188914 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, False, True, False, False, 6, 512, 0.01, 2, 3, 8, 8, 2, 2]
            21:57:09.189117 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.189361 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.189588 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
            21:57:09.189783 line       361   return x_orig_order
            21:57:09.190017 return     361   return x_orig_order
            Return value:.. [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
        New var:....... raw_dom_point = [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
        21:57:09.190303 line       373   if has_fidel:
        21:57:09.190575 line       379     return raw_dom_point
        21:57:09.190794 return     379     return raw_dom_point
        Return value:.. [6, 512, 0.01, 2, 3, 8, 8, False, False, True, False, 2, False, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, False, True, False, False], [6, 512, 0.01, 2, 3, 8, 8, 2, 2]]
    21:57:09.191095 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.191404 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.191596 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.191916 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.192120 line       367   if has_fidel:
        21:57:09.192356 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
        21:57:09.192542 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.192783 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.192984 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.193322 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.193486 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.193638 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.193837 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.194097 line       351       elif isinstance(raw_dim, list):
            21:57:09.194268 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, True, True, False, True]]
            21:57:09.194459 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.194661 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.194908 line       351       elif isinstance(raw_dim, list):
            21:57:09.195083 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
            21:57:09.195267 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.195478 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, True, True, False, True, 16, 512, 9e-05, 2, 3, 2, 0, 2, 2]
            21:57:09.195655 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.195875 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.196102 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
            21:57:09.196296 line       361   return x_orig_order
            21:57:09.196522 return     361   return x_orig_order
            Return value:.. [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
        New var:....... raw_dom_point = [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
        21:57:09.196770 line       373   if has_fidel:
        21:57:09.197026 line       379     return raw_dom_point
        21:57:09.197252 return     379     return raw_dom_point
        Return value:.. [16, 512, 9e-05, 2, 3, 2, 0, True, True, True, False, 2, True, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[True, True, True, False, True], [16, 512, 9e-05, 2, 3, 2, 0, 2, 2]]
    21:57:09.197529 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.197803 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.197990 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.198335 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.198521 line       367   if has_fidel:
        21:57:09.198745 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
        21:57:09.198927 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.199183 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.199382 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.199684 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.199842 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.199989 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.200201 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.200453 line       351       elif isinstance(raw_dim, list):
            21:57:09.200611 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, True, True, False, True]]
            21:57:09.200780 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.200981 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.201252 line       351       elif isinstance(raw_dim, list):
            21:57:09.201415 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
            21:57:09.201589 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.201801 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [False, True, True, False, True, 6, 256, 0.003, 2, 4, 6, 6, 6, 0]
            21:57:09.202048 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.202303 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.202521 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
            21:57:09.202716 line       361   return x_orig_order
            21:57:09.202932 return     361   return x_orig_order
            Return value:.. [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
        New var:....... raw_dom_point = [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
        21:57:09.203194 line       373   if has_fidel:
        21:57:09.203445 line       379     return raw_dom_point
        21:57:09.203650 return     379     return raw_dom_point
        Return value:.. [6, 256, 0.003, 2, 4, 6, 6, False, True, True, False, 6, True, 0]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[False, True, True, False, True], [6, 256, 0.003, 2, 4, 6, 6, 6, 0]]
    21:57:09.203924 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.204219 line       110                                 for pt in history.query_points]
        Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/exd/cp_domain_utils.py
        Starting var:.. proc_point = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
        Starting var:.. config = Namespace(domain=<dragonfly.exd.domains.Cartesia..._11', 'domvar_12', 'domvar_13']), name='no_name')
        21:57:09.204404 call       364 def get_raw_from_processed_via_config(proc_point, config):
        21:57:09.204706 line       366   has_fidel = hasattr(config, 'fidel_space')
        New var:....... has_fidel = False
        21:57:09.204884 line       367   if has_fidel:
        21:57:09.205122 line       370     proc_dom_point = proc_point
        New var:....... proc_dom_point = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
        21:57:09.205304 line       371   raw_dom_point = get_raw_point_from_processed_point(proc_dom_point, config.domain,
        21:57:09.205533 line       372     config.domain_orderings.index_ordering, config.domain_orderings.dim_ordering)
            Starting var:.. proc_x = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
            Starting var:.. cp_domain = <dragonfly.exd.domains.CartesianProductDomain object at 0x7f682a827b70>
            Starting var:.. index_ordering = [[7, 8, 9, 10, 12], [0, 1, 2, 3, 4, 5, 6, 11, 13]]
            Starting var:.. dim_ordering = [['', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]
            21:57:09.205722 call       342 def get_raw_point_from_processed_point(proc_x, cp_domain, index_ordering, dim_ordering):
            21:57:09.206014 line       344   if not cp_domain.get_type() == 'cartesian_product':
            21:57:09.206189 line       347     repacked_x = []
            New var:....... repacked_x = []
            21:57:09.206336 line       348     for idx, raw_dim in enumerate(dim_ordering):
            New var:....... idx = 0
            New var:....... raw_dim = ['', '', '', '', '']
            21:57:09.206525 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.206762 line       351       elif isinstance(raw_dim, list):
            21:57:09.206916 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, True, False, True]]
            21:57:09.207098 line       348     for idx, raw_dim in enumerate(dim_ordering):
            Modified var:.. idx = 1
            Modified var:.. raw_dim = ['', '', '', '', '', '', '', '', '']
            21:57:09.207306 line       349       if cp_domain.list_of_domains[idx].get_type() == 'discrete_euclidean':
            21:57:09.207547 line       351       elif isinstance(raw_dim, list):
            21:57:09.207703 line       352         repacked_x.append(_unpack_vectorised_domain(proc_x[idx], raw_dim))
            Modified var:.. repacked_x = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
            21:57:09.207870 line       348     for idx, raw_dim in enumerate(dim_ordering):
            21:57:09.208081 line       357     repacked_x = flatten_list_of_objects_and_iterables(repacked_x)
            Modified var:.. repacked_x = [True, False, True, False, True, 12, 64, 0.0004, 2, 4, 2, 4, 6, 2]
            21:57:09.208263 line       358   flattened_index_ordering = flatten_list_of_objects_and_iterables(index_ordering)
            New var:....... flattened_index_ordering = [7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 11, 13]
            21:57:09.208479 line       359   x_orig_order = get_original_order_from_reordered_list(repacked_x,
            21:57:09.208694 line       360                                                         flattened_index_ordering)
            New var:....... x_orig_order = [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
            21:57:09.208875 line       361   return x_orig_order
            21:57:09.209108 return     361   return x_orig_order
            Return value:.. [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
        New var:....... raw_dom_point = [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
        21:57:09.209354 line       373   if has_fidel:
        21:57:09.209603 line       379     return raw_dom_point
        21:57:09.209804 return     379     return raw_dom_point
        Return value:.. [12, 64, 0.0004, 2, 4, 2, 4, True, False, True, False, 6, True, 2]
    Source path:... /home/zhuoming.wu/anaconda3/envs/tf2/lib/python3.6/site-packages/dragonfly/apis/moo.py
    Modified var:.. pt = [[True, False, True, False, True], [12, 64, 0.0004, 2, 4, 2, 4, 6, 2]]
    21:57:09.210081 line       109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    21:57:09.210360 return     109     history.query_points_raw = [get_raw_from_processed_via_config(pt, config)
    Return value:.. [[4, 64, 0.01, 2, 4, 2, 0, True, False, False, T..., 4, 2, 4, True, False, True, False, 6, True, 2]]
21:57:09.210655 line       111   return pareto_values, pareto_points, history
21:57:09.212043 return     111   return pareto_values, pareto_points, history
Return value:.. ([[0.5, 0.05936073139309883], [0.5, 0.0593607313...39309883]], query_worker_ids=[0, 0, 0, 0, 0, 0]))
Elapsed time: 00:06:54.448573
